
0626_UART_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a85c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800aa00  0800aa00  0000ba00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec4  0800aec4  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aec4  0800aec4  0000bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aecc  0800aecc  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aecc  0800aecc  0000becc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aed0  0800aed0  0000bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aed4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001d8  0800b0ac  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800b0ac  0000c4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d09  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290e  00000000  00000000  0001df11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00020820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  000218a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018178  00000000  00000000  00022596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145f1  00000000  00000000  0003a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092967  00000000  00000000  0004ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  000e16ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e73a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a9e4 	.word	0x0800a9e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a9e4 	.word	0x0800a9e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a25      	ldr	r2, [pc, #148]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2120      	movs	r1, #32
 800100e:	4812      	ldr	r0, [pc, #72]	@ (8001058 <MX_GPIO_Init+0xd4>)
 8001010:	f001 fd02 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_GPIO_Init+0xd8>)
 800102c:	f001 fb58 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001030:	2320      	movs	r3, #32
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_GPIO_Init+0xd4>)
 8001048:	f001 fb4a 	bl	80026e0 <HAL_GPIO_Init>

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020800 	.word	0x40020800

08001060 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	@ (80010b4 <MX_I2C1_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <MX_I2C1_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800109e:	f001 fcd5 	bl	8002a4c <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 fdde 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	40005400 	.word	0x40005400
 80010b8:	000186a0 	.word	0x000186a0

080010bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <HAL_I2C_MspInit+0x84>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12b      	bne.n	8001136 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23c0      	movs	r3, #192	@ 0xc0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110a:	2304      	movs	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <HAL_I2C_MspInit+0x8c>)
 8001116:	f001 fae3 	bl	80026e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	@ 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005400 	.word	0x40005400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400

0800114c <PCF8591_ReadChannel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t PCF8591_ReadChannel(I2C_HandleTypeDef *hi2c, uint8_t ch) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = 0x40 | (ch & 0x03);
 8001158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	73fb      	strb	r3, [r7, #15]
    uint8_t dummy, val;
    HAL_I2C_Master_Transmit(hi2c, PCF8591_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800116c:	f107 020f 	add.w	r2, r7, #15
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	2190      	movs	r1, #144	@ 0x90
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f001 fdaa 	bl	8002cd4 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 8001180:	2002      	movs	r0, #2
 8001182:	f001 f8e5 	bl	8002350 <HAL_Delay>
    HAL_I2C_Master_Receive(hi2c, PCF8591_ADDR, &dummy, 1, HAL_MAX_DELAY);
 8001186:	f107 020e 	add.w	r2, r7, #14
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	2190      	movs	r1, #144	@ 0x90
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 fe9b 	bl	8002ed0 <HAL_I2C_Master_Receive>
    HAL_I2C_Master_Receive(hi2c, PCF8591_ADDR, &val,   1, HAL_MAX_DELAY);
 800119a:	f107 020d 	add.w	r2, r7, #13
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2190      	movs	r1, #144	@ 0x90
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 fe91 	bl	8002ed0 <HAL_I2C_Master_Receive>
    return val;
 80011ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_UART_RxCpltCallback>:

/* UART 수신 인터럽트 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a24      	ldr	r2, [pc, #144]	@ (8001258 <HAL_UART_RxCpltCallback+0xa0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d142      	bne.n	8001250 <HAL_UART_RxCpltCallback+0x98>
    	 printf("받은 명령: %c\n", rx_byte);
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <HAL_UART_RxCpltCallback+0xa4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4823      	ldr	r0, [pc, #140]	@ (8001260 <HAL_UART_RxCpltCallback+0xa8>)
 80011d2:	f007 fa4d 	bl	8008670 <iprintf>

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // LED OFF
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	@ 0x40
 80011da:	4822      	ldr	r0, [pc, #136]	@ (8001264 <HAL_UART_RxCpltCallback+0xac>)
 80011dc:	f001 fc1c 	bl	8002a18 <HAL_GPIO_WritePin>

        if (rx_state == 0 && rx_byte == 'L') {
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_UART_RxCpltCallback+0xb0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0x40>
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <HAL_UART_RxCpltCallback+0xa4>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b4c      	cmp	r3, #76	@ 0x4c
 80011ee:	d103      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0x40>
            rx_state = 1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <HAL_UART_RxCpltCallback+0xb0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e023      	b.n	8001240 <HAL_UART_RxCpltCallback+0x88>
        } else if (rx_state == 1) {
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_UART_RxCpltCallback+0xb0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d11c      	bne.n	800123a <HAL_UART_RxCpltCallback+0x82>
            if (rx_byte == '1') {
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_UART_RxCpltCallback+0xa4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b31      	cmp	r3, #49	@ 0x31
 8001206:	d108      	bne.n	800121a <HAL_UART_RxCpltCallback+0x62>
                printf("LED_ON\n");
 8001208:	4818      	ldr	r0, [pc, #96]	@ (800126c <HAL_UART_RxCpltCallback+0xb4>)
 800120a:	f007 fa99 	bl	8008740 <puts>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // LED ON
 800120e:	2201      	movs	r2, #1
 8001210:	2140      	movs	r1, #64	@ 0x40
 8001212:	4814      	ldr	r0, [pc, #80]	@ (8001264 <HAL_UART_RxCpltCallback+0xac>)
 8001214:	f001 fc00 	bl	8002a18 <HAL_GPIO_WritePin>
 8001218:	e00b      	b.n	8001232 <HAL_UART_RxCpltCallback+0x7a>
            } else if (rx_byte == '0') {
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_UART_RxCpltCallback+0xa4>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b30      	cmp	r3, #48	@ 0x30
 8001220:	d107      	bne.n	8001232 <HAL_UART_RxCpltCallback+0x7a>
                printf("LED_OFF\n");
 8001222:	4813      	ldr	r0, [pc, #76]	@ (8001270 <HAL_UART_RxCpltCallback+0xb8>)
 8001224:	f007 fa8c 	bl	8008740 <puts>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // LED OFF
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	480d      	ldr	r0, [pc, #52]	@ (8001264 <HAL_UART_RxCpltCallback+0xac>)
 800122e:	f001 fbf3 	bl	8002a18 <HAL_GPIO_WritePin>
            }
            rx_state = 0;
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_UART_RxCpltCallback+0xb0>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e002      	b.n	8001240 <HAL_UART_RxCpltCallback+0x88>
        } else {
            rx_state = 0;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_UART_RxCpltCallback+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);  // 다음 수신 예약
 8001240:	2201      	movs	r2, #1
 8001242:	4906      	ldr	r1, [pc, #24]	@ (800125c <HAL_UART_RxCpltCallback+0xa4>)
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <HAL_UART_RxCpltCallback+0xbc>)
 8001246:	f004 f84a 	bl	80052de <HAL_UART_Receive_IT>
        printf("Receive_IT called!");
 800124a:	480b      	ldr	r0, [pc, #44]	@ (8001278 <HAL_UART_RxCpltCallback+0xc0>)
 800124c:	f007 fa10 	bl	8008670 <iprintf>
    }

}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40011000 	.word	0x40011000
 800125c:	20000248 	.word	0x20000248
 8001260:	0800aa00 	.word	0x0800aa00
 8001264:	40020000 	.word	0x40020000
 8001268:	20000249 	.word	0x20000249
 800126c:	0800aa14 	.word	0x0800aa14
 8001270:	0800aa1c 	.word	0x0800aa1c
 8001274:	20000300 	.word	0x20000300
 8001278:	0800aa24 	.word	0x0800aa24

0800127c <adc8_to_mv>:

static inline float adc8_to_mv(uint8_t v) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    return (v / 255.0f) * 5000.0f;
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80012b0 <adc8_to_mv+0x34>
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80012b4 <adc8_to_mv+0x38>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	437f0000 	.word	0x437f0000
 80012b4:	459c4000 	.word	0x459c4000

080012b8 <emf_mv_to_emf>:
static inline float emf_mv_to_emf(float mv) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	ed87 0a01 	vstr	s0, [r7, #4]
    return mv / 6.0f;
 80012c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80012ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <ntc_calc_celsius>:
static float ntc_calc_celsius(uint8_t ther_raw) {
 80012e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e4:	b08a      	sub	sp, #40	@ 0x28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
    const float C1 = 0.00230088f, C2 = 0.000224f, C3 = 0.000000021133f;
 80012ec:	4b48      	ldr	r3, [pc, #288]	@ (8001410 <ntc_calc_celsius+0x130>)
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f0:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <ntc_calc_celsius+0x134>)
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	4b48      	ldr	r3, [pc, #288]	@ (8001418 <ntc_calc_celsius+0x138>)
 80012f6:	61fb      	str	r3, [r7, #28]
    const float R0 = 15.0f;
 80012f8:	4b48      	ldr	r3, [pc, #288]	@ (800141c <ntc_calc_celsius+0x13c>)
 80012fa:	61bb      	str	r3, [r7, #24]
    float v = (float)ther_raw;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001306:	edc7 7a05 	vstr	s15, [r7, #20]
    float r = (R0 * v) / (255.0f - v);
 800130a:	ed97 7a06 	vldr	s14, [r7, #24]
 800130e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001312:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001316:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001420 <ntc_calc_celsius+0x140>
 800131a:	edd7 7a05 	vldr	s15, [r7, #20]
 800131e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001326:	edc7 7a04 	vstr	s15, [r7, #16]
    float t = 1.0f / (C1 + C2 * log(r) + C3 * pow(log(r), 3)) - 273.15f;
 800132a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800132c:	f7ff f914 	bl	8000558 <__aeabi_f2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	6a38      	ldr	r0, [r7, #32]
 8001336:	f7ff f90f 	bl	8000558 <__aeabi_f2d>
 800133a:	4680      	mov	r8, r0
 800133c:	4689      	mov	r9, r1
 800133e:	6938      	ldr	r0, [r7, #16]
 8001340:	f7ff f90a 	bl	8000558 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b10 	vmov	d0, r2, r3
 800134c:	f004 ff58 	bl	8006200 <log>
 8001350:	ec53 2b10 	vmov	r2, r3, d0
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7ff f956 	bl	8000608 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7fe ff9a 	bl	800029c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4690      	mov	r8, r2
 800136e:	4699      	mov	r9, r3
 8001370:	69f8      	ldr	r0, [r7, #28]
 8001372:	f7ff f8f1 	bl	8000558 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	6938      	ldr	r0, [r7, #16]
 800137c:	f7ff f8ec 	bl	8000558 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b10 	vmov	d0, r2, r3
 8001388:	f004 ff3a 	bl	8006200 <log>
 800138c:	eeb0 7a40 	vmov.f32	s14, s0
 8001390:	eef0 7a60 	vmov.f32	s15, s1
 8001394:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001400 <ntc_calc_celsius+0x120>
 8001398:	eeb0 0a47 	vmov.f32	s0, s14
 800139c:	eef0 0a67 	vmov.f32	s1, s15
 80013a0:	f004 ff6c 	bl	800627c <pow>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f92c 	bl	8000608 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7fe ff70 	bl	800029c <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	4917      	ldr	r1, [pc, #92]	@ (8001424 <ntc_calc_celsius+0x144>)
 80013c6:	f7ff fa49 	bl	800085c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001408 <ntc_calc_celsius+0x128>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7fe ff5e 	bl	8000298 <__aeabi_dsub>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbe8 	bl	8000bb8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
    return t;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	ee07 3a90 	vmov	s15, r3
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	3728      	adds	r7, #40	@ 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013fe:	bf00      	nop
 8001400:	00000000 	.word	0x00000000
 8001404:	40080000 	.word	0x40080000
 8001408:	60000000 	.word	0x60000000
 800140c:	40711266 	.word	0x40711266
 8001410:	3b16ca5c 	.word	0x3b16ca5c
 8001414:	396ae18b 	.word	0x396ae18b
 8001418:	32b587f5 	.word	0x32b587f5
 800141c:	41700000 	.word	0x41700000
 8001420:	437f0000 	.word	0x437f0000
 8001424:	3ff00000 	.word	0x3ff00000

08001428 <push_avg>:
static void push_avg(float emf_mv, float temp_c, float *emf_avg, float *temp_avg) {
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	@ 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001432:	edc7 0a02 	vstr	s1, [r7, #8]
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    emf_buf[avg_idx] = emf_mv;
 800143a:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <push_avg+0xfc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4a3a      	ldr	r2, [pc, #232]	@ (8001528 <push_avg+0x100>)
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	601a      	str	r2, [r3, #0]
    ther_buf[avg_idx] = temp_c;
 8001448:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <push_avg+0xfc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4a37      	ldr	r2, [pc, #220]	@ (800152c <push_avg+0x104>)
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
    avg_idx = (avg_idx + 1) % AVG_CNT;
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <push_avg+0xfc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <push_avg+0x108>)
 800145e:	fb83 1302 	smull	r1, r3, r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	1ad1      	subs	r1, r2, r3
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <push_avg+0xfc>)
 8001476:	701a      	strb	r2, [r3, #0]
    if (avg_idx == 0) avg_filled = true;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <push_avg+0xfc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <push_avg+0x5e>
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <push_avg+0x10c>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
    uint8_t n = avg_filled ? AVG_CNT : avg_idx;
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <push_avg+0x10c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <push_avg+0x6a>
 800148e:	230a      	movs	r3, #10
 8001490:	e001      	b.n	8001496 <push_avg+0x6e>
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <push_avg+0xfc>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	75bb      	strb	r3, [r7, #22]
    float e_sum = 0, t_sum = 0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < n; ++i) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	75fb      	strb	r3, [r7, #23]
 80014a8:	e01a      	b.n	80014e0 <push_avg+0xb8>
        e_sum += emf_buf[i];
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <push_avg+0x100>)
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014be:	edc7 7a07 	vstr	s15, [r7, #28]
        t_sum += ther_buf[i];
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	4a19      	ldr	r2, [pc, #100]	@ (800152c <push_avg+0x104>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	edc7 7a06 	vstr	s15, [r7, #24]
    for (uint8_t i = 0; i < n; ++i) {
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	3301      	adds	r3, #1
 80014de:	75fb      	strb	r3, [r7, #23]
 80014e0:	7dfa      	ldrb	r2, [r7, #23]
 80014e2:	7dbb      	ldrb	r3, [r7, #22]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3e0      	bcc.n	80014aa <push_avg+0x82>
    }
    *emf_avg = e_sum / n;
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80014f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a00 	vstr	s15, [r3]
    *temp_avg = t_sum / n;
 8001500:	7dbb      	ldrb	r3, [r7, #22]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150a:	edd7 6a06 	vldr	s13, [r7, #24]
 800150e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	edc3 7a00 	vstr	s15, [r3]
}
 8001518:	bf00      	nop
 800151a:	3724      	adds	r7, #36	@ 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	2000029c 	.word	0x2000029c
 8001528:	2000024c 	.word	0x2000024c
 800152c:	20000274 	.word	0x20000274
 8001530:	66666667 	.word	0x66666667
 8001534:	2000029d 	.word	0x2000029d

08001538 <calc_ppm>:
float calc_ppm(float emf_avg, float temp_avg) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001542:	edc7 0a00 	vstr	s1, [r7]
    float cal = CAL_A - (emf_avg + DEDT * (THER_INIT - temp_avg));
 8001546:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800154a:	edd7 7a00 	vldr	s15, [r7]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001594 <calc_ppm+0x5c>
 8001556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800155a:	edd7 7a01 	vldr	s15, [r7, #4]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8001566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156a:	edc7 7a03 	vstr	s15, [r7, #12]
    return powf(10.0f, cal / CAL_B);
 800156e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001572:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001598 <calc_ppm+0x60>
 8001576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800157a:	eef0 0a47 	vmov.f32	s1, s14
 800157e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001582:	f004 feeb 	bl	800635c <powf>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
}
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	3ba3d70a 	.word	0x3ba3d70a
 8001598:	3c75c28f 	.word	0x3c75c28f

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015a0:	b0b0      	sub	sp, #192	@ 0xc0
 80015a2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 fe62 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f978 	bl	800189c <SystemClock_Config>



  /* USER CODE BEGIN 2 */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff fcea 	bl	8000f84 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015b0:	f000 fd52 	bl	8002058 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80015b4:	f7ff fd54 	bl	8001060 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015b8:	f000 fd78 	bl	80020ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015bc:	f000 fcac 	bl	8001f18 <MX_TIM2_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015c0:	2100      	movs	r1, #0
 80015c2:	48a0      	ldr	r0, [pc, #640]	@ (8001844 <main+0x2a8>)
 80015c4:	f003 f852 	bl	800466c <HAL_TIM_IC_Start_IT>

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; /*디지털 온도 센서*/
 80015c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001848 <main+0x2ac>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a9e      	ldr	r2, [pc, #632]	@ (8001848 <main+0x2ac>)
 80015ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015d2:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015d4:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <main+0x2b0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <main+0x2b0>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

  char buf[100];
  // PA5 LED 수동 초기화
   printf("USART1 State: %d\r\n", huart1.gState);
 80015e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001850 <main+0x2b4>)
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	489a      	ldr	r0, [pc, #616]	@ (8001854 <main+0x2b8>)
 80015ec:	f007 f840 	bl	8008670 <iprintf>
       __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4b98      	ldr	r3, [pc, #608]	@ (8001858 <main+0x2bc>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	4a97      	ldr	r2, [pc, #604]	@ (8001858 <main+0x2bc>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001600:	4b95      	ldr	r3, [pc, #596]	@ (8001858 <main+0x2bc>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
       GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
       GPIO_InitStruct.Pin = GPIO_PIN_6;
 800161c:	2340      	movs	r3, #64	@ 0x40
 800161e:	613b      	str	r3, [r7, #16]
       GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	488a      	ldr	r0, [pc, #552]	@ (800185c <main+0x2c0>)
 8001634:	f001 f854 	bl	80026e0 <HAL_GPIO_Init>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	4887      	ldr	r0, [pc, #540]	@ (800185c <main+0x2c0>)
 800163e:	f001 f9eb 	bl	8002a18 <HAL_GPIO_WritePin>

       // UART 인터럽트 수신 시작
       HAL_StatusTypeDef result = HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	4986      	ldr	r1, [pc, #536]	@ (8001860 <main+0x2c4>)
 8001646:	4882      	ldr	r0, [pc, #520]	@ (8001850 <main+0x2b4>)
 8001648:	f003 fe49 	bl	80052de <HAL_UART_Receive_IT>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
       if (result != HAL_OK) {
 8001652:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <main+0xcc>
           printf("❌ Receive_IT 등록 실패! result = %d\r\n", result);  // 1 = BUSY, 2 = ERROR
 800165a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800165e:	4619      	mov	r1, r3
 8001660:	4880      	ldr	r0, [pc, #512]	@ (8001864 <main+0x2c8>)
 8001662:	f007 f805 	bl	8008670 <iprintf>
 8001666:	e002      	b.n	800166e <main+0xd2>
       } else {
           printf("✅ Receive_IT 등록 성공!\r\n");
 8001668:	487f      	ldr	r0, [pc, #508]	@ (8001868 <main+0x2cc>)
 800166a:	f007 f869 	bl	8008740 <puts>
       }

       // NVIC 설정 (중요!)
       HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2025      	movs	r0, #37	@ 0x25
 8001674:	f000 ff6b 	bl	800254e <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001678:	2025      	movs	r0, #37	@ 0x25
 800167a:	f000 ff84 	bl	8002586 <HAL_NVIC_EnableIRQ>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	@ 0x40
 8001682:	4876      	ldr	r0, [pc, #472]	@ (800185c <main+0x2c0>)
 8001684:	f001 f9c8 	bl	8002a18 <HAL_GPIO_WritePin>
       HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168c:	f000 fe60 	bl	8002350 <HAL_Delay>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	@ 0x40
 8001694:	4871      	ldr	r0, [pc, #452]	@ (800185c <main+0x2c0>)
 8001696:	f001 f9bf 	bl	8002a18 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, PCF8591_ADDR, 3, 100) != HAL_OK) {
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2203      	movs	r2, #3
 800169e:	2190      	movs	r1, #144	@ 0x90
 80016a0:	4872      	ldr	r0, [pc, #456]	@ (800186c <main+0x2d0>)
 80016a2:	f001 fe47 	bl	8003334 <HAL_I2C_IsDeviceReady>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <main+0x128>
			  HAL_UART_Transmit(&huart2, (uint8_t *)"I2C FAIL\r\n", 10, HAL_MAX_DELAY);
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	220a      	movs	r2, #10
 80016b2:	496f      	ldr	r1, [pc, #444]	@ (8001870 <main+0x2d4>)
 80016b4:	486f      	ldr	r0, [pc, #444]	@ (8001874 <main+0x2d8>)
 80016b6:	f003 fd87 	bl	80051c8 <HAL_UART_Transmit>
			  HAL_Delay(500);
 80016ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016be:	f000 fe47 	bl	8002350 <HAL_Delay>
 80016c2:	e7ea      	b.n	800169a <main+0xfe>
			  continue;
	 	  }
	  // --- I2C CO₂, 온도 ---
	  float co2_pwm = 0;
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	  if (high_time > 0 && period > 4000) {
 80016cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001878 <main+0x2dc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d023      	beq.n	800171c <main+0x180>
 80016d4:	4b69      	ldr	r3, [pc, #420]	@ (800187c <main+0x2e0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80016dc:	d91e      	bls.n	800171c <main+0x180>
	              co2_pwm = 2000.0f * ((float)high_time - 2000.0f) / ((float)period - 4000.0f);
 80016de:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <main+0x2dc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ea:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001880 <main+0x2e4>
 80016ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f2:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001880 <main+0x2e4>
 80016f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016fa:	4b60      	ldr	r3, [pc, #384]	@ (800187c <main+0x2e0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001884 <main+0x2e8>
 800170a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	              high_time = 0;
 8001716:	4b58      	ldr	r3, [pc, #352]	@ (8001878 <main+0x2dc>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
	          }

	          uint8_t ther_raw = PCF8591_ReadChannel(&hi2c1, 1);
 800171c:	2101      	movs	r1, #1
 800171e:	4853      	ldr	r0, [pc, #332]	@ (800186c <main+0x2d0>)
 8001720:	f7ff fd14 	bl	800114c <PCF8591_ReadChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	          uint8_t emf_raw = PCF8591_ReadChannel(&hi2c1, 2);
 800172a:	2102      	movs	r1, #2
 800172c:	484f      	ldr	r0, [pc, #316]	@ (800186c <main+0x2d0>)
 800172e:	f7ff fd0d 	bl	800114c <PCF8591_ReadChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

	          float emf_mv = emf_mv_to_emf(adc8_to_mv(emf_raw));
 8001738:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd9d 	bl	800127c <adc8_to_mv>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	eeb0 0a67 	vmov.f32	s0, s15
 800174a:	f7ff fdb5 	bl	80012b8 <emf_mv_to_emf>
 800174e:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
	          float temp_c = ntc_calc_celsius(ther_raw);
 8001752:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fdc2 	bl	80012e0 <ntc_calc_celsius>
 800175c:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
	          float emf_avg, temp_avg;
	          push_avg(emf_mv, temp_c, &emf_avg, &temp_avg);
 8001760:	1d3a      	adds	r2, r7, #4
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	edd7 0a25 	vldr	s1, [r7, #148]	@ 0x94
 800176e:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 8001772:	f7ff fe59 	bl	8001428 <push_avg>
	          float co2_analog = calc_ppm(emf_avg, temp_avg);
 8001776:	edd7 7a02 	vldr	s15, [r7, #8]
 800177a:	ed97 7a01 	vldr	s14, [r7, #4]
 800177e:	eef0 0a47 	vmov.f32	s1, s14
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f7ff fed7 	bl	8001538 <calc_ppm>
 800178a:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
	          float temp_dht = DHT11_ReadTemp();
 800178e:	f000 fa37 	bl	8001c00 <DHT11_ReadTemp>
 8001792:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c

	          float moist_percent = (750 - emf_avg) * 100 / 350;
 8001796:	edd7 7a02 	vldr	s15, [r7, #8]
 800179a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001888 <main+0x2ec>
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800188c <main+0x2f0>
 80017a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017aa:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001890 <main+0x2f4>
 80017ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	          if (moist_percent > 100) moist_percent = 100;
 80017b6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80017ba:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800188c <main+0x2f0>
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	dd02      	ble.n	80017ce <main+0x232>
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <main+0x2f8>)
 80017ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	          if (moist_percent < 0)   moist_percent = 0;
 80017ce:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80017d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d503      	bpl.n	80017e4 <main+0x248>
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	          int len = snprintf(buf, sizeof(buf), "%.0f|%.1f|%.1f\r\n", co2_pwm, moist_percent, temp_dht);
 80017e4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80017e8:	f7fe feb6 	bl	8000558 <__aeabi_f2d>
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80017f4:	f7fe feb0 	bl	8000558 <__aeabi_f2d>
 80017f8:	4680      	mov	r8, r0
 80017fa:	4689      	mov	r9, r1
 80017fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001800:	f7fe feaa 	bl	8000558 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800180c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001810:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001814:	e9cd 4500 	strd	r4, r5, [sp]
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <main+0x2fc>)
 800181a:	2164      	movs	r1, #100	@ 0x64
 800181c:	f006 ff98 	bl	8008750 <sniprintf>
 8001820:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	          HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8001824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <main+0x2b4>)
 8001834:	f003 fcc8 	bl	80051c8 <HAL_UART_Transmit>
	          HAL_Delay(1000);
 8001838:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183c:	f000 fd88 	bl	8002350 <HAL_Delay>
  {
 8001840:	e72b      	b.n	800169a <main+0xfe>
 8001842:	bf00      	nop
 8001844:	200002b8 	.word	0x200002b8
 8001848:	e000edf0 	.word	0xe000edf0
 800184c:	e0001000 	.word	0xe0001000
 8001850:	20000300 	.word	0x20000300
 8001854:	0800aa38 	.word	0x0800aa38
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000
 8001860:	20000248 	.word	0x20000248
 8001864:	0800aa4c 	.word	0x0800aa4c
 8001868:	0800aa78 	.word	0x0800aa78
 800186c:	200001f4 	.word	0x200001f4
 8001870:	0800aa98 	.word	0x0800aa98
 8001874:	20000348 	.word	0x20000348
 8001878:	200002ac 	.word	0x200002ac
 800187c:	20000000 	.word	0x20000000
 8001880:	44fa0000 	.word	0x44fa0000
 8001884:	457a0000 	.word	0x457a0000
 8001888:	443b8000 	.word	0x443b8000
 800188c:	42c80000 	.word	0x42c80000
 8001890:	43af0000 	.word	0x43af0000
 8001894:	42c80000 	.word	0x42c80000
 8001898:	0800aaa4 	.word	0x0800aaa4

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	@ 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	@ 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 f85e 	bl	800896c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <SystemClock_Config+0xd0>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	4a28      	ldr	r2, [pc, #160]	@ (800196c <SystemClock_Config+0xd0>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <SystemClock_Config+0xd0>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <SystemClock_Config+0xd4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018e8:	4a21      	ldr	r2, [pc, #132]	@ (8001970 <SystemClock_Config+0xd4>)
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <SystemClock_Config+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001910:	2310      	movs	r3, #16
 8001912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001914:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001918:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800191a:	2304      	movs	r3, #4
 800191c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800191e:	2307      	movs	r3, #7
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f9b8 	bl	8003c9c <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001932:	f000 f999 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fc1a 	bl	800418c <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800195e:	f000 f983 	bl	8001c68 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	@ 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7f1b      	ldrb	r3, [r3, #28]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d169      	bne.n	8001a58 <HAL_TIM_IC_CaptureCallback+0xe4>
  {
    if (edge_flag == 0) // rising edge
 8001984:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d11a      	bne.n	80019c4 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      ic_rising = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800198e:	2100      	movs	r1, #0
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f003 f911 	bl	8004bb8 <HAL_TIM_ReadCapturedValue>
 8001996:	4603      	mov	r3, r0
 8001998:	4a32      	ldr	r2, [pc, #200]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800199a:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020a 	bic.w	r2, r2, #10
 80019aa:	621a      	str	r2, [r3, #32]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0202 	orr.w	r2, r2, #2
 80019ba:	621a      	str	r2, [r3, #32]
      edge_flag = 1;
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_TIM_IC_CaptureCallback+0xec>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
      last_rising = ic_rising;
      //printf("rise: %lu, fall: %lu, high_time: %lu, period: %lu\r\n", ic_rising, ic_falling, high_time, period);

    }
  }
}
 80019c2:	e049      	b.n	8001a58 <HAL_TIM_IC_CaptureCallback+0xe4>
      ic_falling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f003 f8f6 	bl	8004bb8 <HAL_TIM_ReadCapturedValue>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019d0:	6013      	str	r3, [r2, #0]
      high_time = (ic_falling >= ic_rising) ? (ic_falling - ic_rising) : ((htim->Instance->ARR - ic_rising) + ic_falling);
 80019d2:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d305      	bcc.n	80019ea <HAL_TIM_IC_CaptureCallback+0x76>
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	e008      	b.n	80019fc <HAL_TIM_IC_CaptureCallback+0x88>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1ad2      	subs	r2, r2, r3
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80019fe:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a1a      	ldr	r2, [r3, #32]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020a 	bic.w	r2, r2, #10
 8001a0e:	621a      	str	r2, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a12      	ldr	r2, [r2, #32]
 8001a1a:	621a      	str	r2, [r3, #32]
      edge_flag = 0;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
      period = (ic_rising >= last_rising) ? (ic_rising - last_rising) : ((htim->Instance->ARR - last_rising) + ic_rising);
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d305      	bcc.n	8001a3a <HAL_TIM_IC_CaptureCallback+0xc6>
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	e008      	b.n	8001a4c <HAL_TIM_IC_CaptureCallback+0xd8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1ad2      	subs	r2, r2, r3
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001a4e:	6013      	str	r3, [r2, #0]
      last_rising = ic_rising;
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002a8 	.word	0x200002a8
 8001a64:	200002a0 	.word	0x200002a0
 8001a68:	200002a4 	.word	0x200002a4
 8001a6c:	200002ac 	.word	0x200002ac
 8001a70:	200002b0 	.word	0x200002b0
 8001a74:	20000000 	.word	0x20000000

08001a78 <__io_putchar>:

int __io_putchar(int ch) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a80:	1d39      	adds	r1, r7, #4
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	2201      	movs	r2, #1
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <__io_putchar+0x20>)
 8001a8a:	f003 fb9d 	bl	80051c8 <HAL_UART_Transmit>
    return ch;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000300 	.word	0x20000300

08001a9c <delay_us>:

/*디지털 온도센서*/
void delay_us(uint16_t us) {
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
    uint32_t start = DWT->CYCCNT;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <delay_us+0x40>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 8001aac:	88fc      	ldrh	r4, [r7, #6]
 8001aae:	f002 fd59 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <delay_us+0x44>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	fb04 f303 	mul.w	r3, r4, r3
 8001ac0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8001ac2:	bf00      	nop
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <delay_us+0x40>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d8f8      	bhi.n	8001ac4 <delay_us+0x28>
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	e0001000 	.word	0xe0001000
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <DHT11_Start>:

void DHT11_Start(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

    // Output
    GPIO_InitStruct.Pin = DHT11_PIN;
 8001af8:	2302      	movs	r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	480e      	ldr	r0, [pc, #56]	@ (8001b44 <DHT11_Start+0x60>)
 8001b0a:	f000 fde9 	bl	80026e0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <DHT11_Start+0x60>)
 8001b14:	f000 ff80 	bl	8002a18 <HAL_GPIO_WritePin>
    HAL_Delay(20);  // at least 18ms
 8001b18:	2014      	movs	r0, #20
 8001b1a:	f000 fc19 	bl	8002350 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2102      	movs	r1, #2
 8001b22:	4808      	ldr	r0, [pc, #32]	@ (8001b44 <DHT11_Start+0x60>)
 8001b24:	f000 ff78 	bl	8002a18 <HAL_GPIO_WritePin>
    delay_us(30);   // 20~40us
 8001b28:	201e      	movs	r0, #30
 8001b2a:	f7ff ffb7 	bl	8001a9c <delay_us>

    // Input
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <DHT11_Start+0x60>)
 8001b38:	f000 fdd2 	bl	80026e0 <HAL_GPIO_Init>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40020000 	.word	0x40020000

08001b48 <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    delay_us(40);
 8001b4c:	2028      	movs	r0, #40	@ 0x28
 8001b4e:	f7ff ffa5 	bl	8001a9c <delay_us>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8001b52:	2102      	movs	r1, #2
 8001b54:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <DHT11_CheckResponse+0x3c>)
 8001b56:	f000 ff47 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10e      	bne.n	8001b7e <DHT11_CheckResponse+0x36>
        delay_us(80);
 8001b60:	2050      	movs	r0, #80	@ 0x50
 8001b62:	f7ff ff9b 	bl	8001a9c <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8001b66:	2102      	movs	r1, #2
 8001b68:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <DHT11_CheckResponse+0x3c>)
 8001b6a:	f000 ff3d 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <DHT11_CheckResponse+0x36>
            delay_us(80);
 8001b74:	2050      	movs	r0, #80	@ 0x50
 8001b76:	f7ff ff91 	bl	8001a9c <delay_us>
            return 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <DHT11_CheckResponse+0x38>
        }
    }
    return 0;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020000 	.word	0x40020000

08001b88 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	e028      	b.n	8001bea <DHT11_ReadByte+0x62>
        while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // LOW wait
 8001b98:	bf00      	nop
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4817      	ldr	r0, [pc, #92]	@ (8001bfc <DHT11_ReadByte+0x74>)
 8001b9e:	f000 ff23 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f8      	beq.n	8001b9a <DHT11_ReadByte+0x12>
        delay_us(40);
 8001ba8:	2028      	movs	r0, #40	@ 0x28
 8001baa:	f7ff ff77 	bl	8001a9c <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4812      	ldr	r0, [pc, #72]	@ (8001bfc <DHT11_ReadByte+0x74>)
 8001bb2:	f000 ff19 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <DHT11_ReadByte+0x4c>
            value |= (1 << (7 - i));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	b25a      	sxtb	r2, r3
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	71fb      	strb	r3, [r7, #7]
        while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));  // HIGH wait
 8001bd4:	bf00      	nop
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <DHT11_ReadByte+0x74>)
 8001bda:	f000 ff05 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f8      	bne.n	8001bd6 <DHT11_ReadByte+0x4e>
    for (int i = 0; i < 8; i++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	ddd3      	ble.n	8001b98 <DHT11_ReadByte+0x10>
    }
    return value;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40020000 	.word	0x40020000

08001c00 <DHT11_ReadTemp>:

float DHT11_ReadTemp(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
    DHT11_Start();
 8001c06:	f7ff ff6d 	bl	8001ae4 <DHT11_Start>
    if (DHT11_CheckResponse()) {
 8001c0a:	f7ff ff9d 	bl	8001b48 <DHT11_CheckResponse>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01e      	beq.n	8001c52 <DHT11_ReadTemp+0x52>
        DHT11_ReadByte(); // 습도 정수
 8001c14:	f7ff ffb8 	bl	8001b88 <DHT11_ReadByte>
        DHT11_ReadByte(); // 습도 소수
 8001c18:	f7ff ffb6 	bl	8001b88 <DHT11_ReadByte>
        uint8_t temp_int = DHT11_ReadByte();
 8001c1c:	f7ff ffb4 	bl	8001b88 <DHT11_ReadByte>
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
        uint8_t temp_dec = DHT11_ReadByte();  // ← 여기서 소수점 읽기
 8001c24:	f7ff ffb0 	bl	8001b88 <DHT11_ReadByte>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71bb      	strb	r3, [r7, #6]
        DHT11_ReadByte(); // checksum
 8001c2c:	f7ff ffac 	bl	8001b88 <DHT11_ReadByte>
        return (float)temp_int + (float)temp_dec * 0.1f;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c44:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001c60 <DHT11_ReadTemp+0x60>
 8001c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	e001      	b.n	8001c56 <DHT11_ReadTemp+0x56>
    }
    return -100.0f;
 8001c52:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8001c64 <DHT11_ReadTemp+0x64>
}
 8001c56:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	3dcccccd 	.word	0x3dcccccd
 8001c64:	c2c80000 	.word	0xc2c80000

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <Error_Handler+0x8>

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 faf9 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <TIM2_IRQHandler+0x10>)
 8001d2a:	f002 fdb9 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002b8 	.word	0x200002b8

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4803      	ldr	r0, [pc, #12]	@ (8001d4c <USART1_IRQHandler+0x14>)
 8001d3e:	f003 faf3 	bl	8005328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  printf("💥 USART1_IRQHandler 들어옴!\n");
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <USART1_IRQHandler+0x18>)
 8001d44:	f006 fcfc 	bl	8008740 <puts>
  /* USER CODE END USART1_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000300 	.word	0x20000300
 8001d50:	0800aab8 	.word	0x0800aab8

08001d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <USART2_IRQHandler+0x10>)
 8001d5a:	f003 fae5 	bl	8005328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000348 	.word	0x20000348

08001d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_kill>:

int _kill(int pid, int sig)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d82:	f006 fe45 	bl	8008a10 <__errno>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2216      	movs	r2, #22
 8001d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_exit>:

void _exit (int status)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ffe7 	bl	8001d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001daa:	bf00      	nop
 8001dac:	e7fd      	b.n	8001daa <_exit+0x12>

08001dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e00a      	b.n	8001dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc0:	f3af 8000 	nop.w
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbf0      	blt.n	8001dc0 <_read+0x12>
  }

  return len;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e009      	b.n	8001e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60ba      	str	r2, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe38 	bl	8001a78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dbf1      	blt.n	8001dfa <_write+0x12>
  }
  return len;
 8001e16:	687b      	ldr	r3, [r7, #4]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_close>:

int _close(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e48:	605a      	str	r2, [r3, #4]
  return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_isatty>:

int _isatty(int file)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f006 fdaa 	bl	8008a10 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20018000 	.word	0x20018000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	200002b4 	.word	0x200002b4
 8001ef0:	200004e0 	.word	0x200004e0

08001ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f28:	463b      	mov	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f3e:	2253      	movs	r2, #83	@ 0x53
 8001f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f5c:	4816      	ldr	r0, [pc, #88]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f5e:	f002 fb35 	bl	80045cc <HAL_TIM_IC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f68:	f7ff fe7e 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001f7c:	f003 f852 	bl	8005024 <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f86:	f7ff fe6f 	bl	8001c68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <MX_TIM2_Init+0xa0>)
 8001fa2:	f002 fd6d 	bl	8004a80 <HAL_TIM_IC_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001fac:	f7ff fe5c 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200002b8 	.word	0x200002b8

08001fbc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d133      	bne.n	8002046 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a13      	ldr	r2, [pc, #76]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_TIM_IC_MspInit+0x94>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4808      	ldr	r0, [pc, #32]	@ (8002054 <HAL_TIM_IC_MspInit+0x98>)
 8002032:	f000 fb55 	bl	80026e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	201c      	movs	r0, #28
 800203c:	f000 fa87 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002040:	201c      	movs	r0, #28
 8002042:	f000 faa0 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 800205e:	4a12      	ldr	r2, [pc, #72]	@ (80020a8 <MX_USART1_UART_Init+0x50>)
 8002060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_USART1_UART_Init+0x4c>)
 8002090:	f003 f84a 	bl	8005128 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800209a:	f7ff fde5 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000300 	.word	0x20000300
 80020a8:	40011000 	.word	0x40011000

080020ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <MX_USART2_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020e4:	f003 f820 	bl	8005128 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f7ff fdbb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000348 	.word	0x20000348
 80020fc:	40004400 	.word	0x40004400

08002100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3a      	ldr	r2, [pc, #232]	@ (8002208 <HAL_UART_MspInit+0x108>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d135      	bne.n	800218e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4b39      	ldr	r3, [pc, #228]	@ (800220c <HAL_UART_MspInit+0x10c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a38      	ldr	r2, [pc, #224]	@ (800220c <HAL_UART_MspInit+0x10c>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_UART_MspInit+0x10c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_UART_MspInit+0x10c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a31      	ldr	r2, [pc, #196]	@ (800220c <HAL_UART_MspInit+0x10c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <HAL_UART_MspInit+0x10c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4826      	ldr	r0, [pc, #152]	@ (8002210 <HAL_UART_MspInit+0x110>)
 8002178:	f000 fab2 	bl	80026e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2025      	movs	r0, #37	@ 0x25
 8002182:	f000 f9e4 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002186:	2025      	movs	r0, #37	@ 0x25
 8002188:	f000 f9fd 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800218c:	e038      	b.n	8002200 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_UART_MspInit+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d133      	bne.n	8002200 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_UART_MspInit+0x10c>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_UART_MspInit+0x10c>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_UART_MspInit+0x10c>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_UART_MspInit+0x10c>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021bc:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_UART_MspInit+0x10c>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_UART_MspInit+0x10c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021d0:	230c      	movs	r3, #12
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e0:	2307      	movs	r3, #7
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4809      	ldr	r0, [pc, #36]	@ (8002210 <HAL_UART_MspInit+0x110>)
 80021ec:	f000 fa78 	bl	80026e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2026      	movs	r0, #38	@ 0x26
 80021f6:	f000 f9aa 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021fa:	2026      	movs	r0, #38	@ 0x26
 80021fc:	f000 f9c3 	bl	8002586 <HAL_NVIC_EnableIRQ>
}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	@ 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40011000 	.word	0x40011000
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000
 8002214:	40004400 	.word	0x40004400

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002250 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800221c:	f7ff fe6a 	bl	8001ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002222:	490d      	ldr	r1, [pc, #52]	@ (8002258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002238:	4c0a      	ldr	r4, [pc, #40]	@ (8002264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002246:	f006 fbe9 	bl	8008a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7ff f9a7 	bl	800159c <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002250:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800225c:	0800aed4 	.word	0x0800aed4
  ldr r2, =_sbss
 8002260:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002264:	200004e0 	.word	0x200004e0

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f94f 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	2000      	movs	r0, #0
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fce8 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f967 	bl	80025a2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f92f 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	@ (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000004 	.word	0x20000004
 8002308:	2000000c 	.word	0x2000000c
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000390 	.word	0x20000390

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000390 	.word	0x20000390

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	@ (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	@ 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff feb6 	bl	8002338 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d008      	beq.n	80025ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e052      	b.n	8002692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0216 	bic.w	r2, r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800260a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <HAL_DMA_Abort+0x62>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0208 	bic.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263c:	e013      	b.n	8002666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263e:	f7ff fe7b 	bl	8002338 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b05      	cmp	r3, #5
 800264a:	d90c      	bls.n	8002666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e015      	b.n	8002692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e4      	bne.n	800263e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	223f      	movs	r2, #63	@ 0x3f
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e00c      	b.n	80026d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2205      	movs	r2, #5
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e159      	b.n	80029b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8148 	bne.w	80029aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	2b02      	cmp	r3, #2
 8002730:	d130      	bne.n	8002794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 0201 	and.w	r2, r3, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d017      	beq.n	80027d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d123      	bne.n	8002824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	08da      	lsrs	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3208      	adds	r2, #8
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a2 	beq.w	80029aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b57      	ldr	r3, [pc, #348]	@ (80029c8 <HAL_GPIO_Init+0x2e8>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a56      	ldr	r2, [pc, #344]	@ (80029c8 <HAL_GPIO_Init+0x2e8>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	4b54      	ldr	r3, [pc, #336]	@ (80029c8 <HAL_GPIO_Init+0x2e8>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_GPIO_Init+0x2ec>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a49      	ldr	r2, [pc, #292]	@ (80029d0 <HAL_GPIO_Init+0x2f0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d019      	beq.n	80028e2 <HAL_GPIO_Init+0x202>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a48      	ldr	r2, [pc, #288]	@ (80029d4 <HAL_GPIO_Init+0x2f4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x1fe>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a47      	ldr	r2, [pc, #284]	@ (80029d8 <HAL_GPIO_Init+0x2f8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_GPIO_Init+0x1fa>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a46      	ldr	r2, [pc, #280]	@ (80029dc <HAL_GPIO_Init+0x2fc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_GPIO_Init+0x1f6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a45      	ldr	r2, [pc, #276]	@ (80029e0 <HAL_GPIO_Init+0x300>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_GPIO_Init+0x1f2>
 80028ce:	2304      	movs	r3, #4
 80028d0:	e008      	b.n	80028e4 <HAL_GPIO_Init+0x204>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x204>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e004      	b.n	80028e4 <HAL_GPIO_Init+0x204>
 80028da:	2302      	movs	r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x204>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_GPIO_Init+0x204>
 80028e2:	2300      	movs	r3, #0
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f002 0203 	and.w	r2, r2, #3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4093      	lsls	r3, r2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f4:	4935      	ldr	r1, [pc, #212]	@ (80029cc <HAL_GPIO_Init+0x2ec>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a24      	ldr	r2, [pc, #144]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002956:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297a:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a4:	4a0f      	ldr	r2, [pc, #60]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	f67f aea2 	bls.w	80026fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40013c00 	.word	0x40013c00

080029e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e001      	b.n	8002a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a34:	e003      	b.n	8002a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	041a      	lsls	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e12b      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fb22 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	@ 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f001 fd64 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a81      	ldr	r2, [pc, #516]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d807      	bhi.n	8002ad0 <HAL_I2C_Init+0x84>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a80      	ldr	r2, [pc, #512]	@ (8002cc4 <HAL_I2C_Init+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e006      	b.n	8002ade <HAL_I2C_Init+0x92>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cc8 <HAL_I2C_Init+0x27c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0e7      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a78      	ldr	r2, [pc, #480]	@ (8002ccc <HAL_I2C_Init+0x280>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0c9b      	lsrs	r3, r3, #18
 8002af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a6a      	ldr	r2, [pc, #424]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d802      	bhi.n	8002b20 <HAL_I2C_Init+0xd4>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	e009      	b.n	8002b34 <HAL_I2C_Init+0xe8>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	4a69      	ldr	r2, [pc, #420]	@ (8002cd0 <HAL_I2C_Init+0x284>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	495c      	ldr	r1, [pc, #368]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d819      	bhi.n	8002b88 <HAL_I2C_Init+0x13c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e59      	subs	r1, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b68:	400b      	ands	r3, r1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_I2C_Init+0x138>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	e051      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e04f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <HAL_I2C_Init+0x168>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_I2C_Init+0x18e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x196>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <HAL_I2C_Init+0x1bc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e58      	subs	r0, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6809      	ldr	r1, [r1, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6911      	ldr	r1, [r2, #16]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff fb26 	bl	8002338 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	f040 80e0 	bne.w	8002ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2319      	movs	r3, #25
 8002d02:	2201      	movs	r2, #1
 8002d04:	4970      	ldr	r1, [pc, #448]	@ (8002ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fd92 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0d3      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x50>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0cc      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d007      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2221      	movs	r2, #33	@ 0x21
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2210      	movs	r2, #16
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	893a      	ldrh	r2, [r7, #8]
 8002d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a50      	ldr	r2, [pc, #320]	@ (8002ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8002d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fbfc 	bl	8003590 <I2C_MasterRequestWrite>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e08d      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002db8:	e066      	b.n	8002e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fe50 	bl	8003a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06b      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11b      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x188>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fe47 	bl	8003af4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e01a      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d194      	bne.n	8002dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	00100002 	.word	0x00100002
 8002ecc:	ffff0000 	.word	0xffff0000

08002ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	817b      	strh	r3, [r7, #10]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff fa28 	bl	8002338 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	f040 8217 	bne.w	8003326 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	497c      	ldr	r1, [pc, #496]	@ (80030f4 <HAL_I2C_Master_Receive+0x224>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fc94 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e20a      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2C_Master_Receive+0x50>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e203      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d007      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2222      	movs	r2, #34	@ 0x22
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2210      	movs	r2, #16
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	893a      	ldrh	r2, [r7, #8]
 8002f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a5c      	ldr	r2, [pc, #368]	@ (80030f8 <HAL_I2C_Master_Receive+0x228>)
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fb80 	bl	8003694 <I2C_MasterRequestRead>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1c4      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	623b      	str	r3, [r7, #32]
 8002fba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e198      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d11b      	bne.n	800300e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e178      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003012:	2b02      	cmp	r3, #2
 8003014:	d11b      	bne.n	800304e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003024:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	e158      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800305c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003074:	e144      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	2b03      	cmp	r3, #3
 800307c:	f200 80f1 	bhi.w	8003262 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	2b01      	cmp	r3, #1
 8003086:	d123      	bne.n	80030d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fd79 	bl	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e145      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030ce:	e117      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d14e      	bne.n	8003176 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	2200      	movs	r2, #0
 80030e0:	4906      	ldr	r1, [pc, #24]	@ (80030fc <HAL_I2C_Master_Receive+0x22c>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fba4 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e11a      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
 80030f2:	bf00      	nop
 80030f4:	00100002 	.word	0x00100002
 80030f8:	ffff0000 	.word	0xffff0000
 80030fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003174:	e0c4      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	496c      	ldr	r1, [pc, #432]	@ (8003330 <HAL_I2C_Master_Receive+0x460>)
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fb55 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cb      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	2200      	movs	r2, #0
 80031da:	4955      	ldr	r1, [pc, #340]	@ (8003330 <HAL_I2C_Master_Receive+0x460>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fb27 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e09d      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003260:	e04e      	b.n	8003300 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fc8c 	bl	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e058      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d124      	bne.n	8003300 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f aeb6 	bne.w	8003076 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3728      	adds	r7, #40	@ 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	00010004 	.word	0x00010004

08003334 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7fe fff8 	bl	8002338 <HAL_GetTick>
 8003348:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b20      	cmp	r3, #32
 8003358:	f040 8111 	bne.w	800357e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2319      	movs	r3, #25
 8003362:	2201      	movs	r2, #1
 8003364:	4988      	ldr	r1, [pc, #544]	@ (8003588 <HAL_I2C_IsDeviceReady+0x254>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa62 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e104      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2C_IsDeviceReady+0x50>
 8003380:	2302      	movs	r3, #2
 8003382:	e0fd      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d007      	beq.n	80033aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2224      	movs	r2, #36	@ 0x24
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a70      	ldr	r2, [pc, #448]	@ (800358c <HAL_I2C_IsDeviceReady+0x258>)
 80033cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa20 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003404:	d103      	bne.n	800340e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b6      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003420:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe ff89 	bl	8002338 <HAL_GetTick>
 8003426:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003456:	e025      	b.n	80034a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003458:	f7fe ff6e 	bl	8002338 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d302      	bcc.n	800346e <HAL_I2C_IsDeviceReady+0x13a>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	22a0      	movs	r2, #160	@ 0xa0
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ae:	d005      	beq.n	80034bc <HAL_I2C_IsDeviceReady+0x188>
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_I2C_IsDeviceReady+0x188>
 80034b6:	7dbb      	ldrb	r3, [r7, #22]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0cd      	beq.n	8003458 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d129      	bne.n	8003526 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	4921      	ldr	r1, [pc, #132]	@ (8003588 <HAL_I2C_IsDeviceReady+0x254>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f994 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e036      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e02c      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003534:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800353e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	490f      	ldr	r1, [pc, #60]	@ (8003588 <HAL_I2C_IsDeviceReady+0x254>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f970 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e012      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3301      	adds	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	f4ff af32 	bcc.w	80033ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	00100002 	.word	0x00100002
 800358c:	ffff0000 	.word	0xffff0000

08003590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d006      	beq.n	80035ba <I2C_MasterRequestWrite+0x2a>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d003      	beq.n	80035ba <I2C_MasterRequestWrite+0x2a>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b8:	d108      	bne.n	80035cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e00b      	b.n	80035e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	2b12      	cmp	r3, #18
 80035d2:	d107      	bne.n	80035e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f91d 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360a:	d103      	bne.n	8003614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e035      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003620:	d108      	bne.n	8003634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003630:	611a      	str	r2, [r3, #16]
 8003632:	e01b      	b.n	800366c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003634:	897b      	ldrh	r3, [r7, #10]
 8003636:	11db      	asrs	r3, r3, #7
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0306 	and.w	r3, r3, #6
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f063 030f 	orn	r3, r3, #15
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	490e      	ldr	r1, [pc, #56]	@ (800368c <I2C_MasterRequestWrite+0xfc>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f966 	bl	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e010      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4907      	ldr	r1, [pc, #28]	@ (8003690 <I2C_MasterRequestWrite+0x100>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f956 	bl	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	00010008 	.word	0x00010008
 8003690:	00010002 	.word	0x00010002

08003694 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	460b      	mov	r3, r1
 80036a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d006      	beq.n	80036ce <I2C_MasterRequestRead+0x3a>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d003      	beq.n	80036ce <I2C_MasterRequestRead+0x3a>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036cc:	d108      	bne.n	80036e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e00b      	b.n	80036f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	2b11      	cmp	r3, #17
 80036e6:	d107      	bne.n	80036f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f893 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371e:	d103      	bne.n	8003728 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e079      	b.n	8003820 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003734:	d108      	bne.n	8003748 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	e05f      	b.n	8003808 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	11db      	asrs	r3, r3, #7
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f063 030f 	orn	r3, r3, #15
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4930      	ldr	r1, [pc, #192]	@ (8003828 <I2C_MasterRequestRead+0x194>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f8dc 	bl	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e054      	b.n	8003820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4929      	ldr	r1, [pc, #164]	@ (800382c <I2C_MasterRequestRead+0x198>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8cc 	bl	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e044      	b.n	8003820 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f831 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e2:	d103      	bne.n	80037ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e017      	b.n	8003820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037f0:	897b      	ldrh	r3, [r7, #10]
 80037f2:	11db      	asrs	r3, r3, #7
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0306 	and.w	r3, r3, #6
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f063 030e 	orn	r3, r3, #14
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4907      	ldr	r1, [pc, #28]	@ (800382c <I2C_MasterRequestRead+0x198>)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f888 	bl	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	00010008 	.word	0x00010008
 800382c:	00010002 	.word	0x00010002

08003830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003840:	e048      	b.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d044      	beq.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe fd75 	bl	8002338 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d139      	bne.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10d      	bne.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x56>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	e00c      	b.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d116      	bne.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e023      	b.n	800391c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	0c1b      	lsrs	r3, r3, #16
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10d      	bne.n	80038fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	e00c      	b.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	43da      	mvns	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	429a      	cmp	r2, r3
 8003918:	d093      	beq.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003932:	e071      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003942:	d123      	bne.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003952:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800395c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e067      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d041      	beq.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe fcd0 	bl	8002338 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d136      	bne.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10c      	bne.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e00b      	b.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e021      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10c      	bne.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e00b      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f af6d 	bne.w	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a70:	e034      	b.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f8e3 	bl	8003c3e <I2C_IsAcknowledgeFailed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e034      	b.n	8003aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d028      	beq.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe fc55 	bl	8002338 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11d      	bne.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b80      	cmp	r3, #128	@ 0x80
 8003aac:	d016      	beq.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e007      	b.n	8003aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d1c3      	bne.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b00:	e034      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f89b 	bl	8003c3e <I2C_IsAcknowledgeFailed>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e034      	b.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d028      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fe fc0d 	bl	8002338 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d016      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e007      	b.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d1c3      	bne.n	8003b02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b90:	e049      	b.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d119      	bne.n	8003bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e030      	b.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd4:	f7fe fbb0 	bl	8002338 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11d      	bne.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d016      	beq.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e007      	b.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d1ae      	bne.n	8003b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c54:	d11b      	bne.n	8003c8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f043 0204 	orr.w	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e267      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d075      	beq.n	8003da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cba:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d112      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b82      	ldr	r3, [pc, #520]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05b      	beq.n	8003da4 <HAL_RCC_OscConfig+0x108>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d157      	bne.n	8003da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e242      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_OscConfig+0x74>
 8003d02:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a75      	ldr	r2, [pc, #468]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e01d      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x98>
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b6d      	ldr	r3, [pc, #436]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d34:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a68      	ldr	r2, [pc, #416]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b66      	ldr	r3, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a65      	ldr	r2, [pc, #404]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe faf0 	bl	8002338 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe faec 	bl	8002338 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e207      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xc0>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fadc 	bl	8002338 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe fad8 	bl	8002338 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	@ 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e1f3      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	4b51      	ldr	r3, [pc, #324]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0xe8>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d063      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003db2:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d11c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e1c7      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4937      	ldr	r1, [pc, #220]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	e03a      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ee0 <HAL_RCC_OscConfig+0x244>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fe fa91 	bl	8002338 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fe fa8d 	bl	8002338 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1a8      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4925      	ldr	r1, [pc, #148]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	e015      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_RCC_OscConfig+0x244>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe fa70 	bl	8002338 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fa6c 	bl	8002338 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e187      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d036      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_RCC_OscConfig+0x248>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fe fa50 	bl	8002338 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fa4c 	bl	8002338 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e167      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x200>
 8003eba:	e01b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_RCC_OscConfig+0x248>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fa39 	bl	8002338 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	e00e      	b.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fe fa35 	bl	8002338 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d907      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e150      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	42470000 	.word	0x42470000
 8003ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	4b88      	ldr	r3, [pc, #544]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ea      	bne.n	8003eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8097 	beq.w	8004030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f06:	4b81      	ldr	r3, [pc, #516]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	4b7d      	ldr	r3, [pc, #500]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b7a      	ldr	r3, [pc, #488]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b77      	ldr	r3, [pc, #476]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d118      	bne.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3e:	4b74      	ldr	r3, [pc, #464]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a73      	ldr	r2, [pc, #460]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe f9f5 	bl	8002338 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7fe f9f1 	bl	8002338 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e10c      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	4b6a      	ldr	r3, [pc, #424]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d106      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2ea>
 8003f78:	4b64      	ldr	r3, [pc, #400]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	4a63      	ldr	r2, [pc, #396]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f84:	e01c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x324>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x30c>
 8003f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a5e      	ldr	r2, [pc, #376]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x324>
 8003fa8:	4b58      	ldr	r3, [pc, #352]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a57      	ldr	r2, [pc, #348]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb4:	4b55      	ldr	r3, [pc, #340]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	4a54      	ldr	r2, [pc, #336]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f9b6 	bl	8002338 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fe f9b2 	bl	8002338 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0cb      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	4b49      	ldr	r3, [pc, #292]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ee      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x334>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff4:	f7fe f9a0 	bl	8002338 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fe f99c 	bl	8002338 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0b5      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ee      	bne.n	8003ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004024:	4b39      	ldr	r3, [pc, #228]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	4a38      	ldr	r2, [pc, #224]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a1 	beq.w	800417c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800403a:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b08      	cmp	r3, #8
 8004044:	d05c      	beq.n	8004100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d141      	bne.n	80040d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe f970 	bl	8002338 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe f96c 	bl	8002338 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e087      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	019b      	lsls	r3, r3, #6
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	3b01      	subs	r3, #1
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	491b      	ldr	r1, [pc, #108]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe f945 	bl	8002338 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b2:	f7fe f941 	bl	8002338 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e05c      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c4:	4b11      	ldr	r3, [pc, #68]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x416>
 80040d0:	e054      	b.n	800417c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe f92e 	bl	8002338 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe f92a 	bl	8002338 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e045      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x444>
 80040fe:	e03d      	b.n	800417c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e038      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000
 8004114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x4ec>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d028      	beq.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d121      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d11a      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800414e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004150:	4293      	cmp	r3, r2
 8004152:	d111      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	3b01      	subs	r3, #1
 8004162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0cc      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b68      	ldr	r3, [pc, #416]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d90c      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b63      	ldr	r3, [pc, #396]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b8      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e0:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a58      	ldr	r2, [pc, #352]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f8:	4b53      	ldr	r3, [pc, #332]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a52      	ldr	r2, [pc, #328]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004204:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	494d      	ldr	r1, [pc, #308]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d119      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	2b03      	cmp	r3, #3
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b3f      	ldr	r3, [pc, #252]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e067      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4934      	ldr	r1, [pc, #208]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800427c:	f7fe f85c 	bl	8002338 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fe f858 	bl	8002338 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 020c 	and.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1eb      	bne.n	8004284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d20c      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e032      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4916      	ldr	r1, [pc, #88]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fe:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490e      	ldr	r1, [pc, #56]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004312:	f000 f821 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490a      	ldr	r1, [pc, #40]	@ (800434c <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd ffbc 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023c00 	.word	0x40023c00
 8004348:	40023800 	.word	0x40023800
 800434c:	0800aadc 	.word	0x0800aadc
 8004350:	20000004 	.word	0x20000004
 8004354:	20000008 	.word	0x20000008

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b094      	sub	sp, #80	@ 0x50
 800435e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d00d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x40>
 800437c:	2b08      	cmp	r3, #8
 800437e:	f200 80e1 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x3a>
 800438a:	e0db      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCC_GetSysClockFreq+0x204>)
 800438e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004390:	e0db      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b73      	ldr	r3, [pc, #460]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x208>)
 8004394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004396:	e0d8      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b6f      	ldr	r3, [pc, #444]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	2200      	movs	r2, #0
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4621      	mov	r1, r4
 80043e4:	1a51      	subs	r1, r2, r1
 80043e6:	6139      	str	r1, [r7, #16]
 80043e8:	4629      	mov	r1, r5
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	018b      	lsls	r3, r1, #6
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004406:	4651      	mov	r1, sl
 8004408:	018a      	lsls	r2, r1, #6
 800440a:	4651      	mov	r1, sl
 800440c:	ebb2 0801 	subs.w	r8, r2, r1
 8004410:	4659      	mov	r1, fp
 8004412:	eb63 0901 	sbc.w	r9, r3, r1
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442a:	4690      	mov	r8, r2
 800442c:	4699      	mov	r9, r3
 800442e:	4623      	mov	r3, r4
 8004430:	eb18 0303 	adds.w	r3, r8, r3
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	462b      	mov	r3, r5
 8004438:	eb49 0303 	adc.w	r3, r9, r3
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800444a:	4629      	mov	r1, r5
 800444c:	024b      	lsls	r3, r1, #9
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004454:	4621      	mov	r1, r4
 8004456:	024a      	lsls	r2, r1, #9
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004468:	f7fc fbf6 	bl	8000c58 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	e058      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004476:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	2200      	movs	r2, #0
 800447e:	4618      	mov	r0, r3
 8004480:	4611      	mov	r1, r2
 8004482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	2300      	movs	r3, #0
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
 800448c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a2:	0150      	lsls	r0, r2, #5
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4641      	mov	r1, r8
 80044aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c8:	ebb2 040a 	subs.w	r4, r2, sl
 80044cc:	eb63 050b 	sbc.w	r5, r3, fp
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	00eb      	lsls	r3, r5, #3
 80044da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044de:	00e2      	lsls	r2, r4, #3
 80044e0:	4614      	mov	r4, r2
 80044e2:	461d      	mov	r5, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	18e3      	adds	r3, r4, r3
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	464b      	mov	r3, r9
 80044ec:	eb45 0303 	adc.w	r3, r5, r3
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fe:	4629      	mov	r1, r5
 8004500:	028b      	lsls	r3, r1, #10
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004508:	4621      	mov	r1, r4
 800450a:	028a      	lsls	r2, r1, #10
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004512:	2200      	movs	r2, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	61fa      	str	r2, [r7, #28]
 8004518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451c:	f7fc fb9c 	bl	8000c58 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800453a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_RCC_GetSysClockFreq+0x204>)
 8004546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800454c:	4618      	mov	r0, r3
 800454e:	3750      	adds	r7, #80	@ 0x50
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400
 8004560:	007a1200 	.word	0x007a1200

08004564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <HAL_RCC_GetHCLKFreq+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004580:	f7ff fff0 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0a9b      	lsrs	r3, r3, #10
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	@ (80045a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	0800aaec 	.word	0x0800aaec

080045a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a8:	f7ff ffdc 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0b5b      	lsrs	r3, r3, #13
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	@ (80045c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	0800aaec 	.word	0x0800aaec

080045cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fd fce2 	bl	8001fbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fb40 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_TIM_IC_Start_IT+0x1e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e013      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0x46>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d104      	bne.n	800469a <HAL_TIM_IC_Start_IT+0x2e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0x46>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d104      	bne.n	80046aa <HAL_TIM_IC_Start_IT+0x3e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0x46>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_TIM_IC_Start_IT+0x58>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e013      	b.n	80046ec <HAL_TIM_IC_Start_IT+0x80>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d104      	bne.n	80046d4 <HAL_TIM_IC_Start_IT+0x68>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e00b      	b.n	80046ec <HAL_TIM_IC_Start_IT+0x80>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d104      	bne.n	80046e4 <HAL_TIM_IC_Start_IT+0x78>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e003      	b.n	80046ec <HAL_TIM_IC_Start_IT+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	7bbb      	ldrb	r3, [r7, #14]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d102      	bne.n	80046fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f4:	7b7b      	ldrb	r3, [r7, #13]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0c2      	b.n	8004884 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_TIM_IC_Start_IT+0xa2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800470c:	e013      	b.n	8004736 <HAL_TIM_IC_Start_IT+0xca>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d104      	bne.n	800471e <HAL_TIM_IC_Start_IT+0xb2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800471c:	e00b      	b.n	8004736 <HAL_TIM_IC_Start_IT+0xca>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d104      	bne.n	800472e <HAL_TIM_IC_Start_IT+0xc2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800472c:	e003      	b.n	8004736 <HAL_TIM_IC_Start_IT+0xca>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_TIM_IC_Start_IT+0xda>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004744:	e013      	b.n	800476e <HAL_TIM_IC_Start_IT+0x102>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d104      	bne.n	8004756 <HAL_TIM_IC_Start_IT+0xea>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004754:	e00b      	b.n	800476e <HAL_TIM_IC_Start_IT+0x102>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d104      	bne.n	8004766 <HAL_TIM_IC_Start_IT+0xfa>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	e003      	b.n	800476e <HAL_TIM_IC_Start_IT+0x102>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d841      	bhi.n	80047f8 <HAL_TIM_IC_Start_IT+0x18c>
 8004774:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <HAL_TIM_IC_Start_IT+0x110>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047f9 	.word	0x080047f9
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047d5 	.word	0x080047d5
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047e7 	.word	0x080047e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0202 	orr.w	r2, r2, #2
 80047be:	60da      	str	r2, [r3, #12]
      break;
 80047c0:	e01d      	b.n	80047fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0204 	orr.w	r2, r2, #4
 80047d0:	60da      	str	r2, [r3, #12]
      break;
 80047d2:	e014      	b.n	80047fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0208 	orr.w	r2, r2, #8
 80047e2:	60da      	str	r2, [r3, #12]
      break;
 80047e4:	e00b      	b.n	80047fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0210 	orr.w	r2, r2, #16
 80047f4:	60da      	str	r2, [r3, #12]
      break;
 80047f6:	e002      	b.n	80047fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      break;
 80047fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d13e      	bne.n	8004882 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fbe3 	bl	8004fd8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <HAL_TIM_IC_Start_IT+0x220>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x1e2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d013      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x1e2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_TIM_IC_Start_IT+0x224>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x1e2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_TIM_IC_Start_IT+0x228>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x1e2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <HAL_TIM_IC_Start_IT+0x22c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x1e2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a14      	ldr	r2, [pc, #80]	@ (800489c <HAL_TIM_IC_Start_IT+0x230>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b06      	cmp	r3, #6
 800485e:	d010      	beq.n	8004882 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	e007      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f842 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9ae 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f9b5 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0204 	mvn.w	r2, #4
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f81c 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f988 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f98f 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fff6 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f962 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f969 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d020      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc ffd0 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f93c 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f943 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f91a 	bl	8004c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fb72 	bl	8005114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f914 	bl	8004c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0220 	mvn.w	r2, #32
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fb44 	bl	8005100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e088      	b.n	8004bb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004abc:	f000 f96e 	bl	8004d9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020c 	bic.w	r2, r2, #12
 8004ace:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	619a      	str	r2, [r3, #24]
 8004ae2:	e060      	b.n	8004ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d11c      	bne.n	8004b24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004afa:	f000 f9b7 	bl	8004e6c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6999      	ldr	r1, [r3, #24]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	619a      	str	r2, [r3, #24]
 8004b22:	e040      	b.n	8004ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d11b      	bne.n	8004b62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b3a:	f000 f9d4 	bl	8004ee6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 020c 	bic.w	r2, r2, #12
 8004b4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	61da      	str	r2, [r3, #28]
 8004b60:	e021      	b.n	8004ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	d11c      	bne.n	8004ba2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b78:	f000 f9f1 	bl	8004f5e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69d9      	ldr	r1, [r3, #28]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
 8004ba0:	e001      	b.n	8004ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d831      	bhi.n	8004c30 <HAL_TIM_ReadCapturedValue+0x78>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c31 	.word	0x08004c31
 8004c04:	08004c27 	.word	0x08004c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0e:	60fb      	str	r3, [r7, #12]

      break;
 8004c10:	e00f      	b.n	8004c32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	60fb      	str	r3, [r7, #12]

      break;
 8004c1a:	e00a      	b.n	8004c32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	60fb      	str	r3, [r7, #12]

      break;
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	60fb      	str	r3, [r7, #12]

      break;
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c30:	bf00      	nop
  }

  return tmpreg;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a37      	ldr	r2, [pc, #220]	@ (8004d80 <TIM_Base_SetConfig+0xf0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00f      	beq.n	8004cc8 <TIM_Base_SetConfig+0x38>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d00b      	beq.n	8004cc8 <TIM_Base_SetConfig+0x38>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a34      	ldr	r2, [pc, #208]	@ (8004d84 <TIM_Base_SetConfig+0xf4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0x38>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a33      	ldr	r2, [pc, #204]	@ (8004d88 <TIM_Base_SetConfig+0xf8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0x38>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a32      	ldr	r2, [pc, #200]	@ (8004d8c <TIM_Base_SetConfig+0xfc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d108      	bne.n	8004cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	@ (8004d80 <TIM_Base_SetConfig+0xf0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01b      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce8:	d017      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	@ (8004d84 <TIM_Base_SetConfig+0xf4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	@ (8004d88 <TIM_Base_SetConfig+0xf8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00f      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	@ (8004d8c <TIM_Base_SetConfig+0xfc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00b      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a22      	ldr	r2, [pc, #136]	@ (8004d90 <TIM_Base_SetConfig+0x100>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	@ (8004d94 <TIM_Base_SetConfig+0x104>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_Base_SetConfig+0x8a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a20      	ldr	r2, [pc, #128]	@ (8004d98 <TIM_Base_SetConfig+0x108>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d80 <TIM_Base_SetConfig+0xf0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d103      	bne.n	8004d5a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f023 0201 	bic.w	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a24      	ldr	r2, [pc, #144]	@ (8004e58 <TIM_TI1_SetConfig+0xbc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_TI1_SetConfig+0x56>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd0:	d00f      	beq.n	8004df2 <TIM_TI1_SetConfig+0x56>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a21      	ldr	r2, [pc, #132]	@ (8004e5c <TIM_TI1_SetConfig+0xc0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_TI1_SetConfig+0x56>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a20      	ldr	r2, [pc, #128]	@ (8004e60 <TIM_TI1_SetConfig+0xc4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_TI1_SetConfig+0x56>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e64 <TIM_TI1_SetConfig+0xc8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_TI1_SetConfig+0x56>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <TIM_TI1_SetConfig+0xcc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <TIM_TI1_SetConfig+0x5a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <TIM_TI1_SetConfig+0x5c>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e003      	b.n	8004e16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f023 030a 	bic.w	r3, r3, #10
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 030a 	and.w	r3, r3, #10
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40014000 	.word	0x40014000

08004e6c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	031b      	lsls	r3, r3, #12
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	031b      	lsls	r3, r3, #12
 8004fb6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2201      	movs	r2, #1
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005038:	2302      	movs	r3, #2
 800503a:	e050      	b.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005088:	d013      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a13      	ldr	r2, [pc, #76]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10c      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e042      	b.n	80051c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc ffd6 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2224      	movs	r2, #36	@ 0x24
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800516a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fdd3 	bl	8005d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	@ 0x28
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d175      	bne.n	80052d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Transmit+0x2c>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e06e      	b.n	80052d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2221      	movs	r2, #33	@ 0x21
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005206:	f7fd f897 	bl	8002338 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005220:	d108      	bne.n	8005234 <HAL_UART_Transmit+0x6c>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e003      	b.n	800523c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800523c:	e02e      	b.n	800529c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	2180      	movs	r1, #128	@ 0x80
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fb37 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e03a      	b.n	80052d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	3302      	adds	r3, #2
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e007      	b.n	800528e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1cb      	bne.n	800523e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2140      	movs	r1, #64	@ 0x40
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb03 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e006      	b.n	80052d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d112      	bne.n	800531e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_UART_Receive_IT+0x26>
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00b      	b.n	8005320 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	461a      	mov	r2, r3
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fb2a 	bl	800596e <UART_Start_Receive_IT>
 800531a:	4603      	mov	r3, r0
 800531c:	e000      	b.n	8005320 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b0ba      	sub	sp, #232	@ 0xe8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800534e:	2300      	movs	r3, #0
 8005350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_UART_IRQHandler+0x66>
 800537a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fc07 	bl	8005b9a <UART_Receive_IT>
      return;
 800538c:	e273      	b.n	8005876 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800538e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80de 	beq.w	8005554 <HAL_UART_IRQHandler+0x22c>
 8005398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80d1 	beq.w	8005554 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <HAL_UART_IRQHandler+0xae>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_UART_IRQHandler+0xd2>
 80053e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f043 0202 	orr.w	r2, r3, #2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0xf6>
 8005406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d011      	beq.n	800544e <HAL_UART_IRQHandler+0x126>
 800542a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0208 	orr.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 820a 	beq.w	800586c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_UART_IRQHandler+0x14e>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fb92 	bl	8005b9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005480:	2b40      	cmp	r3, #64	@ 0x40
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_UART_IRQHandler+0x17a>
 800549a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d04f      	beq.n	8005542 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa9d 	bl	80059e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d141      	bne.n	800553a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1d9      	bne.n	80054b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550e:	4a8a      	ldr	r2, [pc, #552]	@ (8005738 <HAL_UART_IRQHandler+0x410>)
 8005510:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd f8bf 	bl	800269a <HAL_DMA_Abort_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00e      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9ac 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e00a      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9a8 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e006      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9a4 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800554e:	e18d      	b.n	800586c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	bf00      	nop
    return;
 8005552:	e18b      	b.n	800586c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	f040 8167 	bne.w	800582c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8160 	beq.w	800582c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8159 	beq.w	800582c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	f040 80ce 	bne.w	800573c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a9 	beq.w	8005708 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055be:	429a      	cmp	r2, r3
 80055c0:	f080 80a2 	bcs.w	8005708 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d6:	f000 8088 	beq.w	80056ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800561e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1d9      	bne.n	80055da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800564a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800564e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800565c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e1      	bne.n	8005626 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800568c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e3      	bne.n	8005662 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ba:	f023 0310 	bic.w	r3, r3, #16
 80056be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e3      	bne.n	80056a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fc ff68 	bl	80025ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8cf 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005706:	e0b3      	b.n	8005870 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800570c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005710:	429a      	cmp	r2, r3
 8005712:	f040 80ad 	bne.w	8005870 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005720:	f040 80a6 	bne.w	8005870 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8b7 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
      return;
 8005736:	e09b      	b.n	8005870 <HAL_UART_IRQHandler+0x548>
 8005738:	08005aa9 	.word	0x08005aa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 808e 	beq.w	8005874 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8089 	beq.w	8005874 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005786:	647a      	str	r2, [r7, #68]	@ 0x44
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800578c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	623b      	str	r3, [r7, #32]
   return(result);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057be:	633a      	str	r2, [r7, #48]	@ 0x30
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e3      	bne.n	800579a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005804:	61fa      	str	r2, [r7, #28]
 8005806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e3      	bne.n	80057e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f83d 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800582a:	e023      	b.n	8005874 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_UART_IRQHandler+0x524>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f940 	bl	8005aca <UART_Transmit_IT>
    return;
 800584a:	e014      	b.n	8005876 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <HAL_UART_IRQHandler+0x54e>
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f980 	bl	8005b6a <UART_EndTransmit_IT>
    return;
 800586a:	e004      	b.n	8005876 <HAL_UART_IRQHandler+0x54e>
    return;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_UART_IRQHandler+0x54e>
      return;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_UART_IRQHandler+0x54e>
      return;
 8005874:	bf00      	nop
  }
}
 8005876:	37e8      	adds	r7, #232	@ 0xe8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058cc:	e03b      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d037      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fc fd2f 	bl	8002338 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <UART_WaitOnFlagUntilTimeout+0x30>
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e03a      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d023      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b80      	cmp	r3, #128	@ 0x80
 8005902:	d020      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b40      	cmp	r3, #64	@ 0x40
 8005908:	d01d      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d116      	bne.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f857 	bl	80059e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2208      	movs	r2, #8
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e00f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d0b4      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2222      	movs	r2, #34	@ 0x22
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0220 	orr.w	r2, r2, #32
 80059d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b095      	sub	sp, #84	@ 0x54
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d119      	bne.n	8005a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a7a:	61ba      	str	r2, [r7, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	613b      	str	r3, [r7, #16]
   return(result);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a9c:	bf00      	nop
 8005a9e:	3754      	adds	r7, #84	@ 0x54
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fee7 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b21      	cmp	r3, #33	@ 0x21
 8005adc:	d13e      	bne.n	8005b5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae6:	d114      	bne.n	8005b12 <UART_Transmit_IT+0x48>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	621a      	str	r2, [r3, #32]
 8005b10:	e008      	b.n	8005b24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6211      	str	r1, [r2, #32]
 8005b1c:	781a      	ldrb	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fe76 	bl	800587c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08c      	sub	sp, #48	@ 0x30
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	@ 0x22
 8005bb4:	f040 80aa 	bne.w	8005d0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc0:	d115      	bne.n	8005bee <UART_Receive_IT+0x54>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d111      	bne.n	8005bee <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bec:	e024      	b.n	8005c38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfc:	d007      	beq.n	8005c0e <UART_Receive_IT+0x74>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <UART_Receive_IT+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e008      	b.n	8005c2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d15d      	bne.n	8005d08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0220 	bic.w	r2, r2, #32
 8005c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d135      	bne.n	8005cfe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb8:	623a      	str	r2, [r7, #32]
 8005cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69f9      	ldr	r1, [r7, #28]
 8005cbe:	6a3a      	ldr	r2, [r7, #32]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e5      	bne.n	8005c98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d10a      	bne.n	8005cf0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fdd4 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
 8005cfc:	e002      	b.n	8005d04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fa5a 	bl	80011b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e002      	b.n	8005d0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	@ 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b0c0      	sub	sp, #256	@ 0x100
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	68d9      	ldr	r1, [r3, #12]
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	ea40 0301 	orr.w	r3, r0, r1
 8005d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d70:	f021 010c 	bic.w	r1, r1, #12
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d92:	6999      	ldr	r1, [r3, #24]
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	ea40 0301 	orr.w	r3, r0, r1
 8005d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0xa0>
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe8 <UART_SetConfig+0x2d0>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d104      	bne.n	8005dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe fbf4 	bl	80045a4 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dc0:	e003      	b.n	8005dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dc2:	f7fe fbdb 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8005dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd4:	f040 810c 	bne.w	8005ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005de2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	1891      	adds	r1, r2, r2
 8005df0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005df2:	415b      	adcs	r3, r3
 8005df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	eb12 0801 	adds.w	r8, r2, r1
 8005e00:	4629      	mov	r1, r5
 8005e02:	eb43 0901 	adc.w	r9, r3, r1
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	eb18 0303 	adds.w	r3, r8, r3
 8005e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e28:	462b      	mov	r3, r5
 8005e2a:	eb49 0303 	adc.w	r3, r9, r3
 8005e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e46:	460b      	mov	r3, r1
 8005e48:	18db      	adds	r3, r3, r3
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	eb42 0303 	adc.w	r3, r2, r3
 8005e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e5c:	f7fa fefc 	bl	8000c58 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4b61      	ldr	r3, [pc, #388]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005e66:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	011c      	lsls	r4, r3, #4
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e90:	4641      	mov	r1, r8
 8005e92:	eb12 0a01 	adds.w	sl, r2, r1
 8005e96:	4649      	mov	r1, r9
 8005e98:	eb43 0b01 	adc.w	fp, r3, r1
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb0:	4692      	mov	sl, r2
 8005eb2:	469b      	mov	fp, r3
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005edc:	460b      	mov	r3, r1
 8005ede:	18db      	adds	r3, r3, r3
 8005ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	eb42 0303 	adc.w	r3, r2, r3
 8005ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ef2:	f7fa feb1 	bl	8000c58 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005efe:	fba3 2301 	umull	r2, r3, r3, r1
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2264      	movs	r2, #100	@ 0x64
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	1acb      	subs	r3, r1, r3
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f12:	4b36      	ldr	r3, [pc, #216]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005f14:	fba3 2302 	umull	r2, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f20:	441c      	add	r4, r3
 8005f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	1891      	adds	r1, r2, r2
 8005f3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f44:	4641      	mov	r1, r8
 8005f46:	1851      	adds	r1, r2, r1
 8005f48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	414b      	adcs	r3, r1
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	00cb      	lsls	r3, r1, #3
 8005f60:	4651      	mov	r1, sl
 8005f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f66:	4651      	mov	r1, sl
 8005f68:	00ca      	lsls	r2, r1, #3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4642      	mov	r2, r8
 8005f72:	189b      	adds	r3, r3, r2
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f78:	464b      	mov	r3, r9
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f98:	460b      	mov	r3, r1
 8005f9a:	18db      	adds	r3, r3, r3
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fae:	f7fa fe53 	bl	8000c58 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	2164      	movs	r1, #100	@ 0x64
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	3332      	adds	r3, #50	@ 0x32
 8005fca:	4a08      	ldr	r2, [pc, #32]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f003 0207 	and.w	r2, r3, #7
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4422      	add	r2, r4
 8005fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fe0:	e106      	b.n	80061f0 <UART_SetConfig+0x4d8>
 8005fe2:	bf00      	nop
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	40011400 	.word	0x40011400
 8005fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006002:	4642      	mov	r2, r8
 8006004:	464b      	mov	r3, r9
 8006006:	1891      	adds	r1, r2, r2
 8006008:	6239      	str	r1, [r7, #32]
 800600a:	415b      	adcs	r3, r3
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006012:	4641      	mov	r1, r8
 8006014:	1854      	adds	r4, r2, r1
 8006016:	4649      	mov	r1, r9
 8006018:	eb43 0501 	adc.w	r5, r3, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	00eb      	lsls	r3, r5, #3
 8006026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602a:	00e2      	lsls	r2, r4, #3
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	4643      	mov	r3, r8
 8006032:	18e3      	adds	r3, r4, r3
 8006034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006038:	464b      	mov	r3, r9
 800603a:	eb45 0303 	adc.w	r3, r5, r3
 800603e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800604e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800605e:	4629      	mov	r1, r5
 8006060:	008b      	lsls	r3, r1, #2
 8006062:	4621      	mov	r1, r4
 8006064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006068:	4621      	mov	r1, r4
 800606a:	008a      	lsls	r2, r1, #2
 800606c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006070:	f7fa fdf2 	bl	8000c58 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4b60      	ldr	r3, [pc, #384]	@ (80061fc <UART_SetConfig+0x4e4>)
 800607a:	fba3 2302 	umull	r2, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	011c      	lsls	r4, r3, #4
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800608c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	61b9      	str	r1, [r7, #24]
 800609c:	415b      	adcs	r3, r3
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6139      	str	r1, [r7, #16]
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060d8:	464b      	mov	r3, r9
 80060da:	460a      	mov	r2, r1
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060fc:	4649      	mov	r1, r9
 80060fe:	008b      	lsls	r3, r1, #2
 8006100:	4641      	mov	r1, r8
 8006102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006106:	4641      	mov	r1, r8
 8006108:	008a      	lsls	r2, r1, #2
 800610a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800610e:	f7fa fda3 	bl	8000c58 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4611      	mov	r1, r2
 8006118:	4b38      	ldr	r3, [pc, #224]	@ (80061fc <UART_SetConfig+0x4e4>)
 800611a:	fba3 2301 	umull	r2, r3, r3, r1
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2264      	movs	r2, #100	@ 0x64
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	1acb      	subs	r3, r1, r3
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	3332      	adds	r3, #50	@ 0x32
 800612c:	4a33      	ldr	r2, [pc, #204]	@ (80061fc <UART_SetConfig+0x4e4>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006138:	441c      	add	r4, r3
 800613a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613e:	2200      	movs	r2, #0
 8006140:	673b      	str	r3, [r7, #112]	@ 0x70
 8006142:	677a      	str	r2, [r7, #116]	@ 0x74
 8006144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	1891      	adds	r1, r2, r2
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	415b      	adcs	r3, r3
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006158:	4641      	mov	r1, r8
 800615a:	1851      	adds	r1, r2, r1
 800615c:	6039      	str	r1, [r7, #0]
 800615e:	4649      	mov	r1, r9
 8006160:	414b      	adcs	r3, r1
 8006162:	607b      	str	r3, [r7, #4]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006170:	4659      	mov	r1, fp
 8006172:	00cb      	lsls	r3, r1, #3
 8006174:	4651      	mov	r1, sl
 8006176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800617a:	4651      	mov	r1, sl
 800617c:	00ca      	lsls	r2, r1, #3
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	4603      	mov	r3, r0
 8006184:	4642      	mov	r2, r8
 8006186:	189b      	adds	r3, r3, r2
 8006188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800618a:	464b      	mov	r3, r9
 800618c:	460a      	mov	r2, r1
 800618e:	eb42 0303 	adc.w	r3, r2, r3
 8006192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	663b      	str	r3, [r7, #96]	@ 0x60
 800619e:	667a      	str	r2, [r7, #100]	@ 0x64
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061ac:	4649      	mov	r1, r9
 80061ae:	008b      	lsls	r3, r1, #2
 80061b0:	4641      	mov	r1, r8
 80061b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b6:	4641      	mov	r1, r8
 80061b8:	008a      	lsls	r2, r1, #2
 80061ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061be:	f7fa fd4b 	bl	8000c58 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <UART_SetConfig+0x4e4>)
 80061c8:	fba3 1302 	umull	r1, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	2164      	movs	r1, #100	@ 0x64
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	3332      	adds	r3, #50	@ 0x32
 80061da:	4a08      	ldr	r2, [pc, #32]	@ (80061fc <UART_SetConfig+0x4e4>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4422      	add	r2, r4
 80061ee:	609a      	str	r2, [r3, #8]
}
 80061f0:	bf00      	nop
 80061f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061f6:	46bd      	mov	sp, r7
 80061f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fc:	51eb851f 	.word	0x51eb851f

08006200 <log>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	ed2d 8b02 	vpush	{d8}
 8006206:	ec55 4b10 	vmov	r4, r5, d0
 800620a:	f000 f91d 	bl	8006448 <__ieee754_log>
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	eeb0 8a40 	vmov.f32	s16, s0
 800621a:	eef0 8a60 	vmov.f32	s17, s1
 800621e:	f7fa fc8d 	bl	8000b3c <__aeabi_dcmpun>
 8006222:	b998      	cbnz	r0, 800624c <log+0x4c>
 8006224:	2200      	movs	r2, #0
 8006226:	2300      	movs	r3, #0
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7fa fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 8006230:	b960      	cbnz	r0, 800624c <log+0x4c>
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800623e:	b160      	cbz	r0, 800625a <log+0x5a>
 8006240:	f002 fbe6 	bl	8008a10 <__errno>
 8006244:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006270 <log+0x70>
 8006248:	2322      	movs	r3, #34	@ 0x22
 800624a:	6003      	str	r3, [r0, #0]
 800624c:	eeb0 0a48 	vmov.f32	s0, s16
 8006250:	eef0 0a68 	vmov.f32	s1, s17
 8006254:	ecbd 8b02 	vpop	{d8}
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	f002 fbd9 	bl	8008a10 <__errno>
 800625e:	ecbd 8b02 	vpop	{d8}
 8006262:	2321      	movs	r3, #33	@ 0x21
 8006264:	6003      	str	r3, [r0, #0]
 8006266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800626a:	4803      	ldr	r0, [pc, #12]	@ (8006278 <log+0x78>)
 800626c:	f000 b8d8 	b.w	8006420 <nan>
 8006270:	00000000 	.word	0x00000000
 8006274:	fff00000 	.word	0xfff00000
 8006278:	0800ac64 	.word	0x0800ac64

0800627c <pow>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	ed2d 8b02 	vpush	{d8}
 8006282:	eeb0 8a40 	vmov.f32	s16, s0
 8006286:	eef0 8a60 	vmov.f32	s17, s1
 800628a:	ec55 4b11 	vmov	r4, r5, d1
 800628e:	f000 fa93 	bl	80067b8 <__ieee754_pow>
 8006292:	4622      	mov	r2, r4
 8006294:	462b      	mov	r3, r5
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	ec57 6b10 	vmov	r6, r7, d0
 800629e:	f7fa fc4d 	bl	8000b3c <__aeabi_dcmpun>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d13b      	bne.n	800631e <pow+0xa2>
 80062a6:	ec51 0b18 	vmov	r0, r1, d8
 80062aa:	2200      	movs	r2, #0
 80062ac:	2300      	movs	r3, #0
 80062ae:	f7fa fc13 	bl	8000ad8 <__aeabi_dcmpeq>
 80062b2:	b1b8      	cbz	r0, 80062e4 <pow+0x68>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7fa fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d146      	bne.n	8006352 <pow+0xd6>
 80062c4:	ec45 4b10 	vmov	d0, r4, r5
 80062c8:	f000 f89f 	bl	800640a <finite>
 80062cc:	b338      	cbz	r0, 800631e <pow+0xa2>
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa fc09 	bl	8000aec <__aeabi_dcmplt>
 80062da:	b300      	cbz	r0, 800631e <pow+0xa2>
 80062dc:	f002 fb98 	bl	8008a10 <__errno>
 80062e0:	2322      	movs	r3, #34	@ 0x22
 80062e2:	e01b      	b.n	800631c <pow+0xa0>
 80062e4:	ec47 6b10 	vmov	d0, r6, r7
 80062e8:	f000 f88f 	bl	800640a <finite>
 80062ec:	b9e0      	cbnz	r0, 8006328 <pow+0xac>
 80062ee:	eeb0 0a48 	vmov.f32	s0, s16
 80062f2:	eef0 0a68 	vmov.f32	s1, s17
 80062f6:	f000 f888 	bl	800640a <finite>
 80062fa:	b1a8      	cbz	r0, 8006328 <pow+0xac>
 80062fc:	ec45 4b10 	vmov	d0, r4, r5
 8006300:	f000 f883 	bl	800640a <finite>
 8006304:	b180      	cbz	r0, 8006328 <pow+0xac>
 8006306:	4632      	mov	r2, r6
 8006308:	463b      	mov	r3, r7
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fc15 	bl	8000b3c <__aeabi_dcmpun>
 8006312:	2800      	cmp	r0, #0
 8006314:	d0e2      	beq.n	80062dc <pow+0x60>
 8006316:	f002 fb7b 	bl	8008a10 <__errno>
 800631a:	2321      	movs	r3, #33	@ 0x21
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	ecbd 8b02 	vpop	{d8}
 8006322:	ec47 6b10 	vmov	d0, r6, r7
 8006326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	f7fa fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	d0f2      	beq.n	800631e <pow+0xa2>
 8006338:	eeb0 0a48 	vmov.f32	s0, s16
 800633c:	eef0 0a68 	vmov.f32	s1, s17
 8006340:	f000 f863 	bl	800640a <finite>
 8006344:	2800      	cmp	r0, #0
 8006346:	d0ea      	beq.n	800631e <pow+0xa2>
 8006348:	ec45 4b10 	vmov	d0, r4, r5
 800634c:	f000 f85d 	bl	800640a <finite>
 8006350:	e7c3      	b.n	80062da <pow+0x5e>
 8006352:	4f01      	ldr	r7, [pc, #4]	@ (8006358 <pow+0xdc>)
 8006354:	2600      	movs	r6, #0
 8006356:	e7e2      	b.n	800631e <pow+0xa2>
 8006358:	3ff00000 	.word	0x3ff00000

0800635c <powf>:
 800635c:	b508      	push	{r3, lr}
 800635e:	ed2d 8b04 	vpush	{d8-d9}
 8006362:	eeb0 8a60 	vmov.f32	s16, s1
 8006366:	eeb0 9a40 	vmov.f32	s18, s0
 800636a:	f000 ff77 	bl	800725c <__ieee754_powf>
 800636e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006376:	eef0 8a40 	vmov.f32	s17, s0
 800637a:	d63e      	bvs.n	80063fa <powf+0x9e>
 800637c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d112      	bne.n	80063ac <powf+0x50>
 8006386:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	d039      	beq.n	8006404 <powf+0xa8>
 8006390:	eeb0 0a48 	vmov.f32	s0, s16
 8006394:	f000 f84c 	bl	8006430 <finitef>
 8006398:	b378      	cbz	r0, 80063fa <powf+0x9e>
 800639a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800639e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a2:	d52a      	bpl.n	80063fa <powf+0x9e>
 80063a4:	f002 fb34 	bl	8008a10 <__errno>
 80063a8:	2322      	movs	r3, #34	@ 0x22
 80063aa:	e014      	b.n	80063d6 <powf+0x7a>
 80063ac:	f000 f840 	bl	8006430 <finitef>
 80063b0:	b998      	cbnz	r0, 80063da <powf+0x7e>
 80063b2:	eeb0 0a49 	vmov.f32	s0, s18
 80063b6:	f000 f83b 	bl	8006430 <finitef>
 80063ba:	b170      	cbz	r0, 80063da <powf+0x7e>
 80063bc:	eeb0 0a48 	vmov.f32	s0, s16
 80063c0:	f000 f836 	bl	8006430 <finitef>
 80063c4:	b148      	cbz	r0, 80063da <powf+0x7e>
 80063c6:	eef4 8a68 	vcmp.f32	s17, s17
 80063ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ce:	d7e9      	bvc.n	80063a4 <powf+0x48>
 80063d0:	f002 fb1e 	bl	8008a10 <__errno>
 80063d4:	2321      	movs	r3, #33	@ 0x21
 80063d6:	6003      	str	r3, [r0, #0]
 80063d8:	e00f      	b.n	80063fa <powf+0x9e>
 80063da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	d10a      	bne.n	80063fa <powf+0x9e>
 80063e4:	eeb0 0a49 	vmov.f32	s0, s18
 80063e8:	f000 f822 	bl	8006430 <finitef>
 80063ec:	b128      	cbz	r0, 80063fa <powf+0x9e>
 80063ee:	eeb0 0a48 	vmov.f32	s0, s16
 80063f2:	f000 f81d 	bl	8006430 <finitef>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d1d4      	bne.n	80063a4 <powf+0x48>
 80063fa:	eeb0 0a68 	vmov.f32	s0, s17
 80063fe:	ecbd 8b04 	vpop	{d8-d9}
 8006402:	bd08      	pop	{r3, pc}
 8006404:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006408:	e7f7      	b.n	80063fa <powf+0x9e>

0800640a <finite>:
 800640a:	b082      	sub	sp, #8
 800640c:	ed8d 0b00 	vstr	d0, [sp]
 8006410:	9801      	ldr	r0, [sp, #4]
 8006412:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006416:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800641a:	0fc0      	lsrs	r0, r0, #31
 800641c:	b002      	add	sp, #8
 800641e:	4770      	bx	lr

08006420 <nan>:
 8006420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006428 <nan+0x8>
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	00000000 	.word	0x00000000
 800642c:	7ff80000 	.word	0x7ff80000

08006430 <finitef>:
 8006430:	ee10 3a10 	vmov	r3, s0
 8006434:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006438:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800643c:	bfac      	ite	ge
 800643e:	2000      	movge	r0, #0
 8006440:	2001      	movlt	r0, #1
 8006442:	4770      	bx	lr
 8006444:	0000      	movs	r0, r0
	...

08006448 <__ieee754_log>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ec51 0b10 	vmov	r0, r1, d0
 8006450:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006454:	b087      	sub	sp, #28
 8006456:	460d      	mov	r5, r1
 8006458:	da26      	bge.n	80064a8 <__ieee754_log+0x60>
 800645a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800645e:	4303      	orrs	r3, r0
 8006460:	4602      	mov	r2, r0
 8006462:	d10a      	bne.n	800647a <__ieee754_log+0x32>
 8006464:	49ce      	ldr	r1, [pc, #824]	@ (80067a0 <__ieee754_log+0x358>)
 8006466:	2200      	movs	r2, #0
 8006468:	2300      	movs	r3, #0
 800646a:	2000      	movs	r0, #0
 800646c:	f7fa f9f6 	bl	800085c <__aeabi_ddiv>
 8006470:	ec41 0b10 	vmov	d0, r0, r1
 8006474:	b007      	add	sp, #28
 8006476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647a:	2900      	cmp	r1, #0
 800647c:	da05      	bge.n	800648a <__ieee754_log+0x42>
 800647e:	460b      	mov	r3, r1
 8006480:	f7f9 ff0a 	bl	8000298 <__aeabi_dsub>
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	e7f0      	b.n	800646c <__ieee754_log+0x24>
 800648a:	4bc6      	ldr	r3, [pc, #792]	@ (80067a4 <__ieee754_log+0x35c>)
 800648c:	2200      	movs	r2, #0
 800648e:	f7fa f8bb 	bl	8000608 <__aeabi_dmul>
 8006492:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8006496:	460d      	mov	r5, r1
 8006498:	4ac3      	ldr	r2, [pc, #780]	@ (80067a8 <__ieee754_log+0x360>)
 800649a:	4295      	cmp	r5, r2
 800649c:	dd06      	ble.n	80064ac <__ieee754_log+0x64>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	f7f9 fefb 	bl	800029c <__adddf3>
 80064a6:	e7e3      	b.n	8006470 <__ieee754_log+0x28>
 80064a8:	2300      	movs	r3, #0
 80064aa:	e7f5      	b.n	8006498 <__ieee754_log+0x50>
 80064ac:	152c      	asrs	r4, r5, #20
 80064ae:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80064b2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80064b6:	441c      	add	r4, r3
 80064b8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80064bc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80064c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80064c8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80064cc:	ea42 0105 	orr.w	r1, r2, r5
 80064d0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80064d4:	2200      	movs	r2, #0
 80064d6:	4bb5      	ldr	r3, [pc, #724]	@ (80067ac <__ieee754_log+0x364>)
 80064d8:	f7f9 fede 	bl	8000298 <__aeabi_dsub>
 80064dc:	1cab      	adds	r3, r5, #2
 80064de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	4682      	mov	sl, r0
 80064e6:	468b      	mov	fp, r1
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	dc53      	bgt.n	8006596 <__ieee754_log+0x14e>
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7fa faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80064f4:	b1d0      	cbz	r0, 800652c <__ieee754_log+0xe4>
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	f000 8120 	beq.w	800673c <__ieee754_log+0x2f4>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7fa f819 	bl	8000534 <__aeabi_i2d>
 8006502:	a391      	add	r3, pc, #580	@ (adr r3, 8006748 <__ieee754_log+0x300>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	f7fa f87c 	bl	8000608 <__aeabi_dmul>
 8006510:	a38f      	add	r3, pc, #572	@ (adr r3, 8006750 <__ieee754_log+0x308>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa f873 	bl	8000608 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	e7ba      	b.n	80064a2 <__ieee754_log+0x5a>
 800652c:	a38a      	add	r3, pc, #552	@ (adr r3, 8006758 <__ieee754_log+0x310>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	4650      	mov	r0, sl
 8006534:	4659      	mov	r1, fp
 8006536:	f7fa f867 	bl	8000608 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	2000      	movs	r0, #0
 8006540:	499b      	ldr	r1, [pc, #620]	@ (80067b0 <__ieee754_log+0x368>)
 8006542:	f7f9 fea9 	bl	8000298 <__aeabi_dsub>
 8006546:	4652      	mov	r2, sl
 8006548:	4606      	mov	r6, r0
 800654a:	460f      	mov	r7, r1
 800654c:	465b      	mov	r3, fp
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	f7fa f859 	bl	8000608 <__aeabi_dmul>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa f853 	bl	8000608 <__aeabi_dmul>
 8006562:	4606      	mov	r6, r0
 8006564:	460f      	mov	r7, r1
 8006566:	b914      	cbnz	r4, 800656e <__ieee754_log+0x126>
 8006568:	4632      	mov	r2, r6
 800656a:	463b      	mov	r3, r7
 800656c:	e0a0      	b.n	80066b0 <__ieee754_log+0x268>
 800656e:	4620      	mov	r0, r4
 8006570:	f7f9 ffe0 	bl	8000534 <__aeabi_i2d>
 8006574:	a374      	add	r3, pc, #464	@ (adr r3, 8006748 <__ieee754_log+0x300>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	4680      	mov	r8, r0
 800657c:	4689      	mov	r9, r1
 800657e:	f7fa f843 	bl	8000608 <__aeabi_dmul>
 8006582:	a373      	add	r3, pc, #460	@ (adr r3, 8006750 <__ieee754_log+0x308>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	4640      	mov	r0, r8
 800658e:	4649      	mov	r1, r9
 8006590:	f7fa f83a 	bl	8000608 <__aeabi_dmul>
 8006594:	e0a5      	b.n	80066e2 <__ieee754_log+0x29a>
 8006596:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800659a:	f7f9 fe7f 	bl	800029c <__adddf3>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4650      	mov	r0, sl
 80065a4:	4659      	mov	r1, fp
 80065a6:	f7fa f959 	bl	800085c <__aeabi_ddiv>
 80065aa:	e9cd 0100 	strd	r0, r1, [sp]
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7f9 ffc0 	bl	8000534 <__aeabi_i2d>
 80065b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	f7fa f822 	bl	8000608 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065cc:	f7fa f81c 	bl	8000608 <__aeabi_dmul>
 80065d0:	a363      	add	r3, pc, #396	@ (adr r3, 8006760 <__ieee754_log+0x318>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	4680      	mov	r8, r0
 80065d8:	4689      	mov	r9, r1
 80065da:	f7fa f815 	bl	8000608 <__aeabi_dmul>
 80065de:	a362      	add	r3, pc, #392	@ (adr r3, 8006768 <__ieee754_log+0x320>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fe5a 	bl	800029c <__adddf3>
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	f7fa f80c 	bl	8000608 <__aeabi_dmul>
 80065f0:	a35f      	add	r3, pc, #380	@ (adr r3, 8006770 <__ieee754_log+0x328>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 fe51 	bl	800029c <__adddf3>
 80065fa:	4642      	mov	r2, r8
 80065fc:	464b      	mov	r3, r9
 80065fe:	f7fa f803 	bl	8000608 <__aeabi_dmul>
 8006602:	a35d      	add	r3, pc, #372	@ (adr r3, 8006778 <__ieee754_log+0x330>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7f9 fe48 	bl	800029c <__adddf3>
 800660c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006610:	f7f9 fffa 	bl	8000608 <__aeabi_dmul>
 8006614:	a35a      	add	r3, pc, #360	@ (adr r3, 8006780 <__ieee754_log+0x338>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7f9 fff1 	bl	8000608 <__aeabi_dmul>
 8006626:	a358      	add	r3, pc, #352	@ (adr r3, 8006788 <__ieee754_log+0x340>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f7f9 fe36 	bl	800029c <__adddf3>
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	f7f9 ffe8 	bl	8000608 <__aeabi_dmul>
 8006638:	a355      	add	r3, pc, #340	@ (adr r3, 8006790 <__ieee754_log+0x348>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 fe2d 	bl	800029c <__adddf3>
 8006642:	4642      	mov	r2, r8
 8006644:	464b      	mov	r3, r9
 8006646:	f7f9 ffdf 	bl	8000608 <__aeabi_dmul>
 800664a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800665a:	f7f9 fe1f 	bl	800029c <__adddf3>
 800665e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006662:	3551      	adds	r5, #81	@ 0x51
 8006664:	4335      	orrs	r5, r6
 8006666:	2d00      	cmp	r5, #0
 8006668:	4680      	mov	r8, r0
 800666a:	4689      	mov	r9, r1
 800666c:	dd48      	ble.n	8006700 <__ieee754_log+0x2b8>
 800666e:	4b50      	ldr	r3, [pc, #320]	@ (80067b0 <__ieee754_log+0x368>)
 8006670:	2200      	movs	r2, #0
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	f7f9 ffc7 	bl	8000608 <__aeabi_dmul>
 800667a:	4652      	mov	r2, sl
 800667c:	465b      	mov	r3, fp
 800667e:	f7f9 ffc3 	bl	8000608 <__aeabi_dmul>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4606      	mov	r6, r0
 8006688:	460f      	mov	r7, r1
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 fe05 	bl	800029c <__adddf3>
 8006692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006696:	f7f9 ffb7 	bl	8000608 <__aeabi_dmul>
 800669a:	4680      	mov	r8, r0
 800669c:	4689      	mov	r9, r1
 800669e:	b964      	cbnz	r4, 80066ba <__ieee754_log+0x272>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7f9 fdf6 	bl	8000298 <__aeabi_dsub>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7f9 fdf0 	bl	8000298 <__aeabi_dsub>
 80066b8:	e6da      	b.n	8006470 <__ieee754_log+0x28>
 80066ba:	a323      	add	r3, pc, #140	@ (adr r3, 8006748 <__ieee754_log+0x300>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c4:	f7f9 ffa0 	bl	8000608 <__aeabi_dmul>
 80066c8:	a321      	add	r3, pc, #132	@ (adr r3, 8006750 <__ieee754_log+0x308>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d6:	f7f9 ff97 	bl	8000608 <__aeabi_dmul>
 80066da:	4642      	mov	r2, r8
 80066dc:	464b      	mov	r3, r9
 80066de:	f7f9 fddd 	bl	800029c <__adddf3>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7f9 fdd5 	bl	8000298 <__aeabi_dsub>
 80066ee:	4652      	mov	r2, sl
 80066f0:	465b      	mov	r3, fp
 80066f2:	f7f9 fdd1 	bl	8000298 <__aeabi_dsub>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	e7d9      	b.n	80066b4 <__ieee754_log+0x26c>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4650      	mov	r0, sl
 8006706:	4659      	mov	r1, fp
 8006708:	f7f9 fdc6 	bl	8000298 <__aeabi_dsub>
 800670c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006710:	f7f9 ff7a 	bl	8000608 <__aeabi_dmul>
 8006714:	4606      	mov	r6, r0
 8006716:	460f      	mov	r7, r1
 8006718:	2c00      	cmp	r4, #0
 800671a:	f43f af25 	beq.w	8006568 <__ieee754_log+0x120>
 800671e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006748 <__ieee754_log+0x300>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006728:	f7f9 ff6e 	bl	8000608 <__aeabi_dmul>
 800672c:	a308      	add	r3, pc, #32	@ (adr r3, 8006750 <__ieee754_log+0x308>)
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	4604      	mov	r4, r0
 8006734:	460d      	mov	r5, r1
 8006736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673a:	e729      	b.n	8006590 <__ieee754_log+0x148>
 800673c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8006798 <__ieee754_log+0x350>
 8006740:	e698      	b.n	8006474 <__ieee754_log+0x2c>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
 8006748:	fee00000 	.word	0xfee00000
 800674c:	3fe62e42 	.word	0x3fe62e42
 8006750:	35793c76 	.word	0x35793c76
 8006754:	3dea39ef 	.word	0x3dea39ef
 8006758:	55555555 	.word	0x55555555
 800675c:	3fd55555 	.word	0x3fd55555
 8006760:	df3e5244 	.word	0xdf3e5244
 8006764:	3fc2f112 	.word	0x3fc2f112
 8006768:	96cb03de 	.word	0x96cb03de
 800676c:	3fc74664 	.word	0x3fc74664
 8006770:	94229359 	.word	0x94229359
 8006774:	3fd24924 	.word	0x3fd24924
 8006778:	55555593 	.word	0x55555593
 800677c:	3fe55555 	.word	0x3fe55555
 8006780:	d078c69f 	.word	0xd078c69f
 8006784:	3fc39a09 	.word	0x3fc39a09
 8006788:	1d8e78af 	.word	0x1d8e78af
 800678c:	3fcc71c5 	.word	0x3fcc71c5
 8006790:	9997fa04 	.word	0x9997fa04
 8006794:	3fd99999 	.word	0x3fd99999
	...
 80067a0:	c3500000 	.word	0xc3500000
 80067a4:	43500000 	.word	0x43500000
 80067a8:	7fefffff 	.word	0x7fefffff
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	3fe00000 	.word	0x3fe00000
 80067b4:	00000000 	.word	0x00000000

080067b8 <__ieee754_pow>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	b091      	sub	sp, #68	@ 0x44
 80067be:	ed8d 1b00 	vstr	d1, [sp]
 80067c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80067c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80067ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80067ce:	ec57 6b10 	vmov	r6, r7, d0
 80067d2:	d113      	bne.n	80067fc <__ieee754_pow+0x44>
 80067d4:	19b3      	adds	r3, r6, r6
 80067d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80067da:	4152      	adcs	r2, r2
 80067dc:	4298      	cmp	r0, r3
 80067de:	4b9a      	ldr	r3, [pc, #616]	@ (8006a48 <__ieee754_pow+0x290>)
 80067e0:	4193      	sbcs	r3, r2
 80067e2:	f080 84ee 	bcs.w	80071c2 <__ieee754_pow+0xa0a>
 80067e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7f9 fd55 	bl	800029c <__adddf3>
 80067f2:	ec41 0b10 	vmov	d0, r0, r1
 80067f6:	b011      	add	sp, #68	@ 0x44
 80067f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fc:	4a93      	ldr	r2, [pc, #588]	@ (8006a4c <__ieee754_pow+0x294>)
 80067fe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8006802:	4295      	cmp	r5, r2
 8006804:	46b8      	mov	r8, r7
 8006806:	4633      	mov	r3, r6
 8006808:	d80a      	bhi.n	8006820 <__ieee754_pow+0x68>
 800680a:	d104      	bne.n	8006816 <__ieee754_pow+0x5e>
 800680c:	2e00      	cmp	r6, #0
 800680e:	d1ea      	bne.n	80067e6 <__ieee754_pow+0x2e>
 8006810:	45aa      	cmp	sl, r5
 8006812:	d8e8      	bhi.n	80067e6 <__ieee754_pow+0x2e>
 8006814:	e001      	b.n	800681a <__ieee754_pow+0x62>
 8006816:	4592      	cmp	sl, r2
 8006818:	d802      	bhi.n	8006820 <__ieee754_pow+0x68>
 800681a:	4592      	cmp	sl, r2
 800681c:	d10f      	bne.n	800683e <__ieee754_pow+0x86>
 800681e:	b171      	cbz	r1, 800683e <__ieee754_pow+0x86>
 8006820:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006824:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006828:	ea58 0803 	orrs.w	r8, r8, r3
 800682c:	d1db      	bne.n	80067e6 <__ieee754_pow+0x2e>
 800682e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006832:	18db      	adds	r3, r3, r3
 8006834:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006838:	4152      	adcs	r2, r2
 800683a:	4598      	cmp	r8, r3
 800683c:	e7cf      	b.n	80067de <__ieee754_pow+0x26>
 800683e:	f1b8 0f00 	cmp.w	r8, #0
 8006842:	46ab      	mov	fp, r5
 8006844:	da43      	bge.n	80068ce <__ieee754_pow+0x116>
 8006846:	4a82      	ldr	r2, [pc, #520]	@ (8006a50 <__ieee754_pow+0x298>)
 8006848:	4592      	cmp	sl, r2
 800684a:	d856      	bhi.n	80068fa <__ieee754_pow+0x142>
 800684c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006850:	4592      	cmp	sl, r2
 8006852:	f240 84c5 	bls.w	80071e0 <__ieee754_pow+0xa28>
 8006856:	ea4f 522a 	mov.w	r2, sl, asr #20
 800685a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800685e:	2a14      	cmp	r2, #20
 8006860:	dd18      	ble.n	8006894 <__ieee754_pow+0xdc>
 8006862:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006866:	fa21 f402 	lsr.w	r4, r1, r2
 800686a:	fa04 f202 	lsl.w	r2, r4, r2
 800686e:	428a      	cmp	r2, r1
 8006870:	f040 84b6 	bne.w	80071e0 <__ieee754_pow+0xa28>
 8006874:	f004 0401 	and.w	r4, r4, #1
 8006878:	f1c4 0402 	rsb	r4, r4, #2
 800687c:	2900      	cmp	r1, #0
 800687e:	d159      	bne.n	8006934 <__ieee754_pow+0x17c>
 8006880:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006884:	d148      	bne.n	8006918 <__ieee754_pow+0x160>
 8006886:	4632      	mov	r2, r6
 8006888:	463b      	mov	r3, r7
 800688a:	4630      	mov	r0, r6
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 febb 	bl	8000608 <__aeabi_dmul>
 8006892:	e7ae      	b.n	80067f2 <__ieee754_pow+0x3a>
 8006894:	2900      	cmp	r1, #0
 8006896:	d14c      	bne.n	8006932 <__ieee754_pow+0x17a>
 8006898:	f1c2 0214 	rsb	r2, r2, #20
 800689c:	fa4a f402 	asr.w	r4, sl, r2
 80068a0:	fa04 f202 	lsl.w	r2, r4, r2
 80068a4:	4552      	cmp	r2, sl
 80068a6:	f040 8498 	bne.w	80071da <__ieee754_pow+0xa22>
 80068aa:	f004 0401 	and.w	r4, r4, #1
 80068ae:	f1c4 0402 	rsb	r4, r4, #2
 80068b2:	4a68      	ldr	r2, [pc, #416]	@ (8006a54 <__ieee754_pow+0x29c>)
 80068b4:	4592      	cmp	sl, r2
 80068b6:	d1e3      	bne.n	8006880 <__ieee754_pow+0xc8>
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	f280 8489 	bge.w	80071d2 <__ieee754_pow+0xa1a>
 80068c0:	4964      	ldr	r1, [pc, #400]	@ (8006a54 <__ieee754_pow+0x29c>)
 80068c2:	4632      	mov	r2, r6
 80068c4:	463b      	mov	r3, r7
 80068c6:	2000      	movs	r0, #0
 80068c8:	f7f9 ffc8 	bl	800085c <__aeabi_ddiv>
 80068cc:	e791      	b.n	80067f2 <__ieee754_pow+0x3a>
 80068ce:	2400      	movs	r4, #0
 80068d0:	bb81      	cbnz	r1, 8006934 <__ieee754_pow+0x17c>
 80068d2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a4c <__ieee754_pow+0x294>)
 80068d4:	4592      	cmp	sl, r2
 80068d6:	d1ec      	bne.n	80068b2 <__ieee754_pow+0xfa>
 80068d8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80068dc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80068e0:	431a      	orrs	r2, r3
 80068e2:	f000 846e 	beq.w	80071c2 <__ieee754_pow+0xa0a>
 80068e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a58 <__ieee754_pow+0x2a0>)
 80068e8:	429d      	cmp	r5, r3
 80068ea:	d908      	bls.n	80068fe <__ieee754_pow+0x146>
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	f280 846b 	bge.w	80071ca <__ieee754_pow+0xa12>
 80068f4:	2000      	movs	r0, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	e77b      	b.n	80067f2 <__ieee754_pow+0x3a>
 80068fa:	2402      	movs	r4, #2
 80068fc:	e7e8      	b.n	80068d0 <__ieee754_pow+0x118>
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	f6bf af72 	bge.w	80067f2 <__ieee754_pow+0x3a>
 800690e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006912:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006916:	e76c      	b.n	80067f2 <__ieee754_pow+0x3a>
 8006918:	4a50      	ldr	r2, [pc, #320]	@ (8006a5c <__ieee754_pow+0x2a4>)
 800691a:	4591      	cmp	r9, r2
 800691c:	d10a      	bne.n	8006934 <__ieee754_pow+0x17c>
 800691e:	f1b8 0f00 	cmp.w	r8, #0
 8006922:	db07      	blt.n	8006934 <__ieee754_pow+0x17c>
 8006924:	ec47 6b10 	vmov	d0, r6, r7
 8006928:	b011      	add	sp, #68	@ 0x44
 800692a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692e:	f001 b8af 	b.w	8007a90 <__ieee754_sqrt>
 8006932:	2400      	movs	r4, #0
 8006934:	ec47 6b10 	vmov	d0, r6, r7
 8006938:	9302      	str	r3, [sp, #8]
 800693a:	f000 fc87 	bl	800724c <fabs>
 800693e:	9b02      	ldr	r3, [sp, #8]
 8006940:	ec51 0b10 	vmov	r0, r1, d0
 8006944:	bb43      	cbnz	r3, 8006998 <__ieee754_pow+0x1e0>
 8006946:	4b43      	ldr	r3, [pc, #268]	@ (8006a54 <__ieee754_pow+0x29c>)
 8006948:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800694c:	429a      	cmp	r2, r3
 800694e:	d000      	beq.n	8006952 <__ieee754_pow+0x19a>
 8006950:	bb15      	cbnz	r5, 8006998 <__ieee754_pow+0x1e0>
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	da05      	bge.n	8006964 <__ieee754_pow+0x1ac>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	2000      	movs	r0, #0
 800695e:	493d      	ldr	r1, [pc, #244]	@ (8006a54 <__ieee754_pow+0x29c>)
 8006960:	f7f9 ff7c 	bl	800085c <__aeabi_ddiv>
 8006964:	f1b8 0f00 	cmp.w	r8, #0
 8006968:	f6bf af43 	bge.w	80067f2 <__ieee754_pow+0x3a>
 800696c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006970:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006974:	4325      	orrs	r5, r4
 8006976:	d108      	bne.n	800698a <__ieee754_pow+0x1d2>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	f7f9 fc8a 	bl	8000298 <__aeabi_dsub>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	e79e      	b.n	80068c8 <__ieee754_pow+0x110>
 800698a:	2c01      	cmp	r4, #1
 800698c:	f47f af31 	bne.w	80067f2 <__ieee754_pow+0x3a>
 8006990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006994:	4619      	mov	r1, r3
 8006996:	e72c      	b.n	80067f2 <__ieee754_pow+0x3a>
 8006998:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800699c:	3b01      	subs	r3, #1
 800699e:	ea53 0204 	orrs.w	r2, r3, r4
 80069a2:	d102      	bne.n	80069aa <__ieee754_pow+0x1f2>
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	e7e8      	b.n	800697c <__ieee754_pow+0x1c4>
 80069aa:	3c01      	subs	r4, #1
 80069ac:	431c      	orrs	r4, r3
 80069ae:	d016      	beq.n	80069de <__ieee754_pow+0x226>
 80069b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006a38 <__ieee754_pow+0x280>
 80069b4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80069b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069bc:	f240 8110 	bls.w	8006be0 <__ieee754_pow+0x428>
 80069c0:	4b27      	ldr	r3, [pc, #156]	@ (8006a60 <__ieee754_pow+0x2a8>)
 80069c2:	459a      	cmp	sl, r3
 80069c4:	4b24      	ldr	r3, [pc, #144]	@ (8006a58 <__ieee754_pow+0x2a0>)
 80069c6:	d916      	bls.n	80069f6 <__ieee754_pow+0x23e>
 80069c8:	429d      	cmp	r5, r3
 80069ca:	d80b      	bhi.n	80069e4 <__ieee754_pow+0x22c>
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	da0b      	bge.n	80069ea <__ieee754_pow+0x232>
 80069d2:	2000      	movs	r0, #0
 80069d4:	b011      	add	sp, #68	@ 0x44
 80069d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	f000 bfc5 	b.w	8007968 <__math_oflow>
 80069de:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8006a40 <__ieee754_pow+0x288>
 80069e2:	e7e7      	b.n	80069b4 <__ieee754_pow+0x1fc>
 80069e4:	f1b9 0f00 	cmp.w	r9, #0
 80069e8:	dcf3      	bgt.n	80069d2 <__ieee754_pow+0x21a>
 80069ea:	2000      	movs	r0, #0
 80069ec:	b011      	add	sp, #68	@ 0x44
 80069ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f2:	f000 bfb1 	b.w	8007958 <__math_uflow>
 80069f6:	429d      	cmp	r5, r3
 80069f8:	d20c      	bcs.n	8006a14 <__ieee754_pow+0x25c>
 80069fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2300      	movs	r3, #0
 8006a02:	f7fa f873 	bl	8000aec <__aeabi_dcmplt>
 8006a06:	3800      	subs	r0, #0
 8006a08:	bf18      	it	ne
 8006a0a:	2001      	movne	r0, #1
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	daec      	bge.n	80069ec <__ieee754_pow+0x234>
 8006a12:	e7df      	b.n	80069d4 <__ieee754_pow+0x21c>
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <__ieee754_pow+0x29c>)
 8006a16:	429d      	cmp	r5, r3
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	d922      	bls.n	8006a64 <__ieee754_pow+0x2ac>
 8006a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7fa f862 	bl	8000aec <__aeabi_dcmplt>
 8006a28:	3800      	subs	r0, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2001      	movne	r0, #1
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	dccf      	bgt.n	80069d4 <__ieee754_pow+0x21c>
 8006a34:	e7da      	b.n	80069ec <__ieee754_pow+0x234>
 8006a36:	bf00      	nop
 8006a38:	00000000 	.word	0x00000000
 8006a3c:	3ff00000 	.word	0x3ff00000
 8006a40:	00000000 	.word	0x00000000
 8006a44:	bff00000 	.word	0xbff00000
 8006a48:	fff00000 	.word	0xfff00000
 8006a4c:	7ff00000 	.word	0x7ff00000
 8006a50:	433fffff 	.word	0x433fffff
 8006a54:	3ff00000 	.word	0x3ff00000
 8006a58:	3fefffff 	.word	0x3fefffff
 8006a5c:	3fe00000 	.word	0x3fe00000
 8006a60:	43f00000 	.word	0x43f00000
 8006a64:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd0 <__ieee754_pow+0x418>)
 8006a66:	f7f9 fc17 	bl	8000298 <__aeabi_dsub>
 8006a6a:	a351      	add	r3, pc, #324	@ (adr r3, 8006bb0 <__ieee754_pow+0x3f8>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	4604      	mov	r4, r0
 8006a72:	460d      	mov	r5, r1
 8006a74:	f7f9 fdc8 	bl	8000608 <__aeabi_dmul>
 8006a78:	a34f      	add	r3, pc, #316	@ (adr r3, 8006bb8 <__ieee754_pow+0x400>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fdbf 	bl	8000608 <__aeabi_dmul>
 8006a8a:	4b52      	ldr	r3, [pc, #328]	@ (8006bd4 <__ieee754_pow+0x41c>)
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	468b      	mov	fp, r1
 8006a90:	2200      	movs	r2, #0
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fdb7 	bl	8000608 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	a148      	add	r1, pc, #288	@ (adr r1, 8006bc0 <__ieee754_pow+0x408>)
 8006aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa4:	f7f9 fbf8 	bl	8000298 <__aeabi_dsub>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	f7f9 fdac 	bl	8000608 <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	4948      	ldr	r1, [pc, #288]	@ (8006bd8 <__ieee754_pow+0x420>)
 8006ab8:	f7f9 fbee 	bl	8000298 <__aeabi_dsub>
 8006abc:	4622      	mov	r2, r4
 8006abe:	4680      	mov	r8, r0
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fd9e 	bl	8000608 <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7f9 fd98 	bl	8000608 <__aeabi_dmul>
 8006ad8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006bc8 <__ieee754_pow+0x410>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fd93 	bl	8000608 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	4659      	mov	r1, fp
 8006aea:	f7f9 fbd5 	bl	8000298 <__aeabi_dsub>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4680      	mov	r8, r0
 8006af4:	4689      	mov	r9, r1
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fbcf 	bl	800029c <__adddf3>
 8006afe:	2400      	movs	r4, #0
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	4620      	mov	r0, r4
 8006b06:	460d      	mov	r5, r1
 8006b08:	f7f9 fbc6 	bl	8000298 <__aeabi_dsub>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4640      	mov	r0, r8
 8006b12:	4649      	mov	r1, r9
 8006b14:	f7f9 fbc0 	bl	8000298 <__aeabi_dsub>
 8006b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006b28:	4606      	mov	r6, r0
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	465b      	mov	r3, fp
 8006b2e:	4652      	mov	r2, sl
 8006b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b34:	f7f9 fbb0 	bl	8000298 <__aeabi_dsub>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fd64 	bl	8000608 <__aeabi_dmul>
 8006b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 fd5c 	bl	8000608 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4640      	mov	r0, r8
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7f9 fba0 	bl	800029c <__adddf3>
 8006b5c:	465b      	mov	r3, fp
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460f      	mov	r7, r1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 fd4e 	bl	8000608 <__aeabi_dmul>
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4680      	mov	r8, r0
 8006b72:	4689      	mov	r9, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 fb90 	bl	800029c <__adddf3>
 8006b7c:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <__ieee754_pow+0x424>)
 8006b7e:	4299      	cmp	r1, r3
 8006b80:	4604      	mov	r4, r0
 8006b82:	460d      	mov	r5, r1
 8006b84:	468b      	mov	fp, r1
 8006b86:	f340 820b 	ble.w	8006fa0 <__ieee754_pow+0x7e8>
 8006b8a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006b8e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006b92:	4303      	orrs	r3, r0
 8006b94:	f000 81ea 	beq.w	8006f6c <__ieee754_pow+0x7b4>
 8006b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f7f9 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8006ba4:	3800      	subs	r0, #0
 8006ba6:	bf18      	it	ne
 8006ba8:	2001      	movne	r0, #1
 8006baa:	e713      	b.n	80069d4 <__ieee754_pow+0x21c>
 8006bac:	f3af 8000 	nop.w
 8006bb0:	60000000 	.word	0x60000000
 8006bb4:	3ff71547 	.word	0x3ff71547
 8006bb8:	f85ddf44 	.word	0xf85ddf44
 8006bbc:	3e54ae0b 	.word	0x3e54ae0b
 8006bc0:	55555555 	.word	0x55555555
 8006bc4:	3fd55555 	.word	0x3fd55555
 8006bc8:	652b82fe 	.word	0x652b82fe
 8006bcc:	3ff71547 	.word	0x3ff71547
 8006bd0:	3ff00000 	.word	0x3ff00000
 8006bd4:	3fd00000 	.word	0x3fd00000
 8006bd8:	3fe00000 	.word	0x3fe00000
 8006bdc:	408fffff 	.word	0x408fffff
 8006be0:	4bd5      	ldr	r3, [pc, #852]	@ (8006f38 <__ieee754_pow+0x780>)
 8006be2:	ea08 0303 	and.w	r3, r8, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	b92b      	cbnz	r3, 8006bf6 <__ieee754_pow+0x43e>
 8006bea:	4bd4      	ldr	r3, [pc, #848]	@ (8006f3c <__ieee754_pow+0x784>)
 8006bec:	f7f9 fd0c 	bl	8000608 <__aeabi_dmul>
 8006bf0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006bf4:	468b      	mov	fp, r1
 8006bf6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006bfa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006bfe:	4413      	add	r3, r2
 8006c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c02:	4bcf      	ldr	r3, [pc, #828]	@ (8006f40 <__ieee754_pow+0x788>)
 8006c04:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006c08:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006c0c:	459b      	cmp	fp, r3
 8006c0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c12:	dd08      	ble.n	8006c26 <__ieee754_pow+0x46e>
 8006c14:	4bcb      	ldr	r3, [pc, #812]	@ (8006f44 <__ieee754_pow+0x78c>)
 8006c16:	459b      	cmp	fp, r3
 8006c18:	f340 81a5 	ble.w	8006f66 <__ieee754_pow+0x7ae>
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c1e:	3301      	adds	r3, #1
 8006c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c22:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006c26:	f04f 0a00 	mov.w	sl, #0
 8006c2a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c30:	4bc5      	ldr	r3, [pc, #788]	@ (8006f48 <__ieee754_pow+0x790>)
 8006c32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c36:	ed93 7b00 	vldr	d7, [r3]
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	ec53 2b17 	vmov	r2, r3, d7
 8006c40:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c48:	f7f9 fb26 	bl	8000298 <__aeabi_dsub>
 8006c4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c50:	4606      	mov	r6, r0
 8006c52:	460f      	mov	r7, r1
 8006c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c58:	f7f9 fb20 	bl	800029c <__adddf3>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	2000      	movs	r0, #0
 8006c62:	49ba      	ldr	r1, [pc, #744]	@ (8006f4c <__ieee754_pow+0x794>)
 8006c64:	f7f9 fdfa 	bl	800085c <__aeabi_ddiv>
 8006c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fcc8 	bl	8000608 <__aeabi_dmul>
 8006c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006c80:	106d      	asrs	r5, r5, #1
 8006c82:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006c86:	f04f 0b00 	mov.w	fp, #0
 8006c8a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006c8e:	4661      	mov	r1, ip
 8006c90:	2200      	movs	r2, #0
 8006c92:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006c96:	4658      	mov	r0, fp
 8006c98:	46e1      	mov	r9, ip
 8006c9a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	f7f9 fcb1 	bl	8000608 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 faf3 	bl	8000298 <__aeabi_dsub>
 8006cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7f9 faeb 	bl	8000298 <__aeabi_dsub>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cca:	f7f9 fae5 	bl	8000298 <__aeabi_dsub>
 8006cce:	465a      	mov	r2, fp
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	f7f9 fc99 	bl	8000608 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	f7f9 fadb 	bl	8000298 <__aeabi_dsub>
 8006ce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ce6:	f7f9 fc8f 	bl	8000608 <__aeabi_dmul>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f7f9 fc87 	bl	8000608 <__aeabi_dmul>
 8006cfa:	a37d      	add	r3, pc, #500	@ (adr r3, 8006ef0 <__ieee754_pow+0x738>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	f7f9 fc80 	bl	8000608 <__aeabi_dmul>
 8006d08:	a37b      	add	r3, pc, #492	@ (adr r3, 8006ef8 <__ieee754_pow+0x740>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fac5 	bl	800029c <__adddf3>
 8006d12:	4622      	mov	r2, r4
 8006d14:	462b      	mov	r3, r5
 8006d16:	f7f9 fc77 	bl	8000608 <__aeabi_dmul>
 8006d1a:	a379      	add	r3, pc, #484	@ (adr r3, 8006f00 <__ieee754_pow+0x748>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f7f9 fabc 	bl	800029c <__adddf3>
 8006d24:	4622      	mov	r2, r4
 8006d26:	462b      	mov	r3, r5
 8006d28:	f7f9 fc6e 	bl	8000608 <__aeabi_dmul>
 8006d2c:	a376      	add	r3, pc, #472	@ (adr r3, 8006f08 <__ieee754_pow+0x750>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fab3 	bl	800029c <__adddf3>
 8006d36:	4622      	mov	r2, r4
 8006d38:	462b      	mov	r3, r5
 8006d3a:	f7f9 fc65 	bl	8000608 <__aeabi_dmul>
 8006d3e:	a374      	add	r3, pc, #464	@ (adr r3, 8006f10 <__ieee754_pow+0x758>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7f9 faaa 	bl	800029c <__adddf3>
 8006d48:	4622      	mov	r2, r4
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	f7f9 fc5c 	bl	8000608 <__aeabi_dmul>
 8006d50:	a371      	add	r3, pc, #452	@ (adr r3, 8006f18 <__ieee754_pow+0x760>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 faa1 	bl	800029c <__adddf3>
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	462b      	mov	r3, r5
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fc4f 	bl	8000608 <__aeabi_dmul>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fc49 	bl	8000608 <__aeabi_dmul>
 8006d76:	465a      	mov	r2, fp
 8006d78:	4604      	mov	r4, r0
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d82:	f7f9 fa8b 	bl	800029c <__adddf3>
 8006d86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d8a:	f7f9 fc3d 	bl	8000608 <__aeabi_dmul>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 fa83 	bl	800029c <__adddf3>
 8006d96:	465a      	mov	r2, fp
 8006d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	4658      	mov	r0, fp
 8006da0:	4649      	mov	r1, r9
 8006da2:	f7f9 fc31 	bl	8000608 <__aeabi_dmul>
 8006da6:	4b6a      	ldr	r3, [pc, #424]	@ (8006f50 <__ieee754_pow+0x798>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	4606      	mov	r6, r0
 8006dac:	460f      	mov	r7, r1
 8006dae:	f7f9 fa75 	bl	800029c <__adddf3>
 8006db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006db6:	f7f9 fa71 	bl	800029c <__adddf3>
 8006dba:	46d8      	mov	r8, fp
 8006dbc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	465a      	mov	r2, fp
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006dce:	f7f9 fc1b 	bl	8000608 <__aeabi_dmul>
 8006dd2:	465c      	mov	r4, fp
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	4689      	mov	r9, r1
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8006f50 <__ieee754_pow+0x798>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fa5a 	bl	8000298 <__aeabi_dsub>
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	f7f9 fa56 	bl	8000298 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006df4:	f7f9 fa50 	bl	8000298 <__aeabi_dsub>
 8006df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfc:	f7f9 fc04 	bl	8000608 <__aeabi_dmul>
 8006e00:	4622      	mov	r2, r4
 8006e02:	4606      	mov	r6, r0
 8006e04:	460f      	mov	r7, r1
 8006e06:	462b      	mov	r3, r5
 8006e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e0c:	f7f9 fbfc 	bl	8000608 <__aeabi_dmul>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4630      	mov	r0, r6
 8006e16:	4639      	mov	r1, r7
 8006e18:	f7f9 fa40 	bl	800029c <__adddf3>
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7f9 fa38 	bl	800029c <__adddf3>
 8006e2c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006e30:	a33b      	add	r3, pc, #236	@ (adr r3, 8006f20 <__ieee754_pow+0x768>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	4658      	mov	r0, fp
 8006e38:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	f7f9 fbe3 	bl	8000608 <__aeabi_dmul>
 8006e42:	465c      	mov	r4, fp
 8006e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7f9 fa22 	bl	8000298 <__aeabi_dsub>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4630      	mov	r0, r6
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	f7f9 fa1c 	bl	8000298 <__aeabi_dsub>
 8006e60:	a331      	add	r3, pc, #196	@ (adr r3, 8006f28 <__ieee754_pow+0x770>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fbcf 	bl	8000608 <__aeabi_dmul>
 8006e6a:	a331      	add	r3, pc, #196	@ (adr r3, 8006f30 <__ieee754_pow+0x778>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	4606      	mov	r6, r0
 8006e72:	460f      	mov	r7, r1
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 fbc6 	bl	8000608 <__aeabi_dmul>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4630      	mov	r0, r6
 8006e82:	4639      	mov	r1, r7
 8006e84:	f7f9 fa0a 	bl	800029c <__adddf3>
 8006e88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e8a:	4b32      	ldr	r3, [pc, #200]	@ (8006f54 <__ieee754_pow+0x79c>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 fa03 	bl	800029c <__adddf3>
 8006e96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e9c:	f7f9 fb4a 	bl	8000534 <__aeabi_i2d>
 8006ea0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8006f58 <__ieee754_pow+0x7a0>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eaa:	4606      	mov	r6, r0
 8006eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb6:	f7f9 f9f1 	bl	800029c <__adddf3>
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	f7f9 f9ed 	bl	800029c <__adddf3>
 8006ec2:	4632      	mov	r2, r6
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	f7f9 f9e9 	bl	800029c <__adddf3>
 8006eca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006ece:	4632      	mov	r2, r6
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	f7f9 f9df 	bl	8000298 <__aeabi_dsub>
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	f7f9 f9db 	bl	8000298 <__aeabi_dsub>
 8006ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ee6:	f7f9 f9d7 	bl	8000298 <__aeabi_dsub>
 8006eea:	465c      	mov	r4, fp
 8006eec:	e036      	b.n	8006f5c <__ieee754_pow+0x7a4>
 8006eee:	bf00      	nop
 8006ef0:	4a454eef 	.word	0x4a454eef
 8006ef4:	3fca7e28 	.word	0x3fca7e28
 8006ef8:	93c9db65 	.word	0x93c9db65
 8006efc:	3fcd864a 	.word	0x3fcd864a
 8006f00:	a91d4101 	.word	0xa91d4101
 8006f04:	3fd17460 	.word	0x3fd17460
 8006f08:	518f264d 	.word	0x518f264d
 8006f0c:	3fd55555 	.word	0x3fd55555
 8006f10:	db6fabff 	.word	0xdb6fabff
 8006f14:	3fdb6db6 	.word	0x3fdb6db6
 8006f18:	33333303 	.word	0x33333303
 8006f1c:	3fe33333 	.word	0x3fe33333
 8006f20:	e0000000 	.word	0xe0000000
 8006f24:	3feec709 	.word	0x3feec709
 8006f28:	dc3a03fd 	.word	0xdc3a03fd
 8006f2c:	3feec709 	.word	0x3feec709
 8006f30:	145b01f5 	.word	0x145b01f5
 8006f34:	be3e2fe0 	.word	0xbe3e2fe0
 8006f38:	7ff00000 	.word	0x7ff00000
 8006f3c:	43400000 	.word	0x43400000
 8006f40:	0003988e 	.word	0x0003988e
 8006f44:	000bb679 	.word	0x000bb679
 8006f48:	0800ac88 	.word	0x0800ac88
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40080000 	.word	0x40080000
 8006f54:	0800ac68 	.word	0x0800ac68
 8006f58:	0800ac78 	.word	0x0800ac78
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f64:	e5d6      	b.n	8006b14 <__ieee754_pow+0x35c>
 8006f66:	f04f 0a01 	mov.w	sl, #1
 8006f6a:	e65e      	b.n	8006c2a <__ieee754_pow+0x472>
 8006f6c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007244 <__ieee754_pow+0xa8c>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	f7f9 f991 	bl	800029c <__adddf3>
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f80:	464b      	mov	r3, r9
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 f987 	bl	8000298 <__aeabi_dsub>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f92:	f7f9 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f47f adfe 	bne.w	8006b98 <__ieee754_pow+0x3e0>
 8006f9c:	4ba2      	ldr	r3, [pc, #648]	@ (8007228 <__ieee754_pow+0xa70>)
 8006f9e:	e022      	b.n	8006fe6 <__ieee754_pow+0x82e>
 8006fa0:	4ca2      	ldr	r4, [pc, #648]	@ (800722c <__ieee754_pow+0xa74>)
 8006fa2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	d919      	bls.n	8006fde <__ieee754_pow+0x826>
 8006faa:	4ba1      	ldr	r3, [pc, #644]	@ (8007230 <__ieee754_pow+0xa78>)
 8006fac:	440b      	add	r3, r1
 8006fae:	4303      	orrs	r3, r0
 8006fb0:	d009      	beq.n	8006fc6 <__ieee754_pow+0x80e>
 8006fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f7f9 fd97 	bl	8000aec <__aeabi_dcmplt>
 8006fbe:	3800      	subs	r0, #0
 8006fc0:	bf18      	it	ne
 8006fc2:	2001      	movne	r0, #1
 8006fc4:	e512      	b.n	80069ec <__ieee754_pow+0x234>
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	464b      	mov	r3, r9
 8006fca:	f7f9 f965 	bl	8000298 <__aeabi_dsub>
 8006fce:	4632      	mov	r2, r6
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	f7f9 fd9f 	bl	8000b14 <__aeabi_dcmpge>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d1eb      	bne.n	8006fb2 <__ieee754_pow+0x7fa>
 8006fda:	4b96      	ldr	r3, [pc, #600]	@ (8007234 <__ieee754_pow+0xa7c>)
 8006fdc:	e003      	b.n	8006fe6 <__ieee754_pow+0x82e>
 8006fde:	4a96      	ldr	r2, [pc, #600]	@ (8007238 <__ieee754_pow+0xa80>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	f240 80e7 	bls.w	80071b4 <__ieee754_pow+0x9fc>
 8006fe6:	151b      	asrs	r3, r3, #20
 8006fe8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006fec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8006ff0:	fa4a fa03 	asr.w	sl, sl, r3
 8006ff4:	44da      	add	sl, fp
 8006ff6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ffa:	4890      	ldr	r0, [pc, #576]	@ (800723c <__ieee754_pow+0xa84>)
 8006ffc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007000:	4108      	asrs	r0, r1
 8007002:	ea00 030a 	and.w	r3, r0, sl
 8007006:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800700a:	f1c1 0114 	rsb	r1, r1, #20
 800700e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007012:	fa4a fa01 	asr.w	sl, sl, r1
 8007016:	f1bb 0f00 	cmp.w	fp, #0
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	bfb8      	it	lt
 8007024:	f1ca 0a00 	rsblt	sl, sl, #0
 8007028:	f7f9 f936 	bl	8000298 <__aeabi_dsub>
 800702c:	4680      	mov	r8, r0
 800702e:	4689      	mov	r9, r1
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f930 	bl	800029c <__adddf3>
 800703c:	2400      	movs	r4, #0
 800703e:	a36a      	add	r3, pc, #424	@ (adr r3, 80071e8 <__ieee754_pow+0xa30>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	4620      	mov	r0, r4
 8007046:	460d      	mov	r5, r1
 8007048:	f7f9 fade 	bl	8000608 <__aeabi_dmul>
 800704c:	4642      	mov	r2, r8
 800704e:	e9cd 0100 	strd	r0, r1, [sp]
 8007052:	464b      	mov	r3, r9
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 f91e 	bl	8000298 <__aeabi_dsub>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 f918 	bl	8000298 <__aeabi_dsub>
 8007068:	a361      	add	r3, pc, #388	@ (adr r3, 80071f0 <__ieee754_pow+0xa38>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 facb 	bl	8000608 <__aeabi_dmul>
 8007072:	a361      	add	r3, pc, #388	@ (adr r3, 80071f8 <__ieee754_pow+0xa40>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	4680      	mov	r8, r0
 800707a:	4689      	mov	r9, r1
 800707c:	4620      	mov	r0, r4
 800707e:	4629      	mov	r1, r5
 8007080:	f7f9 fac2 	bl	8000608 <__aeabi_dmul>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f906 	bl	800029c <__adddf3>
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800709c:	f7f9 f8fe 	bl	800029c <__adddf3>
 80070a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070a4:	4680      	mov	r8, r0
 80070a6:	4689      	mov	r9, r1
 80070a8:	f7f9 f8f6 	bl	8000298 <__aeabi_dsub>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4620      	mov	r0, r4
 80070b2:	4629      	mov	r1, r5
 80070b4:	f7f9 f8f0 	bl	8000298 <__aeabi_dsub>
 80070b8:	4642      	mov	r2, r8
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	464b      	mov	r3, r9
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	a34d      	add	r3, pc, #308	@ (adr r3, 8007200 <__ieee754_pow+0xa48>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	f7f9 fa99 	bl	8000608 <__aeabi_dmul>
 80070d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8007208 <__ieee754_pow+0xa50>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 f8dc 	bl	8000298 <__aeabi_dsub>
 80070e0:	4622      	mov	r2, r4
 80070e2:	462b      	mov	r3, r5
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	a349      	add	r3, pc, #292	@ (adr r3, 8007210 <__ieee754_pow+0xa58>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f7f9 f8d5 	bl	800029c <__adddf3>
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	f7f9 fa87 	bl	8000608 <__aeabi_dmul>
 80070fa:	a347      	add	r3, pc, #284	@ (adr r3, 8007218 <__ieee754_pow+0xa60>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f8ca 	bl	8000298 <__aeabi_dsub>
 8007104:	4622      	mov	r2, r4
 8007106:	462b      	mov	r3, r5
 8007108:	f7f9 fa7e 	bl	8000608 <__aeabi_dmul>
 800710c:	a344      	add	r3, pc, #272	@ (adr r3, 8007220 <__ieee754_pow+0xa68>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f8c3 	bl	800029c <__adddf3>
 8007116:	4622      	mov	r2, r4
 8007118:	462b      	mov	r3, r5
 800711a:	f7f9 fa75 	bl	8000608 <__aeabi_dmul>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	4604      	mov	r4, r0
 800712c:	460d      	mov	r5, r1
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fa67 	bl	8000608 <__aeabi_dmul>
 800713a:	2200      	movs	r2, #0
 800713c:	e9cd 0100 	strd	r0, r1, [sp]
 8007140:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 f8a6 	bl	8000298 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007154:	f7f9 fb82 	bl	800085c <__aeabi_ddiv>
 8007158:	4632      	mov	r2, r6
 800715a:	4604      	mov	r4, r0
 800715c:	460d      	mov	r5, r1
 800715e:	463b      	mov	r3, r7
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fa50 	bl	8000608 <__aeabi_dmul>
 8007168:	4632      	mov	r2, r6
 800716a:	463b      	mov	r3, r7
 800716c:	f7f9 f896 	bl	800029c <__adddf3>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f9 f88e 	bl	8000298 <__aeabi_dsub>
 800717c:	4642      	mov	r2, r8
 800717e:	464b      	mov	r3, r9
 8007180:	f7f9 f88a 	bl	8000298 <__aeabi_dsub>
 8007184:	460b      	mov	r3, r1
 8007186:	4602      	mov	r2, r0
 8007188:	492d      	ldr	r1, [pc, #180]	@ (8007240 <__ieee754_pow+0xa88>)
 800718a:	2000      	movs	r0, #0
 800718c:	f7f9 f884 	bl	8000298 <__aeabi_dsub>
 8007190:	ec41 0b10 	vmov	d0, r0, r1
 8007194:	ee10 3a90 	vmov	r3, s1
 8007198:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800719c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a0:	da0b      	bge.n	80071ba <__ieee754_pow+0xa02>
 80071a2:	4650      	mov	r0, sl
 80071a4:	f000 fb30 	bl	8007808 <scalbn>
 80071a8:	ec51 0b10 	vmov	r0, r1, d0
 80071ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071b0:	f7ff bb6d 	b.w	800688e <__ieee754_pow+0xd6>
 80071b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80071b8:	e73a      	b.n	8007030 <__ieee754_pow+0x878>
 80071ba:	ec51 0b10 	vmov	r0, r1, d0
 80071be:	4619      	mov	r1, r3
 80071c0:	e7f4      	b.n	80071ac <__ieee754_pow+0x9f4>
 80071c2:	491f      	ldr	r1, [pc, #124]	@ (8007240 <__ieee754_pow+0xa88>)
 80071c4:	2000      	movs	r0, #0
 80071c6:	f7ff bb14 	b.w	80067f2 <__ieee754_pow+0x3a>
 80071ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ce:	f7ff bb10 	b.w	80067f2 <__ieee754_pow+0x3a>
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7ff bb0c 	b.w	80067f2 <__ieee754_pow+0x3a>
 80071da:	460c      	mov	r4, r1
 80071dc:	f7ff bb69 	b.w	80068b2 <__ieee754_pow+0xfa>
 80071e0:	2400      	movs	r4, #0
 80071e2:	f7ff bb4b 	b.w	800687c <__ieee754_pow+0xc4>
 80071e6:	bf00      	nop
 80071e8:	00000000 	.word	0x00000000
 80071ec:	3fe62e43 	.word	0x3fe62e43
 80071f0:	fefa39ef 	.word	0xfefa39ef
 80071f4:	3fe62e42 	.word	0x3fe62e42
 80071f8:	0ca86c39 	.word	0x0ca86c39
 80071fc:	be205c61 	.word	0xbe205c61
 8007200:	72bea4d0 	.word	0x72bea4d0
 8007204:	3e663769 	.word	0x3e663769
 8007208:	c5d26bf1 	.word	0xc5d26bf1
 800720c:	3ebbbd41 	.word	0x3ebbbd41
 8007210:	af25de2c 	.word	0xaf25de2c
 8007214:	3f11566a 	.word	0x3f11566a
 8007218:	16bebd93 	.word	0x16bebd93
 800721c:	3f66c16c 	.word	0x3f66c16c
 8007220:	5555553e 	.word	0x5555553e
 8007224:	3fc55555 	.word	0x3fc55555
 8007228:	40900000 	.word	0x40900000
 800722c:	4090cbff 	.word	0x4090cbff
 8007230:	3f6f3400 	.word	0x3f6f3400
 8007234:	4090cc00 	.word	0x4090cc00
 8007238:	3fe00000 	.word	0x3fe00000
 800723c:	fff00000 	.word	0xfff00000
 8007240:	3ff00000 	.word	0x3ff00000
 8007244:	652b82fe 	.word	0x652b82fe
 8007248:	3c971547 	.word	0x3c971547

0800724c <fabs>:
 800724c:	ec51 0b10 	vmov	r0, r1, d0
 8007250:	4602      	mov	r2, r0
 8007252:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007256:	ec43 2b10 	vmov	d0, r2, r3
 800725a:	4770      	bx	lr

0800725c <__ieee754_powf>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	ee10 4a90 	vmov	r4, s1
 8007264:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007268:	ed2d 8b02 	vpush	{d8}
 800726c:	ee10 6a10 	vmov	r6, s0
 8007270:	eeb0 8a40 	vmov.f32	s16, s0
 8007274:	eef0 8a60 	vmov.f32	s17, s1
 8007278:	d10c      	bne.n	8007294 <__ieee754_powf+0x38>
 800727a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800727e:	0076      	lsls	r6, r6, #1
 8007280:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007284:	f240 8274 	bls.w	8007770 <__ieee754_powf+0x514>
 8007288:	ee38 0a28 	vadd.f32	s0, s16, s17
 800728c:	ecbd 8b02 	vpop	{d8}
 8007290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007294:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007298:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800729c:	d802      	bhi.n	80072a4 <__ieee754_powf+0x48>
 800729e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80072a2:	d908      	bls.n	80072b6 <__ieee754_powf+0x5a>
 80072a4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80072a8:	d1ee      	bne.n	8007288 <__ieee754_powf+0x2c>
 80072aa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80072ae:	0064      	lsls	r4, r4, #1
 80072b0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80072b4:	e7e6      	b.n	8007284 <__ieee754_powf+0x28>
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	da1f      	bge.n	80072fa <__ieee754_powf+0x9e>
 80072ba:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80072be:	f080 8260 	bcs.w	8007782 <__ieee754_powf+0x526>
 80072c2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80072c6:	d32f      	bcc.n	8007328 <__ieee754_powf+0xcc>
 80072c8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80072cc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80072d0:	fa49 f503 	asr.w	r5, r9, r3
 80072d4:	fa05 f303 	lsl.w	r3, r5, r3
 80072d8:	454b      	cmp	r3, r9
 80072da:	d123      	bne.n	8007324 <__ieee754_powf+0xc8>
 80072dc:	f005 0501 	and.w	r5, r5, #1
 80072e0:	f1c5 0502 	rsb	r5, r5, #2
 80072e4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80072e8:	d11f      	bne.n	800732a <__ieee754_powf+0xce>
 80072ea:	2c00      	cmp	r4, #0
 80072ec:	f280 8246 	bge.w	800777c <__ieee754_powf+0x520>
 80072f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80072f4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80072f8:	e7c8      	b.n	800728c <__ieee754_powf+0x30>
 80072fa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80072fe:	d111      	bne.n	8007324 <__ieee754_powf+0xc8>
 8007300:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007304:	f000 8234 	beq.w	8007770 <__ieee754_powf+0x514>
 8007308:	d906      	bls.n	8007318 <__ieee754_powf+0xbc>
 800730a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8007620 <__ieee754_powf+0x3c4>
 800730e:	2c00      	cmp	r4, #0
 8007310:	bfa8      	it	ge
 8007312:	eeb0 0a68 	vmovge.f32	s0, s17
 8007316:	e7b9      	b.n	800728c <__ieee754_powf+0x30>
 8007318:	2c00      	cmp	r4, #0
 800731a:	f280 822c 	bge.w	8007776 <__ieee754_powf+0x51a>
 800731e:	eeb1 0a68 	vneg.f32	s0, s17
 8007322:	e7b3      	b.n	800728c <__ieee754_powf+0x30>
 8007324:	2500      	movs	r5, #0
 8007326:	e7dd      	b.n	80072e4 <__ieee754_powf+0x88>
 8007328:	2500      	movs	r5, #0
 800732a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800732e:	d102      	bne.n	8007336 <__ieee754_powf+0xda>
 8007330:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007334:	e7aa      	b.n	800728c <__ieee754_powf+0x30>
 8007336:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800733a:	f040 8227 	bne.w	800778c <__ieee754_powf+0x530>
 800733e:	2e00      	cmp	r6, #0
 8007340:	f2c0 8224 	blt.w	800778c <__ieee754_powf+0x530>
 8007344:	eeb0 0a48 	vmov.f32	s0, s16
 8007348:	ecbd 8b02 	vpop	{d8}
 800734c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	f000 bc74 	b.w	8007c3c <__ieee754_sqrtf>
 8007354:	2d01      	cmp	r5, #1
 8007356:	d199      	bne.n	800728c <__ieee754_powf+0x30>
 8007358:	eeb1 0a40 	vneg.f32	s0, s0
 800735c:	e796      	b.n	800728c <__ieee754_powf+0x30>
 800735e:	0ff0      	lsrs	r0, r6, #31
 8007360:	3801      	subs	r0, #1
 8007362:	ea55 0300 	orrs.w	r3, r5, r0
 8007366:	d104      	bne.n	8007372 <__ieee754_powf+0x116>
 8007368:	ee38 8a48 	vsub.f32	s16, s16, s16
 800736c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007370:	e78c      	b.n	800728c <__ieee754_powf+0x30>
 8007372:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8007376:	d96d      	bls.n	8007454 <__ieee754_powf+0x1f8>
 8007378:	4baa      	ldr	r3, [pc, #680]	@ (8007624 <__ieee754_powf+0x3c8>)
 800737a:	4598      	cmp	r8, r3
 800737c:	d808      	bhi.n	8007390 <__ieee754_powf+0x134>
 800737e:	2c00      	cmp	r4, #0
 8007380:	da0b      	bge.n	800739a <__ieee754_powf+0x13e>
 8007382:	2000      	movs	r0, #0
 8007384:	ecbd 8b02 	vpop	{d8}
 8007388:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	f000 bb7a 	b.w	8007a84 <__math_oflowf>
 8007390:	4ba5      	ldr	r3, [pc, #660]	@ (8007628 <__ieee754_powf+0x3cc>)
 8007392:	4598      	cmp	r8, r3
 8007394:	d908      	bls.n	80073a8 <__ieee754_powf+0x14c>
 8007396:	2c00      	cmp	r4, #0
 8007398:	dcf3      	bgt.n	8007382 <__ieee754_powf+0x126>
 800739a:	2000      	movs	r0, #0
 800739c:	ecbd 8b02 	vpop	{d8}
 80073a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	f000 bb68 	b.w	8007a78 <__math_uflowf>
 80073a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80073ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80073b0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800762c <__ieee754_powf+0x3d0>
 80073b4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80073b8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80073bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80073c0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80073c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80073c8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8007630 <__ieee754_powf+0x3d4>
 80073cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073d0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8007634 <__ieee754_powf+0x3d8>
 80073d4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80073d8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007638 <__ieee754_powf+0x3dc>
 80073dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80073e0:	eeb0 7a67 	vmov.f32	s14, s15
 80073e4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80073e8:	ee17 3a10 	vmov	r3, s14
 80073ec:	f36f 030b 	bfc	r3, #0, #12
 80073f0:	ee07 3a10 	vmov	s14, r3
 80073f4:	eeb0 6a47 	vmov.f32	s12, s14
 80073f8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80073fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007400:	3d01      	subs	r5, #1
 8007402:	4305      	orrs	r5, r0
 8007404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007408:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800740c:	f36f 040b 	bfc	r4, #0, #12
 8007410:	bf18      	it	ne
 8007412:	eeb0 8a66 	vmovne.f32	s16, s13
 8007416:	ee06 4a90 	vmov	s13, r4
 800741a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800741e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8007422:	ee67 7a26 	vmul.f32	s15, s14, s13
 8007426:	eee6 0a07 	vfma.f32	s1, s12, s14
 800742a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800742e:	ee17 1a10 	vmov	r1, s14
 8007432:	2900      	cmp	r1, #0
 8007434:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007438:	f340 80dd 	ble.w	80075f6 <__ieee754_powf+0x39a>
 800743c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007440:	f240 80ca 	bls.w	80075d8 <__ieee754_powf+0x37c>
 8007444:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	bf4c      	ite	mi
 800744e:	2001      	movmi	r0, #1
 8007450:	2000      	movpl	r0, #0
 8007452:	e797      	b.n	8007384 <__ieee754_powf+0x128>
 8007454:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007458:	bf01      	itttt	eq
 800745a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800763c <__ieee754_powf+0x3e0>
 800745e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007462:	f06f 0317 	mvneq.w	r3, #23
 8007466:	ee17 7a90 	vmoveq	r7, s15
 800746a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800746e:	bf18      	it	ne
 8007470:	2300      	movne	r3, #0
 8007472:	3a7f      	subs	r2, #127	@ 0x7f
 8007474:	441a      	add	r2, r3
 8007476:	4b72      	ldr	r3, [pc, #456]	@ (8007640 <__ieee754_powf+0x3e4>)
 8007478:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800747c:	429f      	cmp	r7, r3
 800747e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007482:	dd06      	ble.n	8007492 <__ieee754_powf+0x236>
 8007484:	4b6f      	ldr	r3, [pc, #444]	@ (8007644 <__ieee754_powf+0x3e8>)
 8007486:	429f      	cmp	r7, r3
 8007488:	f340 80a4 	ble.w	80075d4 <__ieee754_powf+0x378>
 800748c:	3201      	adds	r2, #1
 800748e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007492:	2600      	movs	r6, #0
 8007494:	4b6c      	ldr	r3, [pc, #432]	@ (8007648 <__ieee754_powf+0x3ec>)
 8007496:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800749a:	ee07 1a10 	vmov	s14, r1
 800749e:	edd3 5a00 	vldr	s11, [r3]
 80074a2:	4b6a      	ldr	r3, [pc, #424]	@ (800764c <__ieee754_powf+0x3f0>)
 80074a4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80074a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80074b0:	1049      	asrs	r1, r1, #1
 80074b2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80074b6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80074ba:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80074be:	ee37 6a65 	vsub.f32	s12, s14, s11
 80074c2:	ee07 1a90 	vmov	s15, r1
 80074c6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80074ca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80074ce:	ee15 7a10 	vmov	r7, s10
 80074d2:	401f      	ands	r7, r3
 80074d4:	ee06 7a90 	vmov	s13, r7
 80074d8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80074dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80074e0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80074e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80074e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007650 <__ieee754_powf+0x3f4>
 80074ec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007654 <__ieee754_powf+0x3f8>
 80074f0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80074f4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007658 <__ieee754_powf+0x3fc>
 80074f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80074fc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800762c <__ieee754_powf+0x3d0>
 8007500:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007504:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800765c <__ieee754_powf+0x400>
 8007508:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800750c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007660 <__ieee754_powf+0x404>
 8007510:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007514:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007518:	ee35 7a26 	vadd.f32	s14, s10, s13
 800751c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007520:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007524:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007528:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800752c:	eef0 5a67 	vmov.f32	s11, s15
 8007530:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007534:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007538:	ee15 1a90 	vmov	r1, s11
 800753c:	4019      	ands	r1, r3
 800753e:	ee05 1a90 	vmov	s11, r1
 8007542:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007546:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800754a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007552:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007556:	eeb0 6a67 	vmov.f32	s12, s15
 800755a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800755e:	ee16 1a10 	vmov	r1, s12
 8007562:	4019      	ands	r1, r3
 8007564:	ee06 1a10 	vmov	s12, r1
 8007568:	eeb0 7a46 	vmov.f32	s14, s12
 800756c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007570:	493c      	ldr	r1, [pc, #240]	@ (8007664 <__ieee754_powf+0x408>)
 8007572:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800757a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007668 <__ieee754_powf+0x40c>
 800757e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800766c <__ieee754_powf+0x410>
 8007582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007586:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007670 <__ieee754_powf+0x414>
 800758a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800758e:	ed91 7a00 	vldr	s14, [r1]
 8007592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007596:	ee07 2a10 	vmov	s14, r2
 800759a:	4a36      	ldr	r2, [pc, #216]	@ (8007674 <__ieee754_powf+0x418>)
 800759c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075a0:	eeb0 7a67 	vmov.f32	s14, s15
 80075a4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80075a8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80075ac:	ed92 5a00 	vldr	s10, [r2]
 80075b0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80075b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80075b8:	ee17 2a10 	vmov	r2, s14
 80075bc:	401a      	ands	r2, r3
 80075be:	ee07 2a10 	vmov	s14, r2
 80075c2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80075c6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80075ca:	eee6 6a65 	vfms.f32	s13, s12, s11
 80075ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075d2:	e715      	b.n	8007400 <__ieee754_powf+0x1a4>
 80075d4:	2601      	movs	r6, #1
 80075d6:	e75d      	b.n	8007494 <__ieee754_powf+0x238>
 80075d8:	d152      	bne.n	8007680 <__ieee754_powf+0x424>
 80075da:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007678 <__ieee754_powf+0x41c>
 80075de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075e2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80075e6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	f73f af29 	bgt.w	8007444 <__ieee754_powf+0x1e8>
 80075f2:	2386      	movs	r3, #134	@ 0x86
 80075f4:	e048      	b.n	8007688 <__ieee754_powf+0x42c>
 80075f6:	4a21      	ldr	r2, [pc, #132]	@ (800767c <__ieee754_powf+0x420>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d907      	bls.n	800760c <__ieee754_powf+0x3b0>
 80075fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007604:	bf4c      	ite	mi
 8007606:	2001      	movmi	r0, #1
 8007608:	2000      	movpl	r0, #0
 800760a:	e6c7      	b.n	800739c <__ieee754_powf+0x140>
 800760c:	d138      	bne.n	8007680 <__ieee754_powf+0x424>
 800760e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007612:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761a:	dbea      	blt.n	80075f2 <__ieee754_powf+0x396>
 800761c:	e7ee      	b.n	80075fc <__ieee754_powf+0x3a0>
 800761e:	bf00      	nop
 8007620:	00000000 	.word	0x00000000
 8007624:	3f7ffff3 	.word	0x3f7ffff3
 8007628:	3f800007 	.word	0x3f800007
 800762c:	3eaaaaab 	.word	0x3eaaaaab
 8007630:	3fb8aa00 	.word	0x3fb8aa00
 8007634:	3fb8aa3b 	.word	0x3fb8aa3b
 8007638:	36eca570 	.word	0x36eca570
 800763c:	4b800000 	.word	0x4b800000
 8007640:	001cc471 	.word	0x001cc471
 8007644:	005db3d6 	.word	0x005db3d6
 8007648:	0800aca8 	.word	0x0800aca8
 800764c:	fffff000 	.word	0xfffff000
 8007650:	3e6c3255 	.word	0x3e6c3255
 8007654:	3e53f142 	.word	0x3e53f142
 8007658:	3e8ba305 	.word	0x3e8ba305
 800765c:	3edb6db7 	.word	0x3edb6db7
 8007660:	3f19999a 	.word	0x3f19999a
 8007664:	0800ac98 	.word	0x0800ac98
 8007668:	3f76384f 	.word	0x3f76384f
 800766c:	3f763800 	.word	0x3f763800
 8007670:	369dc3a0 	.word	0x369dc3a0
 8007674:	0800aca0 	.word	0x0800aca0
 8007678:	3338aa3c 	.word	0x3338aa3c
 800767c:	43160000 	.word	0x43160000
 8007680:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007684:	d96f      	bls.n	8007766 <__ieee754_powf+0x50a>
 8007686:	15db      	asrs	r3, r3, #23
 8007688:	3b7e      	subs	r3, #126	@ 0x7e
 800768a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800768e:	4118      	asrs	r0, r3
 8007690:	4408      	add	r0, r1
 8007692:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007696:	4a4e      	ldr	r2, [pc, #312]	@ (80077d0 <__ieee754_powf+0x574>)
 8007698:	3b7f      	subs	r3, #127	@ 0x7f
 800769a:	411a      	asrs	r2, r3
 800769c:	4002      	ands	r2, r0
 800769e:	ee07 2a10 	vmov	s14, r2
 80076a2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80076a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80076aa:	f1c3 0317 	rsb	r3, r3, #23
 80076ae:	4118      	asrs	r0, r3
 80076b0:	2900      	cmp	r1, #0
 80076b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076b6:	bfb8      	it	lt
 80076b8:	4240      	neglt	r0, r0
 80076ba:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80076be:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80077d4 <__ieee754_powf+0x578>
 80076c2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80077d8 <__ieee754_powf+0x57c>
 80076c6:	ee16 3a90 	vmov	r3, s13
 80076ca:	f36f 030b 	bfc	r3, #0, #12
 80076ce:	ee06 3a90 	vmov	s13, r3
 80076d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80076da:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80076de:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80077dc <__ieee754_powf+0x580>
 80076e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076e6:	eee0 7a87 	vfma.f32	s15, s1, s14
 80076ea:	eeb0 7a67 	vmov.f32	s14, s15
 80076ee:	eea6 7a86 	vfma.f32	s14, s13, s12
 80076f2:	eef0 5a47 	vmov.f32	s11, s14
 80076f6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80076fa:	ee67 6a07 	vmul.f32	s13, s14, s14
 80076fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007702:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80077e0 <__ieee754_powf+0x584>
 8007706:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80077e4 <__ieee754_powf+0x588>
 800770a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800770e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80077e8 <__ieee754_powf+0x58c>
 8007712:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007716:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80077ec <__ieee754_powf+0x590>
 800771a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800771e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077f0 <__ieee754_powf+0x594>
 8007722:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007726:	eeb0 6a47 	vmov.f32	s12, s14
 800772a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800772e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007732:	ee67 5a06 	vmul.f32	s11, s14, s12
 8007736:	ee36 6a66 	vsub.f32	s12, s12, s13
 800773a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800773e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007742:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800774a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800774e:	ee10 3a10 	vmov	r3, s0
 8007752:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800775a:	da06      	bge.n	800776a <__ieee754_powf+0x50e>
 800775c:	f000 f90c 	bl	8007978 <scalbnf>
 8007760:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007764:	e592      	b.n	800728c <__ieee754_powf+0x30>
 8007766:	2000      	movs	r0, #0
 8007768:	e7a7      	b.n	80076ba <__ieee754_powf+0x45e>
 800776a:	ee00 3a10 	vmov	s0, r3
 800776e:	e7f7      	b.n	8007760 <__ieee754_powf+0x504>
 8007770:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007774:	e58a      	b.n	800728c <__ieee754_powf+0x30>
 8007776:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80077f4 <__ieee754_powf+0x598>
 800777a:	e587      	b.n	800728c <__ieee754_powf+0x30>
 800777c:	eeb0 0a48 	vmov.f32	s0, s16
 8007780:	e584      	b.n	800728c <__ieee754_powf+0x30>
 8007782:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007786:	f43f adbb 	beq.w	8007300 <__ieee754_powf+0xa4>
 800778a:	2502      	movs	r5, #2
 800778c:	eeb0 0a48 	vmov.f32	s0, s16
 8007790:	f000 f832 	bl	80077f8 <fabsf>
 8007794:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007798:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800779c:	4647      	mov	r7, r8
 800779e:	d003      	beq.n	80077a8 <__ieee754_powf+0x54c>
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	f47f addb 	bne.w	800735e <__ieee754_powf+0x102>
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	bfbc      	itt	lt
 80077ac:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80077b0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	f6bf ad69 	bge.w	800728c <__ieee754_powf+0x30>
 80077ba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80077be:	ea58 0805 	orrs.w	r8, r8, r5
 80077c2:	f47f adc7 	bne.w	8007354 <__ieee754_powf+0xf8>
 80077c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80077ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80077ce:	e55d      	b.n	800728c <__ieee754_powf+0x30>
 80077d0:	ff800000 	.word	0xff800000
 80077d4:	3f317218 	.word	0x3f317218
 80077d8:	3f317200 	.word	0x3f317200
 80077dc:	35bfbe8c 	.word	0x35bfbe8c
 80077e0:	b5ddea0e 	.word	0xb5ddea0e
 80077e4:	3331bb4c 	.word	0x3331bb4c
 80077e8:	388ab355 	.word	0x388ab355
 80077ec:	bb360b61 	.word	0xbb360b61
 80077f0:	3e2aaaab 	.word	0x3e2aaaab
 80077f4:	00000000 	.word	0x00000000

080077f8 <fabsf>:
 80077f8:	ee10 3a10 	vmov	r3, s0
 80077fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007800:	ee00 3a10 	vmov	s0, r3
 8007804:	4770      	bx	lr
	...

08007808 <scalbn>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	ec55 4b10 	vmov	r4, r5, d0
 800780e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007812:	4606      	mov	r6, r0
 8007814:	462b      	mov	r3, r5
 8007816:	b991      	cbnz	r1, 800783e <scalbn+0x36>
 8007818:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800781c:	4323      	orrs	r3, r4
 800781e:	d03b      	beq.n	8007898 <scalbn+0x90>
 8007820:	4b33      	ldr	r3, [pc, #204]	@ (80078f0 <scalbn+0xe8>)
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	2200      	movs	r2, #0
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	4b31      	ldr	r3, [pc, #196]	@ (80078f4 <scalbn+0xec>)
 800782e:	429e      	cmp	r6, r3
 8007830:	4604      	mov	r4, r0
 8007832:	460d      	mov	r5, r1
 8007834:	da0f      	bge.n	8007856 <scalbn+0x4e>
 8007836:	a326      	add	r3, pc, #152	@ (adr r3, 80078d0 <scalbn+0xc8>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	e01e      	b.n	800787c <scalbn+0x74>
 800783e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007842:	4291      	cmp	r1, r2
 8007844:	d10b      	bne.n	800785e <scalbn+0x56>
 8007846:	4622      	mov	r2, r4
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	f7f8 fd26 	bl	800029c <__adddf3>
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	e020      	b.n	8007898 <scalbn+0x90>
 8007856:	460b      	mov	r3, r1
 8007858:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800785c:	3936      	subs	r1, #54	@ 0x36
 800785e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007862:	4296      	cmp	r6, r2
 8007864:	dd0d      	ble.n	8007882 <scalbn+0x7a>
 8007866:	2d00      	cmp	r5, #0
 8007868:	a11b      	add	r1, pc, #108	@ (adr r1, 80078d8 <scalbn+0xd0>)
 800786a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786e:	da02      	bge.n	8007876 <scalbn+0x6e>
 8007870:	a11b      	add	r1, pc, #108	@ (adr r1, 80078e0 <scalbn+0xd8>)
 8007872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007876:	a318      	add	r3, pc, #96	@ (adr r3, 80078d8 <scalbn+0xd0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 fec4 	bl	8000608 <__aeabi_dmul>
 8007880:	e7e6      	b.n	8007850 <scalbn+0x48>
 8007882:	1872      	adds	r2, r6, r1
 8007884:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007888:	428a      	cmp	r2, r1
 800788a:	dcec      	bgt.n	8007866 <scalbn+0x5e>
 800788c:	2a00      	cmp	r2, #0
 800788e:	dd06      	ble.n	800789e <scalbn+0x96>
 8007890:	f36f 531e 	bfc	r3, #20, #11
 8007894:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007898:	ec45 4b10 	vmov	d0, r4, r5
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80078a2:	da08      	bge.n	80078b6 <scalbn+0xae>
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80078d0 <scalbn+0xc8>)
 80078a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ac:	dac3      	bge.n	8007836 <scalbn+0x2e>
 80078ae:	a10e      	add	r1, pc, #56	@ (adr r1, 80078e8 <scalbn+0xe0>)
 80078b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b4:	e7bf      	b.n	8007836 <scalbn+0x2e>
 80078b6:	3236      	adds	r2, #54	@ 0x36
 80078b8:	f36f 531e 	bfc	r3, #20, #11
 80078bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80078c0:	4620      	mov	r0, r4
 80078c2:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <scalbn+0xf0>)
 80078c4:	4629      	mov	r1, r5
 80078c6:	2200      	movs	r2, #0
 80078c8:	e7d8      	b.n	800787c <scalbn+0x74>
 80078ca:	bf00      	nop
 80078cc:	f3af 8000 	nop.w
 80078d0:	c2f8f359 	.word	0xc2f8f359
 80078d4:	01a56e1f 	.word	0x01a56e1f
 80078d8:	8800759c 	.word	0x8800759c
 80078dc:	7e37e43c 	.word	0x7e37e43c
 80078e0:	8800759c 	.word	0x8800759c
 80078e4:	fe37e43c 	.word	0xfe37e43c
 80078e8:	c2f8f359 	.word	0xc2f8f359
 80078ec:	81a56e1f 	.word	0x81a56e1f
 80078f0:	43500000 	.word	0x43500000
 80078f4:	ffff3cb0 	.word	0xffff3cb0
 80078f8:	3c900000 	.word	0x3c900000

080078fc <with_errno>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	ed2d 8b02 	vpush	{d8}
 8007902:	eeb0 8a40 	vmov.f32	s16, s0
 8007906:	eef0 8a60 	vmov.f32	s17, s1
 800790a:	4604      	mov	r4, r0
 800790c:	f001 f880 	bl	8008a10 <__errno>
 8007910:	eeb0 0a48 	vmov.f32	s0, s16
 8007914:	eef0 0a68 	vmov.f32	s1, s17
 8007918:	ecbd 8b02 	vpop	{d8}
 800791c:	6004      	str	r4, [r0, #0]
 800791e:	bd10      	pop	{r4, pc}

08007920 <xflow>:
 8007920:	4603      	mov	r3, r0
 8007922:	b507      	push	{r0, r1, r2, lr}
 8007924:	ec51 0b10 	vmov	r0, r1, d0
 8007928:	b183      	cbz	r3, 800794c <xflow+0x2c>
 800792a:	4602      	mov	r2, r0
 800792c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007930:	e9cd 2300 	strd	r2, r3, [sp]
 8007934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	ec41 0b10 	vmov	d0, r0, r1
 8007940:	2022      	movs	r0, #34	@ 0x22
 8007942:	b003      	add	sp, #12
 8007944:	f85d eb04 	ldr.w	lr, [sp], #4
 8007948:	f7ff bfd8 	b.w	80078fc <with_errno>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	e7ee      	b.n	8007930 <xflow+0x10>
 8007952:	0000      	movs	r0, r0
 8007954:	0000      	movs	r0, r0
	...

08007958 <__math_uflow>:
 8007958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007960 <__math_uflow+0x8>
 800795c:	f7ff bfe0 	b.w	8007920 <xflow>
 8007960:	00000000 	.word	0x00000000
 8007964:	10000000 	.word	0x10000000

08007968 <__math_oflow>:
 8007968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007970 <__math_oflow+0x8>
 800796c:	f7ff bfd8 	b.w	8007920 <xflow>
 8007970:	00000000 	.word	0x00000000
 8007974:	70000000 	.word	0x70000000

08007978 <scalbnf>:
 8007978:	ee10 3a10 	vmov	r3, s0
 800797c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007980:	d02b      	beq.n	80079da <scalbnf+0x62>
 8007982:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007986:	d302      	bcc.n	800798e <scalbnf+0x16>
 8007988:	ee30 0a00 	vadd.f32	s0, s0, s0
 800798c:	4770      	bx	lr
 800798e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007992:	d123      	bne.n	80079dc <scalbnf+0x64>
 8007994:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <scalbnf+0xb0>)
 8007996:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007a2c <scalbnf+0xb4>
 800799a:	4298      	cmp	r0, r3
 800799c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80079a0:	db17      	blt.n	80079d2 <scalbnf+0x5a>
 80079a2:	ee10 3a10 	vmov	r3, s0
 80079a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079aa:	3a19      	subs	r2, #25
 80079ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80079b0:	4288      	cmp	r0, r1
 80079b2:	dd15      	ble.n	80079e0 <scalbnf+0x68>
 80079b4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007a30 <scalbnf+0xb8>
 80079b8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007a34 <scalbnf+0xbc>
 80079bc:	ee10 3a10 	vmov	r3, s0
 80079c0:	eeb0 7a67 	vmov.f32	s14, s15
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfb8      	it	lt
 80079c8:	eef0 7a66 	vmovlt.f32	s15, s13
 80079cc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80079d0:	4770      	bx	lr
 80079d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007a38 <scalbnf+0xc0>
 80079d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80079da:	4770      	bx	lr
 80079dc:	0dd2      	lsrs	r2, r2, #23
 80079de:	e7e5      	b.n	80079ac <scalbnf+0x34>
 80079e0:	4410      	add	r0, r2
 80079e2:	28fe      	cmp	r0, #254	@ 0xfe
 80079e4:	dce6      	bgt.n	80079b4 <scalbnf+0x3c>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	dd06      	ble.n	80079f8 <scalbnf+0x80>
 80079ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80079ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80079f2:	ee00 3a10 	vmov	s0, r3
 80079f6:	4770      	bx	lr
 80079f8:	f110 0f16 	cmn.w	r0, #22
 80079fc:	da09      	bge.n	8007a12 <scalbnf+0x9a>
 80079fe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007a38 <scalbnf+0xc0>
 8007a02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007a3c <scalbnf+0xc4>
 8007a06:	ee10 3a10 	vmov	r3, s0
 8007a0a:	eeb0 7a67 	vmov.f32	s14, s15
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	e7d9      	b.n	80079c6 <scalbnf+0x4e>
 8007a12:	3019      	adds	r0, #25
 8007a14:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007a18:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007a1c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007a40 <scalbnf+0xc8>
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	e7d7      	b.n	80079d6 <scalbnf+0x5e>
 8007a26:	bf00      	nop
 8007a28:	ffff3cb0 	.word	0xffff3cb0
 8007a2c:	4c000000 	.word	0x4c000000
 8007a30:	7149f2ca 	.word	0x7149f2ca
 8007a34:	f149f2ca 	.word	0xf149f2ca
 8007a38:	0da24260 	.word	0x0da24260
 8007a3c:	8da24260 	.word	0x8da24260
 8007a40:	33000000 	.word	0x33000000

08007a44 <with_errnof>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	ed2d 8b02 	vpush	{d8}
 8007a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	f000 ffde 	bl	8008a10 <__errno>
 8007a54:	eeb0 0a48 	vmov.f32	s0, s16
 8007a58:	ecbd 8b02 	vpop	{d8}
 8007a5c:	6004      	str	r4, [r0, #0]
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <xflowf>:
 8007a60:	b130      	cbz	r0, 8007a70 <xflowf+0x10>
 8007a62:	eef1 7a40 	vneg.f32	s15, s0
 8007a66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007a6a:	2022      	movs	r0, #34	@ 0x22
 8007a6c:	f7ff bfea 	b.w	8007a44 <with_errnof>
 8007a70:	eef0 7a40 	vmov.f32	s15, s0
 8007a74:	e7f7      	b.n	8007a66 <xflowf+0x6>
	...

08007a78 <__math_uflowf>:
 8007a78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a80 <__math_uflowf+0x8>
 8007a7c:	f7ff bff0 	b.w	8007a60 <xflowf>
 8007a80:	10000000 	.word	0x10000000

08007a84 <__math_oflowf>:
 8007a84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a8c <__math_oflowf+0x8>
 8007a88:	f7ff bfea 	b.w	8007a60 <xflowf>
 8007a8c:	70000000 	.word	0x70000000

08007a90 <__ieee754_sqrt>:
 8007a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	4a66      	ldr	r2, [pc, #408]	@ (8007c30 <__ieee754_sqrt+0x1a0>)
 8007a96:	ec55 4b10 	vmov	r4, r5, d0
 8007a9a:	43aa      	bics	r2, r5
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	d110      	bne.n	8007ac4 <__ieee754_sqrt+0x34>
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fdae 	bl	8000608 <__aeabi_dmul>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 fbf2 	bl	800029c <__adddf3>
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	ec45 4b10 	vmov	d0, r4, r5
 8007ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	dc0e      	bgt.n	8007ae6 <__ieee754_sqrt+0x56>
 8007ac8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007acc:	4322      	orrs	r2, r4
 8007ace:	d0f5      	beq.n	8007abc <__ieee754_sqrt+0x2c>
 8007ad0:	b19d      	cbz	r5, 8007afa <__ieee754_sqrt+0x6a>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fbde 	bl	8000298 <__aeabi_dsub>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	f7f8 febc 	bl	800085c <__aeabi_ddiv>
 8007ae4:	e7e8      	b.n	8007ab8 <__ieee754_sqrt+0x28>
 8007ae6:	152a      	asrs	r2, r5, #20
 8007ae8:	d115      	bne.n	8007b16 <__ieee754_sqrt+0x86>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e009      	b.n	8007b02 <__ieee754_sqrt+0x72>
 8007aee:	0acb      	lsrs	r3, r1, #11
 8007af0:	3a15      	subs	r2, #21
 8007af2:	0549      	lsls	r1, r1, #21
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0fa      	beq.n	8007aee <__ieee754_sqrt+0x5e>
 8007af8:	e7f7      	b.n	8007aea <__ieee754_sqrt+0x5a>
 8007afa:	462a      	mov	r2, r5
 8007afc:	e7fa      	b.n	8007af4 <__ieee754_sqrt+0x64>
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	3001      	adds	r0, #1
 8007b02:	02dc      	lsls	r4, r3, #11
 8007b04:	d5fb      	bpl.n	8007afe <__ieee754_sqrt+0x6e>
 8007b06:	1e44      	subs	r4, r0, #1
 8007b08:	1b12      	subs	r2, r2, r4
 8007b0a:	f1c0 0420 	rsb	r4, r0, #32
 8007b0e:	fa21 f404 	lsr.w	r4, r1, r4
 8007b12:	4323      	orrs	r3, r4
 8007b14:	4081      	lsls	r1, r0
 8007b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b1a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b22:	07d2      	lsls	r2, r2, #31
 8007b24:	bf5c      	itt	pl
 8007b26:	005b      	lslpl	r3, r3, #1
 8007b28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b30:	bf58      	it	pl
 8007b32:	0049      	lslpl	r1, r1, #1
 8007b34:	2600      	movs	r6, #0
 8007b36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007b3a:	107f      	asrs	r7, r7, #1
 8007b3c:	0049      	lsls	r1, r1, #1
 8007b3e:	2016      	movs	r0, #22
 8007b40:	4632      	mov	r2, r6
 8007b42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007b46:	1915      	adds	r5, r2, r4
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	bfde      	ittt	le
 8007b4c:	192a      	addle	r2, r5, r4
 8007b4e:	1b5b      	suble	r3, r3, r5
 8007b50:	1936      	addle	r6, r6, r4
 8007b52:	0fcd      	lsrs	r5, r1, #31
 8007b54:	3801      	subs	r0, #1
 8007b56:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007b5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007b5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b62:	d1f0      	bne.n	8007b46 <__ieee754_sqrt+0xb6>
 8007b64:	4605      	mov	r5, r0
 8007b66:	2420      	movs	r4, #32
 8007b68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	eb0c 0e00 	add.w	lr, ip, r0
 8007b72:	dc02      	bgt.n	8007b7a <__ieee754_sqrt+0xea>
 8007b74:	d113      	bne.n	8007b9e <__ieee754_sqrt+0x10e>
 8007b76:	458e      	cmp	lr, r1
 8007b78:	d811      	bhi.n	8007b9e <__ieee754_sqrt+0x10e>
 8007b7a:	f1be 0f00 	cmp.w	lr, #0
 8007b7e:	eb0e 000c 	add.w	r0, lr, ip
 8007b82:	da3f      	bge.n	8007c04 <__ieee754_sqrt+0x174>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	db3d      	blt.n	8007c04 <__ieee754_sqrt+0x174>
 8007b88:	f102 0801 	add.w	r8, r2, #1
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	458e      	cmp	lr, r1
 8007b90:	bf88      	it	hi
 8007b92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007b96:	eba1 010e 	sub.w	r1, r1, lr
 8007b9a:	4465      	add	r5, ip
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007ba8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007bb0:	d1dc      	bne.n	8007b6c <__ieee754_sqrt+0xdc>
 8007bb2:	4319      	orrs	r1, r3
 8007bb4:	d01b      	beq.n	8007bee <__ieee754_sqrt+0x15e>
 8007bb6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007c34 <__ieee754_sqrt+0x1a4>
 8007bba:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007c38 <__ieee754_sqrt+0x1a8>
 8007bbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8007bc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007bc6:	f7f8 fb67 	bl	8000298 <__aeabi_dsub>
 8007bca:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 ff93 	bl	8000b00 <__aeabi_dcmple>
 8007bda:	b140      	cbz	r0, 8007bee <__ieee754_sqrt+0x15e>
 8007bdc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007be0:	e9da 0100 	ldrd	r0, r1, [sl]
 8007be4:	e9db 2300 	ldrd	r2, r3, [fp]
 8007be8:	d10e      	bne.n	8007c08 <__ieee754_sqrt+0x178>
 8007bea:	3601      	adds	r6, #1
 8007bec:	4625      	mov	r5, r4
 8007bee:	1073      	asrs	r3, r6, #1
 8007bf0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bf4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007bf8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007bfc:	086b      	lsrs	r3, r5, #1
 8007bfe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007c02:	e759      	b.n	8007ab8 <__ieee754_sqrt+0x28>
 8007c04:	4690      	mov	r8, r2
 8007c06:	e7c1      	b.n	8007b8c <__ieee754_sqrt+0xfc>
 8007c08:	f7f8 fb48 	bl	800029c <__adddf3>
 8007c0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 ff68 	bl	8000aec <__aeabi_dcmplt>
 8007c1c:	b120      	cbz	r0, 8007c28 <__ieee754_sqrt+0x198>
 8007c1e:	1cab      	adds	r3, r5, #2
 8007c20:	bf08      	it	eq
 8007c22:	3601      	addeq	r6, #1
 8007c24:	3502      	adds	r5, #2
 8007c26:	e7e2      	b.n	8007bee <__ieee754_sqrt+0x15e>
 8007c28:	1c6b      	adds	r3, r5, #1
 8007c2a:	f023 0501 	bic.w	r5, r3, #1
 8007c2e:	e7de      	b.n	8007bee <__ieee754_sqrt+0x15e>
 8007c30:	7ff00000 	.word	0x7ff00000
 8007c34:	0800acb8 	.word	0x0800acb8
 8007c38:	0800acb0 	.word	0x0800acb0

08007c3c <__ieee754_sqrtf>:
 8007c3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007c40:	4770      	bx	lr

08007c42 <__cvt>:
 8007c42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c46:	ec57 6b10 	vmov	r6, r7, d0
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4619      	mov	r1, r3
 8007c50:	463b      	mov	r3, r7
 8007c52:	bfbb      	ittet	lt
 8007c54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c58:	461f      	movlt	r7, r3
 8007c5a:	2300      	movge	r3, #0
 8007c5c:	232d      	movlt	r3, #45	@ 0x2d
 8007c5e:	700b      	strb	r3, [r1, #0]
 8007c60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c66:	4691      	mov	r9, r2
 8007c68:	f023 0820 	bic.w	r8, r3, #32
 8007c6c:	bfbc      	itt	lt
 8007c6e:	4632      	movlt	r2, r6
 8007c70:	4616      	movlt	r6, r2
 8007c72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c76:	d005      	beq.n	8007c84 <__cvt+0x42>
 8007c78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c7c:	d100      	bne.n	8007c80 <__cvt+0x3e>
 8007c7e:	3401      	adds	r4, #1
 8007c80:	2102      	movs	r1, #2
 8007c82:	e000      	b.n	8007c86 <__cvt+0x44>
 8007c84:	2103      	movs	r1, #3
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	ab02      	add	r3, sp, #8
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	ec47 6b10 	vmov	d0, r6, r7
 8007c92:	4653      	mov	r3, sl
 8007c94:	4622      	mov	r2, r4
 8007c96:	f000 ff73 	bl	8008b80 <_dtoa_r>
 8007c9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	d119      	bne.n	8007cd6 <__cvt+0x94>
 8007ca2:	f019 0f01 	tst.w	r9, #1
 8007ca6:	d00e      	beq.n	8007cc6 <__cvt+0x84>
 8007ca8:	eb00 0904 	add.w	r9, r0, r4
 8007cac:	2200      	movs	r2, #0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb8:	b108      	cbz	r0, 8007cbe <__cvt+0x7c>
 8007cba:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cbe:	2230      	movs	r2, #48	@ 0x30
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	454b      	cmp	r3, r9
 8007cc4:	d31e      	bcc.n	8007d04 <__cvt+0xc2>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cca:	1b5b      	subs	r3, r3, r5
 8007ccc:	4628      	mov	r0, r5
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	b004      	add	sp, #16
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cda:	eb00 0904 	add.w	r9, r0, r4
 8007cde:	d1e5      	bne.n	8007cac <__cvt+0x6a>
 8007ce0:	7803      	ldrb	r3, [r0, #0]
 8007ce2:	2b30      	cmp	r3, #48	@ 0x30
 8007ce4:	d10a      	bne.n	8007cfc <__cvt+0xba>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf2:	b918      	cbnz	r0, 8007cfc <__cvt+0xba>
 8007cf4:	f1c4 0401 	rsb	r4, r4, #1
 8007cf8:	f8ca 4000 	str.w	r4, [sl]
 8007cfc:	f8da 3000 	ldr.w	r3, [sl]
 8007d00:	4499      	add	r9, r3
 8007d02:	e7d3      	b.n	8007cac <__cvt+0x6a>
 8007d04:	1c59      	adds	r1, r3, #1
 8007d06:	9103      	str	r1, [sp, #12]
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e7d9      	b.n	8007cc0 <__cvt+0x7e>

08007d0c <__exponent>:
 8007d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	bfba      	itte	lt
 8007d12:	4249      	neglt	r1, r1
 8007d14:	232d      	movlt	r3, #45	@ 0x2d
 8007d16:	232b      	movge	r3, #43	@ 0x2b
 8007d18:	2909      	cmp	r1, #9
 8007d1a:	7002      	strb	r2, [r0, #0]
 8007d1c:	7043      	strb	r3, [r0, #1]
 8007d1e:	dd29      	ble.n	8007d74 <__exponent+0x68>
 8007d20:	f10d 0307 	add.w	r3, sp, #7
 8007d24:	461d      	mov	r5, r3
 8007d26:	270a      	movs	r7, #10
 8007d28:	461a      	mov	r2, r3
 8007d2a:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d2e:	fb07 1416 	mls	r4, r7, r6, r1
 8007d32:	3430      	adds	r4, #48	@ 0x30
 8007d34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d38:	460c      	mov	r4, r1
 8007d3a:	2c63      	cmp	r4, #99	@ 0x63
 8007d3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d40:	4631      	mov	r1, r6
 8007d42:	dcf1      	bgt.n	8007d28 <__exponent+0x1c>
 8007d44:	3130      	adds	r1, #48	@ 0x30
 8007d46:	1e94      	subs	r4, r2, #2
 8007d48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d4c:	1c41      	adds	r1, r0, #1
 8007d4e:	4623      	mov	r3, r4
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	d30a      	bcc.n	8007d6a <__exponent+0x5e>
 8007d54:	f10d 0309 	add.w	r3, sp, #9
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	42ac      	cmp	r4, r5
 8007d5c:	bf88      	it	hi
 8007d5e:	2300      	movhi	r3, #0
 8007d60:	3302      	adds	r3, #2
 8007d62:	4403      	add	r3, r0
 8007d64:	1a18      	subs	r0, r3, r0
 8007d66:	b003      	add	sp, #12
 8007d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d72:	e7ed      	b.n	8007d50 <__exponent+0x44>
 8007d74:	2330      	movs	r3, #48	@ 0x30
 8007d76:	3130      	adds	r1, #48	@ 0x30
 8007d78:	7083      	strb	r3, [r0, #2]
 8007d7a:	70c1      	strb	r1, [r0, #3]
 8007d7c:	1d03      	adds	r3, r0, #4
 8007d7e:	e7f1      	b.n	8007d64 <__exponent+0x58>

08007d80 <_printf_float>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b08d      	sub	sp, #52	@ 0x34
 8007d86:	460c      	mov	r4, r1
 8007d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	461f      	mov	r7, r3
 8007d90:	4605      	mov	r5, r0
 8007d92:	f000 fdf3 	bl	800897c <_localeconv_r>
 8007d96:	6803      	ldr	r3, [r0, #0]
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7f8 fa70 	bl	8000280 <strlen>
 8007da0:	2300      	movs	r3, #0
 8007da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da4:	f8d8 3000 	ldr.w	r3, [r8]
 8007da8:	9005      	str	r0, [sp, #20]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	f103 0208 	add.w	r2, r3, #8
 8007db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007db8:	f8d4 b000 	ldr.w	fp, [r4]
 8007dbc:	f8c8 2000 	str.w	r2, [r8]
 8007dc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dc8:	9307      	str	r3, [sp, #28]
 8007dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8008048 <_printf_float+0x2c8>)
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	f7f8 feae 	bl	8000b3c <__aeabi_dcmpun>
 8007de0:	bb70      	cbnz	r0, 8007e40 <_printf_float+0xc0>
 8007de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de6:	4b98      	ldr	r3, [pc, #608]	@ (8008048 <_printf_float+0x2c8>)
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	f7f8 fe88 	bl	8000b00 <__aeabi_dcmple>
 8007df0:	bb30      	cbnz	r0, 8007e40 <_printf_float+0xc0>
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7f8 fe77 	bl	8000aec <__aeabi_dcmplt>
 8007dfe:	b110      	cbz	r0, 8007e06 <_printf_float+0x86>
 8007e00:	232d      	movs	r3, #45	@ 0x2d
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e06:	4a91      	ldr	r2, [pc, #580]	@ (800804c <_printf_float+0x2cc>)
 8007e08:	4b91      	ldr	r3, [pc, #580]	@ (8008050 <_printf_float+0x2d0>)
 8007e0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e0e:	bf8c      	ite	hi
 8007e10:	4690      	movhi	r8, r2
 8007e12:	4698      	movls	r8, r3
 8007e14:	2303      	movs	r3, #3
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	f02b 0304 	bic.w	r3, fp, #4
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	9700      	str	r7, [sp, #0]
 8007e24:	4633      	mov	r3, r6
 8007e26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 f9d2 	bl	80081d4 <_printf_common>
 8007e30:	3001      	adds	r0, #1
 8007e32:	f040 808d 	bne.w	8007f50 <_printf_float+0x1d0>
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	b00d      	add	sp, #52	@ 0x34
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	4640      	mov	r0, r8
 8007e46:	4649      	mov	r1, r9
 8007e48:	f7f8 fe78 	bl	8000b3c <__aeabi_dcmpun>
 8007e4c:	b140      	cbz	r0, 8007e60 <_printf_float+0xe0>
 8007e4e:	464b      	mov	r3, r9
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfbc      	itt	lt
 8007e54:	232d      	movlt	r3, #45	@ 0x2d
 8007e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8008054 <_printf_float+0x2d4>)
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <_printf_float+0x2d8>)
 8007e5e:	e7d4      	b.n	8007e0a <_printf_float+0x8a>
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e66:	9206      	str	r2, [sp, #24]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	d13b      	bne.n	8007ee4 <_printf_float+0x164>
 8007e6c:	2306      	movs	r3, #6
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e74:	2300      	movs	r3, #0
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	9303      	str	r3, [sp, #12]
 8007e7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e80:	ab09      	add	r3, sp, #36	@ 0x24
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	6861      	ldr	r1, [r4, #4]
 8007e86:	ec49 8b10 	vmov	d0, r8, r9
 8007e8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7ff fed7 	bl	8007c42 <__cvt>
 8007e94:	9b06      	ldr	r3, [sp, #24]
 8007e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e98:	2b47      	cmp	r3, #71	@ 0x47
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	d129      	bne.n	8007ef2 <_printf_float+0x172>
 8007e9e:	1cc8      	adds	r0, r1, #3
 8007ea0:	db02      	blt.n	8007ea8 <_printf_float+0x128>
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	dd41      	ble.n	8007f2c <_printf_float+0x1ac>
 8007ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007eac:	fa5f fa8a 	uxtb.w	sl, sl
 8007eb0:	3901      	subs	r1, #1
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007eb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eba:	f7ff ff27 	bl	8007d0c <__exponent>
 8007ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ec0:	1813      	adds	r3, r2, r0
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	4681      	mov	r9, r0
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	dc02      	bgt.n	8007ed0 <_printf_float+0x150>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	07d2      	lsls	r2, r2, #31
 8007ece:	d501      	bpl.n	8007ed4 <_printf_float+0x154>
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0a2      	beq.n	8007e22 <_printf_float+0xa2>
 8007edc:	232d      	movs	r3, #45	@ 0x2d
 8007ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ee2:	e79e      	b.n	8007e22 <_printf_float+0xa2>
 8007ee4:	9a06      	ldr	r2, [sp, #24]
 8007ee6:	2a47      	cmp	r2, #71	@ 0x47
 8007ee8:	d1c2      	bne.n	8007e70 <_printf_float+0xf0>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1c0      	bne.n	8007e70 <_printf_float+0xf0>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7bd      	b.n	8007e6e <_printf_float+0xee>
 8007ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ef6:	d9db      	bls.n	8007eb0 <_printf_float+0x130>
 8007ef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007efc:	d118      	bne.n	8007f30 <_printf_float+0x1b0>
 8007efe:	2900      	cmp	r1, #0
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	dd0b      	ble.n	8007f1c <_printf_float+0x19c>
 8007f04:	6121      	str	r1, [r4, #16]
 8007f06:	b913      	cbnz	r3, 8007f0e <_printf_float+0x18e>
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	07d0      	lsls	r0, r2, #31
 8007f0c:	d502      	bpl.n	8007f14 <_printf_float+0x194>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	440b      	add	r3, r1
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	e7db      	b.n	8007ed4 <_printf_float+0x154>
 8007f1c:	b913      	cbnz	r3, 8007f24 <_printf_float+0x1a4>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	07d2      	lsls	r2, r2, #31
 8007f22:	d501      	bpl.n	8007f28 <_printf_float+0x1a8>
 8007f24:	3302      	adds	r3, #2
 8007f26:	e7f4      	b.n	8007f12 <_printf_float+0x192>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e7f2      	b.n	8007f12 <_printf_float+0x192>
 8007f2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f32:	4299      	cmp	r1, r3
 8007f34:	db05      	blt.n	8007f42 <_printf_float+0x1c2>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	6121      	str	r1, [r4, #16]
 8007f3a:	07d8      	lsls	r0, r3, #31
 8007f3c:	d5ea      	bpl.n	8007f14 <_printf_float+0x194>
 8007f3e:	1c4b      	adds	r3, r1, #1
 8007f40:	e7e7      	b.n	8007f12 <_printf_float+0x192>
 8007f42:	2900      	cmp	r1, #0
 8007f44:	bfd4      	ite	le
 8007f46:	f1c1 0202 	rsble	r2, r1, #2
 8007f4a:	2201      	movgt	r2, #1
 8007f4c:	4413      	add	r3, r2
 8007f4e:	e7e0      	b.n	8007f12 <_printf_float+0x192>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	055a      	lsls	r2, r3, #21
 8007f54:	d407      	bmi.n	8007f66 <_printf_float+0x1e6>
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	d12b      	bne.n	8007fbc <_printf_float+0x23c>
 8007f64:	e767      	b.n	8007e36 <_printf_float+0xb6>
 8007f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f6a:	f240 80dd 	bls.w	8008128 <_printf_float+0x3a8>
 8007f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	f7f8 fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d033      	beq.n	8007fe6 <_printf_float+0x266>
 8007f7e:	4a37      	ldr	r2, [pc, #220]	@ (800805c <_printf_float+0x2dc>)
 8007f80:	2301      	movs	r3, #1
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f43f af54 	beq.w	8007e36 <_printf_float+0xb6>
 8007f8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f92:	4543      	cmp	r3, r8
 8007f94:	db02      	blt.n	8007f9c <_printf_float+0x21c>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	07d8      	lsls	r0, r3, #31
 8007f9a:	d50f      	bpl.n	8007fbc <_printf_float+0x23c>
 8007f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f af45 	beq.w	8007e36 <_printf_float+0xb6>
 8007fac:	f04f 0900 	mov.w	r9, #0
 8007fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fb4:	f104 0a1a 	add.w	sl, r4, #26
 8007fb8:	45c8      	cmp	r8, r9
 8007fba:	dc09      	bgt.n	8007fd0 <_printf_float+0x250>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	f100 8103 	bmi.w	80081ca <_printf_float+0x44a>
 8007fc4:	68e0      	ldr	r0, [r4, #12]
 8007fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc8:	4298      	cmp	r0, r3
 8007fca:	bfb8      	it	lt
 8007fcc:	4618      	movlt	r0, r3
 8007fce:	e734      	b.n	8007e3a <_printf_float+0xba>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af2b 	beq.w	8007e36 <_printf_float+0xb6>
 8007fe0:	f109 0901 	add.w	r9, r9, #1
 8007fe4:	e7e8      	b.n	8007fb8 <_printf_float+0x238>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dc39      	bgt.n	8008060 <_printf_float+0x2e0>
 8007fec:	4a1b      	ldr	r2, [pc, #108]	@ (800805c <_printf_float+0x2dc>)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af1d 	beq.w	8007e36 <_printf_float+0xb6>
 8007ffc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008000:	ea59 0303 	orrs.w	r3, r9, r3
 8008004:	d102      	bne.n	800800c <_printf_float+0x28c>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	07d9      	lsls	r1, r3, #31
 800800a:	d5d7      	bpl.n	8007fbc <_printf_float+0x23c>
 800800c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008010:	4631      	mov	r1, r6
 8008012:	4628      	mov	r0, r5
 8008014:	47b8      	blx	r7
 8008016:	3001      	adds	r0, #1
 8008018:	f43f af0d 	beq.w	8007e36 <_printf_float+0xb6>
 800801c:	f04f 0a00 	mov.w	sl, #0
 8008020:	f104 0b1a 	add.w	fp, r4, #26
 8008024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008026:	425b      	negs	r3, r3
 8008028:	4553      	cmp	r3, sl
 800802a:	dc01      	bgt.n	8008030 <_printf_float+0x2b0>
 800802c:	464b      	mov	r3, r9
 800802e:	e793      	b.n	8007f58 <_printf_float+0x1d8>
 8008030:	2301      	movs	r3, #1
 8008032:	465a      	mov	r2, fp
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f aefb 	beq.w	8007e36 <_printf_float+0xb6>
 8008040:	f10a 0a01 	add.w	sl, sl, #1
 8008044:	e7ee      	b.n	8008024 <_printf_float+0x2a4>
 8008046:	bf00      	nop
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	0800aaf8 	.word	0x0800aaf8
 8008050:	0800aaf4 	.word	0x0800aaf4
 8008054:	0800ab00 	.word	0x0800ab00
 8008058:	0800aafc 	.word	0x0800aafc
 800805c:	0800ab04 	.word	0x0800ab04
 8008060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008062:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008066:	4553      	cmp	r3, sl
 8008068:	bfa8      	it	ge
 800806a:	4653      	movge	r3, sl
 800806c:	2b00      	cmp	r3, #0
 800806e:	4699      	mov	r9, r3
 8008070:	dc36      	bgt.n	80080e0 <_printf_float+0x360>
 8008072:	f04f 0b00 	mov.w	fp, #0
 8008076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800807a:	f104 021a 	add.w	r2, r4, #26
 800807e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008080:	9306      	str	r3, [sp, #24]
 8008082:	eba3 0309 	sub.w	r3, r3, r9
 8008086:	455b      	cmp	r3, fp
 8008088:	dc31      	bgt.n	80080ee <_printf_float+0x36e>
 800808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808c:	459a      	cmp	sl, r3
 800808e:	dc3a      	bgt.n	8008106 <_printf_float+0x386>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07da      	lsls	r2, r3, #31
 8008094:	d437      	bmi.n	8008106 <_printf_float+0x386>
 8008096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008098:	ebaa 0903 	sub.w	r9, sl, r3
 800809c:	9b06      	ldr	r3, [sp, #24]
 800809e:	ebaa 0303 	sub.w	r3, sl, r3
 80080a2:	4599      	cmp	r9, r3
 80080a4:	bfa8      	it	ge
 80080a6:	4699      	movge	r9, r3
 80080a8:	f1b9 0f00 	cmp.w	r9, #0
 80080ac:	dc33      	bgt.n	8008116 <_printf_float+0x396>
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b6:	f104 0b1a 	add.w	fp, r4, #26
 80080ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080bc:	ebaa 0303 	sub.w	r3, sl, r3
 80080c0:	eba3 0309 	sub.w	r3, r3, r9
 80080c4:	4543      	cmp	r3, r8
 80080c6:	f77f af79 	ble.w	8007fbc <_printf_float+0x23c>
 80080ca:	2301      	movs	r3, #1
 80080cc:	465a      	mov	r2, fp
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f aeae 	beq.w	8007e36 <_printf_float+0xb6>
 80080da:	f108 0801 	add.w	r8, r8, #1
 80080de:	e7ec      	b.n	80080ba <_printf_float+0x33a>
 80080e0:	4642      	mov	r2, r8
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	d1c2      	bne.n	8008072 <_printf_float+0x2f2>
 80080ec:	e6a3      	b.n	8007e36 <_printf_float+0xb6>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	9206      	str	r2, [sp, #24]
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	f43f ae9c 	beq.w	8007e36 <_printf_float+0xb6>
 80080fe:	9a06      	ldr	r2, [sp, #24]
 8008100:	f10b 0b01 	add.w	fp, fp, #1
 8008104:	e7bb      	b.n	800807e <_printf_float+0x2fe>
 8008106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1c0      	bne.n	8008096 <_printf_float+0x316>
 8008114:	e68f      	b.n	8007e36 <_printf_float+0xb6>
 8008116:	9a06      	ldr	r2, [sp, #24]
 8008118:	464b      	mov	r3, r9
 800811a:	4442      	add	r2, r8
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	d1c3      	bne.n	80080ae <_printf_float+0x32e>
 8008126:	e686      	b.n	8007e36 <_printf_float+0xb6>
 8008128:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800812c:	f1ba 0f01 	cmp.w	sl, #1
 8008130:	dc01      	bgt.n	8008136 <_printf_float+0x3b6>
 8008132:	07db      	lsls	r3, r3, #31
 8008134:	d536      	bpl.n	80081a4 <_printf_float+0x424>
 8008136:	2301      	movs	r3, #1
 8008138:	4642      	mov	r2, r8
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f ae78 	beq.w	8007e36 <_printf_float+0xb6>
 8008146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae70 	beq.w	8007e36 <_printf_float+0xb6>
 8008156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008162:	f7f8 fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008166:	b9c0      	cbnz	r0, 800819a <_printf_float+0x41a>
 8008168:	4653      	mov	r3, sl
 800816a:	f108 0201 	add.w	r2, r8, #1
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d10c      	bne.n	8008192 <_printf_float+0x412>
 8008178:	e65d      	b.n	8007e36 <_printf_float+0xb6>
 800817a:	2301      	movs	r3, #1
 800817c:	465a      	mov	r2, fp
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae56 	beq.w	8007e36 <_printf_float+0xb6>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	45d0      	cmp	r8, sl
 8008190:	dbf3      	blt.n	800817a <_printf_float+0x3fa>
 8008192:	464b      	mov	r3, r9
 8008194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008198:	e6df      	b.n	8007f5a <_printf_float+0x1da>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0b1a 	add.w	fp, r4, #26
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x40e>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4642      	mov	r2, r8
 80081a8:	e7e1      	b.n	800816e <_printf_float+0x3ee>
 80081aa:	2301      	movs	r3, #1
 80081ac:	464a      	mov	r2, r9
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	f43f ae3e 	beq.w	8007e36 <_printf_float+0xb6>
 80081ba:	f108 0801 	add.w	r8, r8, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	4543      	cmp	r3, r8
 80081c6:	dcf0      	bgt.n	80081aa <_printf_float+0x42a>
 80081c8:	e6fc      	b.n	8007fc4 <_printf_float+0x244>
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	f104 0919 	add.w	r9, r4, #25
 80081d2:	e7f4      	b.n	80081be <_printf_float+0x43e>

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4698      	mov	r8, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bfb8      	it	lt
 80081e8:	4613      	movlt	r3, r2
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081f0:	4607      	mov	r7, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc26      	bgt.n	800826a <_printf_common+0x96>
 800821c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008220:	6822      	ldr	r2, [r4, #0]
 8008222:	3b00      	subs	r3, #0
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42b      	bmi.n	8008284 <_printf_common+0xb0>
 800822c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008230:	4641      	mov	r1, r8
 8008232:	4638      	mov	r0, r7
 8008234:	47c8      	blx	r9
 8008236:	3001      	adds	r0, #1
 8008238:	d01e      	beq.n	8008278 <_printf_common+0xa4>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	6922      	ldr	r2, [r4, #16]
 800823e:	f003 0306 	and.w	r3, r3, #6
 8008242:	2b04      	cmp	r3, #4
 8008244:	bf02      	ittt	eq
 8008246:	68e5      	ldreq	r5, [r4, #12]
 8008248:	6833      	ldreq	r3, [r6, #0]
 800824a:	1aed      	subeq	r5, r5, r3
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	bf0c      	ite	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	2500      	movne	r5, #0
 8008256:	4293      	cmp	r3, r2
 8008258:	bfc4      	itt	gt
 800825a:	1a9b      	subgt	r3, r3, r2
 800825c:	18ed      	addgt	r5, r5, r3
 800825e:	2600      	movs	r6, #0
 8008260:	341a      	adds	r4, #26
 8008262:	42b5      	cmp	r5, r6
 8008264:	d11a      	bne.n	800829c <_printf_common+0xc8>
 8008266:	2000      	movs	r0, #0
 8008268:	e008      	b.n	800827c <_printf_common+0xa8>
 800826a:	2301      	movs	r3, #1
 800826c:	4652      	mov	r2, sl
 800826e:	4641      	mov	r1, r8
 8008270:	4638      	mov	r0, r7
 8008272:	47c8      	blx	r9
 8008274:	3001      	adds	r0, #1
 8008276:	d103      	bne.n	8008280 <_printf_common+0xac>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3501      	adds	r5, #1
 8008282:	e7c6      	b.n	8008212 <_printf_common+0x3e>
 8008284:	18e1      	adds	r1, r4, r3
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	2030      	movs	r0, #48	@ 0x30
 800828a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800828e:	4422      	add	r2, r4
 8008290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008298:	3302      	adds	r3, #2
 800829a:	e7c7      	b.n	800822c <_printf_common+0x58>
 800829c:	2301      	movs	r3, #1
 800829e:	4622      	mov	r2, r4
 80082a0:	4641      	mov	r1, r8
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c8      	blx	r9
 80082a6:	3001      	adds	r0, #1
 80082a8:	d0e6      	beq.n	8008278 <_printf_common+0xa4>
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7d9      	b.n	8008262 <_printf_common+0x8e>
	...

080082b0 <_printf_i>:
 80082b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	7e0f      	ldrb	r7, [r1, #24]
 80082b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b8:	2f78      	cmp	r7, #120	@ 0x78
 80082ba:	4691      	mov	r9, r2
 80082bc:	4680      	mov	r8, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	469a      	mov	sl, r3
 80082c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082c6:	d807      	bhi.n	80082d8 <_printf_i+0x28>
 80082c8:	2f62      	cmp	r7, #98	@ 0x62
 80082ca:	d80a      	bhi.n	80082e2 <_printf_i+0x32>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f000 80d1 	beq.w	8008474 <_printf_i+0x1c4>
 80082d2:	2f58      	cmp	r7, #88	@ 0x58
 80082d4:	f000 80b8 	beq.w	8008448 <_printf_i+0x198>
 80082d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082e0:	e03a      	b.n	8008358 <_printf_i+0xa8>
 80082e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082e6:	2b15      	cmp	r3, #21
 80082e8:	d8f6      	bhi.n	80082d8 <_printf_i+0x28>
 80082ea:	a101      	add	r1, pc, #4	@ (adr r1, 80082f0 <_printf_i+0x40>)
 80082ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082f0:	08008349 	.word	0x08008349
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	080082d9 	.word	0x080082d9
 80082fc:	080082d9 	.word	0x080082d9
 8008300:	080082d9 	.word	0x080082d9
 8008304:	080082d9 	.word	0x080082d9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082d9 	.word	0x080082d9
 8008310:	080082d9 	.word	0x080082d9
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	0800845b 	.word	0x0800845b
 8008320:	08008387 	.word	0x08008387
 8008324:	08008415 	.word	0x08008415
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800847d 	.word	0x0800847d
 8008334:	080082d9 	.word	0x080082d9
 8008338:	08008387 	.word	0x08008387
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	0800841d 	.word	0x0800841d
 8008348:	6833      	ldr	r3, [r6, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6032      	str	r2, [r6, #0]
 8008350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008358:	2301      	movs	r3, #1
 800835a:	e09c      	b.n	8008496 <_printf_i+0x1e6>
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	1d19      	adds	r1, r3, #4
 8008362:	6031      	str	r1, [r6, #0]
 8008364:	0606      	lsls	r6, r0, #24
 8008366:	d501      	bpl.n	800836c <_printf_i+0xbc>
 8008368:	681d      	ldr	r5, [r3, #0]
 800836a:	e003      	b.n	8008374 <_printf_i+0xc4>
 800836c:	0645      	lsls	r5, r0, #25
 800836e:	d5fb      	bpl.n	8008368 <_printf_i+0xb8>
 8008370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008374:	2d00      	cmp	r5, #0
 8008376:	da03      	bge.n	8008380 <_printf_i+0xd0>
 8008378:	232d      	movs	r3, #45	@ 0x2d
 800837a:	426d      	negs	r5, r5
 800837c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008380:	4858      	ldr	r0, [pc, #352]	@ (80084e4 <_printf_i+0x234>)
 8008382:	230a      	movs	r3, #10
 8008384:	e011      	b.n	80083aa <_printf_i+0xfa>
 8008386:	6821      	ldr	r1, [r4, #0]
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	0608      	lsls	r0, r1, #24
 800838c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008390:	d402      	bmi.n	8008398 <_printf_i+0xe8>
 8008392:	0649      	lsls	r1, r1, #25
 8008394:	bf48      	it	mi
 8008396:	b2ad      	uxthmi	r5, r5
 8008398:	2f6f      	cmp	r7, #111	@ 0x6f
 800839a:	4852      	ldr	r0, [pc, #328]	@ (80084e4 <_printf_i+0x234>)
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	bf14      	ite	ne
 80083a0:	230a      	movne	r3, #10
 80083a2:	2308      	moveq	r3, #8
 80083a4:	2100      	movs	r1, #0
 80083a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083aa:	6866      	ldr	r6, [r4, #4]
 80083ac:	60a6      	str	r6, [r4, #8]
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	db05      	blt.n	80083be <_printf_i+0x10e>
 80083b2:	6821      	ldr	r1, [r4, #0]
 80083b4:	432e      	orrs	r6, r5
 80083b6:	f021 0104 	bic.w	r1, r1, #4
 80083ba:	6021      	str	r1, [r4, #0]
 80083bc:	d04b      	beq.n	8008456 <_printf_i+0x1a6>
 80083be:	4616      	mov	r6, r2
 80083c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c4:	fb03 5711 	mls	r7, r3, r1, r5
 80083c8:	5dc7      	ldrb	r7, [r0, r7]
 80083ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ce:	462f      	mov	r7, r5
 80083d0:	42bb      	cmp	r3, r7
 80083d2:	460d      	mov	r5, r1
 80083d4:	d9f4      	bls.n	80083c0 <_printf_i+0x110>
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d10b      	bne.n	80083f2 <_printf_i+0x142>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	07df      	lsls	r7, r3, #31
 80083de:	d508      	bpl.n	80083f2 <_printf_i+0x142>
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	6861      	ldr	r1, [r4, #4]
 80083e4:	4299      	cmp	r1, r3
 80083e6:	bfde      	ittt	le
 80083e8:	2330      	movle	r3, #48	@ 0x30
 80083ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083f2:	1b92      	subs	r2, r2, r6
 80083f4:	6122      	str	r2, [r4, #16]
 80083f6:	f8cd a000 	str.w	sl, [sp]
 80083fa:	464b      	mov	r3, r9
 80083fc:	aa03      	add	r2, sp, #12
 80083fe:	4621      	mov	r1, r4
 8008400:	4640      	mov	r0, r8
 8008402:	f7ff fee7 	bl	80081d4 <_printf_common>
 8008406:	3001      	adds	r0, #1
 8008408:	d14a      	bne.n	80084a0 <_printf_i+0x1f0>
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	b004      	add	sp, #16
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	f043 0320 	orr.w	r3, r3, #32
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	4832      	ldr	r0, [pc, #200]	@ (80084e8 <_printf_i+0x238>)
 800841e:	2778      	movs	r7, #120	@ 0x78
 8008420:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	6831      	ldr	r1, [r6, #0]
 8008428:	061f      	lsls	r7, r3, #24
 800842a:	f851 5b04 	ldr.w	r5, [r1], #4
 800842e:	d402      	bmi.n	8008436 <_printf_i+0x186>
 8008430:	065f      	lsls	r7, r3, #25
 8008432:	bf48      	it	mi
 8008434:	b2ad      	uxthmi	r5, r5
 8008436:	6031      	str	r1, [r6, #0]
 8008438:	07d9      	lsls	r1, r3, #31
 800843a:	bf44      	itt	mi
 800843c:	f043 0320 	orrmi.w	r3, r3, #32
 8008440:	6023      	strmi	r3, [r4, #0]
 8008442:	b11d      	cbz	r5, 800844c <_printf_i+0x19c>
 8008444:	2310      	movs	r3, #16
 8008446:	e7ad      	b.n	80083a4 <_printf_i+0xf4>
 8008448:	4826      	ldr	r0, [pc, #152]	@ (80084e4 <_printf_i+0x234>)
 800844a:	e7e9      	b.n	8008420 <_printf_i+0x170>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	f023 0320 	bic.w	r3, r3, #32
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	e7f6      	b.n	8008444 <_printf_i+0x194>
 8008456:	4616      	mov	r6, r2
 8008458:	e7bd      	b.n	80083d6 <_printf_i+0x126>
 800845a:	6833      	ldr	r3, [r6, #0]
 800845c:	6825      	ldr	r5, [r4, #0]
 800845e:	6961      	ldr	r1, [r4, #20]
 8008460:	1d18      	adds	r0, r3, #4
 8008462:	6030      	str	r0, [r6, #0]
 8008464:	062e      	lsls	r6, r5, #24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	d501      	bpl.n	800846e <_printf_i+0x1be>
 800846a:	6019      	str	r1, [r3, #0]
 800846c:	e002      	b.n	8008474 <_printf_i+0x1c4>
 800846e:	0668      	lsls	r0, r5, #25
 8008470:	d5fb      	bpl.n	800846a <_printf_i+0x1ba>
 8008472:	8019      	strh	r1, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	4616      	mov	r6, r2
 800847a:	e7bc      	b.n	80083f6 <_printf_i+0x146>
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	6032      	str	r2, [r6, #0]
 8008482:	681e      	ldr	r6, [r3, #0]
 8008484:	6862      	ldr	r2, [r4, #4]
 8008486:	2100      	movs	r1, #0
 8008488:	4630      	mov	r0, r6
 800848a:	f7f7 fea9 	bl	80001e0 <memchr>
 800848e:	b108      	cbz	r0, 8008494 <_printf_i+0x1e4>
 8008490:	1b80      	subs	r0, r0, r6
 8008492:	6060      	str	r0, [r4, #4]
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	2300      	movs	r3, #0
 800849a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849e:	e7aa      	b.n	80083f6 <_printf_i+0x146>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	4632      	mov	r2, r6
 80084a4:	4649      	mov	r1, r9
 80084a6:	4640      	mov	r0, r8
 80084a8:	47d0      	blx	sl
 80084aa:	3001      	adds	r0, #1
 80084ac:	d0ad      	beq.n	800840a <_printf_i+0x15a>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	079b      	lsls	r3, r3, #30
 80084b2:	d413      	bmi.n	80084dc <_printf_i+0x22c>
 80084b4:	68e0      	ldr	r0, [r4, #12]
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	4298      	cmp	r0, r3
 80084ba:	bfb8      	it	lt
 80084bc:	4618      	movlt	r0, r3
 80084be:	e7a6      	b.n	800840e <_printf_i+0x15e>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4632      	mov	r2, r6
 80084c4:	4649      	mov	r1, r9
 80084c6:	4640      	mov	r0, r8
 80084c8:	47d0      	blx	sl
 80084ca:	3001      	adds	r0, #1
 80084cc:	d09d      	beq.n	800840a <_printf_i+0x15a>
 80084ce:	3501      	adds	r5, #1
 80084d0:	68e3      	ldr	r3, [r4, #12]
 80084d2:	9903      	ldr	r1, [sp, #12]
 80084d4:	1a5b      	subs	r3, r3, r1
 80084d6:	42ab      	cmp	r3, r5
 80084d8:	dcf2      	bgt.n	80084c0 <_printf_i+0x210>
 80084da:	e7eb      	b.n	80084b4 <_printf_i+0x204>
 80084dc:	2500      	movs	r5, #0
 80084de:	f104 0619 	add.w	r6, r4, #25
 80084e2:	e7f5      	b.n	80084d0 <_printf_i+0x220>
 80084e4:	0800ab06 	.word	0x0800ab06
 80084e8:	0800ab17 	.word	0x0800ab17

080084ec <std>:
 80084ec:	2300      	movs	r3, #0
 80084ee:	b510      	push	{r4, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	e9c0 3300 	strd	r3, r3, [r0]
 80084f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fa:	6083      	str	r3, [r0, #8]
 80084fc:	8181      	strh	r1, [r0, #12]
 80084fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008500:	81c2      	strh	r2, [r0, #14]
 8008502:	6183      	str	r3, [r0, #24]
 8008504:	4619      	mov	r1, r3
 8008506:	2208      	movs	r2, #8
 8008508:	305c      	adds	r0, #92	@ 0x5c
 800850a:	f000 fa2f 	bl	800896c <memset>
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <std+0x58>)
 8008510:	6263      	str	r3, [r4, #36]	@ 0x24
 8008512:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <std+0x5c>)
 8008514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x60>)
 8008518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x64>)
 800851c:	6323      	str	r3, [r4, #48]	@ 0x30
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x68>)
 8008520:	6224      	str	r4, [r4, #32]
 8008522:	429c      	cmp	r4, r3
 8008524:	d006      	beq.n	8008534 <std+0x48>
 8008526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800852a:	4294      	cmp	r4, r2
 800852c:	d002      	beq.n	8008534 <std+0x48>
 800852e:	33d0      	adds	r3, #208	@ 0xd0
 8008530:	429c      	cmp	r4, r3
 8008532:	d105      	bne.n	8008540 <std+0x54>
 8008534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f000 ba92 	b.w	8008a64 <__retarget_lock_init_recursive>
 8008540:	bd10      	pop	{r4, pc}
 8008542:	bf00      	nop
 8008544:	080087bd 	.word	0x080087bd
 8008548:	080087df 	.word	0x080087df
 800854c:	08008817 	.word	0x08008817
 8008550:	0800883b 	.word	0x0800883b
 8008554:	20000394 	.word	0x20000394

08008558 <stdio_exit_handler>:
 8008558:	4a02      	ldr	r2, [pc, #8]	@ (8008564 <stdio_exit_handler+0xc>)
 800855a:	4903      	ldr	r1, [pc, #12]	@ (8008568 <stdio_exit_handler+0x10>)
 800855c:	4803      	ldr	r0, [pc, #12]	@ (800856c <stdio_exit_handler+0x14>)
 800855e:	f000 b869 	b.w	8008634 <_fwalk_sglue>
 8008562:	bf00      	nop
 8008564:	20000010 	.word	0x20000010
 8008568:	0800a651 	.word	0x0800a651
 800856c:	20000020 	.word	0x20000020

08008570 <cleanup_stdio>:
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	4b0c      	ldr	r3, [pc, #48]	@ (80085a4 <cleanup_stdio+0x34>)
 8008574:	4299      	cmp	r1, r3
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	d001      	beq.n	8008580 <cleanup_stdio+0x10>
 800857c:	f002 f868 	bl	800a650 <_fflush_r>
 8008580:	68a1      	ldr	r1, [r4, #8]
 8008582:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <cleanup_stdio+0x38>)
 8008584:	4299      	cmp	r1, r3
 8008586:	d002      	beq.n	800858e <cleanup_stdio+0x1e>
 8008588:	4620      	mov	r0, r4
 800858a:	f002 f861 	bl	800a650 <_fflush_r>
 800858e:	68e1      	ldr	r1, [r4, #12]
 8008590:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <cleanup_stdio+0x3c>)
 8008592:	4299      	cmp	r1, r3
 8008594:	d004      	beq.n	80085a0 <cleanup_stdio+0x30>
 8008596:	4620      	mov	r0, r4
 8008598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859c:	f002 b858 	b.w	800a650 <_fflush_r>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	bf00      	nop
 80085a4:	20000394 	.word	0x20000394
 80085a8:	200003fc 	.word	0x200003fc
 80085ac:	20000464 	.word	0x20000464

080085b0 <global_stdio_init.part.0>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4b0b      	ldr	r3, [pc, #44]	@ (80085e0 <global_stdio_init.part.0+0x30>)
 80085b4:	4c0b      	ldr	r4, [pc, #44]	@ (80085e4 <global_stdio_init.part.0+0x34>)
 80085b6:	4a0c      	ldr	r2, [pc, #48]	@ (80085e8 <global_stdio_init.part.0+0x38>)
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	4620      	mov	r0, r4
 80085bc:	2200      	movs	r2, #0
 80085be:	2104      	movs	r1, #4
 80085c0:	f7ff ff94 	bl	80084ec <std>
 80085c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085c8:	2201      	movs	r2, #1
 80085ca:	2109      	movs	r1, #9
 80085cc:	f7ff ff8e 	bl	80084ec <std>
 80085d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d4:	2202      	movs	r2, #2
 80085d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085da:	2112      	movs	r1, #18
 80085dc:	f7ff bf86 	b.w	80084ec <std>
 80085e0:	200004cc 	.word	0x200004cc
 80085e4:	20000394 	.word	0x20000394
 80085e8:	08008559 	.word	0x08008559

080085ec <__sfp_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__sfp_lock_acquire+0x8>)
 80085ee:	f000 ba3a 	b.w	8008a66 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	200004d5 	.word	0x200004d5

080085f8 <__sfp_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	@ (8008600 <__sfp_lock_release+0x8>)
 80085fa:	f000 ba35 	b.w	8008a68 <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	200004d5 	.word	0x200004d5

08008604 <__sinit>:
 8008604:	b510      	push	{r4, lr}
 8008606:	4604      	mov	r4, r0
 8008608:	f7ff fff0 	bl	80085ec <__sfp_lock_acquire>
 800860c:	6a23      	ldr	r3, [r4, #32]
 800860e:	b11b      	cbz	r3, 8008618 <__sinit+0x14>
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f7ff bff0 	b.w	80085f8 <__sfp_lock_release>
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <__sinit+0x28>)
 800861a:	6223      	str	r3, [r4, #32]
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__sinit+0x2c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f5      	bne.n	8008610 <__sinit+0xc>
 8008624:	f7ff ffc4 	bl	80085b0 <global_stdio_init.part.0>
 8008628:	e7f2      	b.n	8008610 <__sinit+0xc>
 800862a:	bf00      	nop
 800862c:	08008571 	.word	0x08008571
 8008630:	200004cc 	.word	0x200004cc

08008634 <_fwalk_sglue>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	4607      	mov	r7, r0
 800863a:	4688      	mov	r8, r1
 800863c:	4614      	mov	r4, r2
 800863e:	2600      	movs	r6, #0
 8008640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008644:	f1b9 0901 	subs.w	r9, r9, #1
 8008648:	d505      	bpl.n	8008656 <_fwalk_sglue+0x22>
 800864a:	6824      	ldr	r4, [r4, #0]
 800864c:	2c00      	cmp	r4, #0
 800864e:	d1f7      	bne.n	8008640 <_fwalk_sglue+0xc>
 8008650:	4630      	mov	r0, r6
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d907      	bls.n	800866c <_fwalk_sglue+0x38>
 800865c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008660:	3301      	adds	r3, #1
 8008662:	d003      	beq.n	800866c <_fwalk_sglue+0x38>
 8008664:	4629      	mov	r1, r5
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	4306      	orrs	r6, r0
 800866c:	3568      	adds	r5, #104	@ 0x68
 800866e:	e7e9      	b.n	8008644 <_fwalk_sglue+0x10>

08008670 <iprintf>:
 8008670:	b40f      	push	{r0, r1, r2, r3}
 8008672:	b507      	push	{r0, r1, r2, lr}
 8008674:	4906      	ldr	r1, [pc, #24]	@ (8008690 <iprintf+0x20>)
 8008676:	ab04      	add	r3, sp, #16
 8008678:	6808      	ldr	r0, [r1, #0]
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	6881      	ldr	r1, [r0, #8]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f001 fe49 	bl	800a318 <_vfiprintf_r>
 8008686:	b003      	add	sp, #12
 8008688:	f85d eb04 	ldr.w	lr, [sp], #4
 800868c:	b004      	add	sp, #16
 800868e:	4770      	bx	lr
 8008690:	2000001c 	.word	0x2000001c

08008694 <_puts_r>:
 8008694:	6a03      	ldr	r3, [r0, #32]
 8008696:	b570      	push	{r4, r5, r6, lr}
 8008698:	6884      	ldr	r4, [r0, #8]
 800869a:	4605      	mov	r5, r0
 800869c:	460e      	mov	r6, r1
 800869e:	b90b      	cbnz	r3, 80086a4 <_puts_r+0x10>
 80086a0:	f7ff ffb0 	bl	8008604 <__sinit>
 80086a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086a6:	07db      	lsls	r3, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_puts_r+0x22>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	0598      	lsls	r0, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_puts_r+0x22>
 80086b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b2:	f000 f9d8 	bl	8008a66 <__retarget_lock_acquire_recursive>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	0719      	lsls	r1, r3, #28
 80086ba:	d502      	bpl.n	80086c2 <_puts_r+0x2e>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d135      	bne.n	800872e <_puts_r+0x9a>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 f8fb 	bl	80088c0 <__swsetup_r>
 80086ca:	b380      	cbz	r0, 800872e <_puts_r+0x9a>
 80086cc:	f04f 35ff 	mov.w	r5, #4294967295
 80086d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_puts_r+0x4e>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_puts_r+0x4e>
 80086dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086de:	f000 f9c3 	bl	8008a68 <__retarget_lock_release_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da04      	bge.n	80086f4 <_puts_r+0x60>
 80086ea:	69a2      	ldr	r2, [r4, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dc17      	bgt.n	8008720 <_puts_r+0x8c>
 80086f0:	290a      	cmp	r1, #10
 80086f2:	d015      	beq.n	8008720 <_puts_r+0x8c>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008702:	3b01      	subs	r3, #1
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	2900      	cmp	r1, #0
 8008708:	d1ed      	bne.n	80086e6 <_puts_r+0x52>
 800870a:	2b00      	cmp	r3, #0
 800870c:	da11      	bge.n	8008732 <_puts_r+0x9e>
 800870e:	4622      	mov	r2, r4
 8008710:	210a      	movs	r1, #10
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f895 	bl	8008842 <__swbuf_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d0d7      	beq.n	80086cc <_puts_r+0x38>
 800871c:	250a      	movs	r5, #10
 800871e:	e7d7      	b.n	80086d0 <_puts_r+0x3c>
 8008720:	4622      	mov	r2, r4
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f88d 	bl	8008842 <__swbuf_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d1e7      	bne.n	80086fc <_puts_r+0x68>
 800872c:	e7ce      	b.n	80086cc <_puts_r+0x38>
 800872e:	3e01      	subs	r6, #1
 8008730:	e7e4      	b.n	80086fc <_puts_r+0x68>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	220a      	movs	r2, #10
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e7ee      	b.n	800871c <_puts_r+0x88>
	...

08008740 <puts>:
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <puts+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7ff bfa5 	b.w	8008694 <_puts_r>
 800874a:	bf00      	nop
 800874c:	2000001c 	.word	0x2000001c

08008750 <sniprintf>:
 8008750:	b40c      	push	{r2, r3}
 8008752:	b530      	push	{r4, r5, lr}
 8008754:	4b18      	ldr	r3, [pc, #96]	@ (80087b8 <sniprintf+0x68>)
 8008756:	1e0c      	subs	r4, r1, #0
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	b09d      	sub	sp, #116	@ 0x74
 800875c:	da08      	bge.n	8008770 <sniprintf+0x20>
 800875e:	238b      	movs	r3, #139	@ 0x8b
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	f04f 30ff 	mov.w	r0, #4294967295
 8008766:	b01d      	add	sp, #116	@ 0x74
 8008768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800876c:	b002      	add	sp, #8
 800876e:	4770      	bx	lr
 8008770:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008774:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800877e:	bf14      	ite	ne
 8008780:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008784:	4623      	moveq	r3, r4
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800878e:	9002      	str	r0, [sp, #8]
 8008790:	9006      	str	r0, [sp, #24]
 8008792:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008796:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008798:	ab21      	add	r3, sp, #132	@ 0x84
 800879a:	a902      	add	r1, sp, #8
 800879c:	4628      	mov	r0, r5
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	f001 fc94 	bl	800a0cc <_svfiprintf_r>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	bfbc      	itt	lt
 80087a8:	238b      	movlt	r3, #139	@ 0x8b
 80087aa:	602b      	strlt	r3, [r5, #0]
 80087ac:	2c00      	cmp	r4, #0
 80087ae:	d0da      	beq.n	8008766 <sniprintf+0x16>
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e7d6      	b.n	8008766 <sniprintf+0x16>
 80087b8:	2000001c 	.word	0x2000001c

080087bc <__sread>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f900 	bl	80089c8 <_read_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	bfab      	itete	ge
 80087cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087ce:	89a3      	ldrhlt	r3, [r4, #12]
 80087d0:	181b      	addge	r3, r3, r0
 80087d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087d6:	bfac      	ite	ge
 80087d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087da:	81a3      	strhlt	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__swrite>:
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	461f      	mov	r7, r3
 80087e4:	898b      	ldrh	r3, [r1, #12]
 80087e6:	05db      	lsls	r3, r3, #23
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4616      	mov	r6, r2
 80087ee:	d505      	bpl.n	80087fc <__swrite+0x1e>
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	2302      	movs	r3, #2
 80087f6:	2200      	movs	r2, #0
 80087f8:	f000 f8d4 	bl	80089a4 <_lseek_r>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	4632      	mov	r2, r6
 800880a:	463b      	mov	r3, r7
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	f000 b8eb 	b.w	80089ec <_write_r>

08008816 <__sseek>:
 8008816:	b510      	push	{r4, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 f8c1 	bl	80089a4 <_lseek_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	bf15      	itete	ne
 8008828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800882a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800882e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008832:	81a3      	strheq	r3, [r4, #12]
 8008834:	bf18      	it	ne
 8008836:	81a3      	strhne	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__sclose>:
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 b8a1 	b.w	8008984 <_close_r>

08008842 <__swbuf_r>:
 8008842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008844:	460e      	mov	r6, r1
 8008846:	4614      	mov	r4, r2
 8008848:	4605      	mov	r5, r0
 800884a:	b118      	cbz	r0, 8008854 <__swbuf_r+0x12>
 800884c:	6a03      	ldr	r3, [r0, #32]
 800884e:	b90b      	cbnz	r3, 8008854 <__swbuf_r+0x12>
 8008850:	f7ff fed8 	bl	8008604 <__sinit>
 8008854:	69a3      	ldr	r3, [r4, #24]
 8008856:	60a3      	str	r3, [r4, #8]
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	071a      	lsls	r2, r3, #28
 800885c:	d501      	bpl.n	8008862 <__swbuf_r+0x20>
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	b943      	cbnz	r3, 8008874 <__swbuf_r+0x32>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f82b 	bl	80088c0 <__swsetup_r>
 800886a:	b118      	cbz	r0, 8008874 <__swbuf_r+0x32>
 800886c:	f04f 37ff 	mov.w	r7, #4294967295
 8008870:	4638      	mov	r0, r7
 8008872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	6922      	ldr	r2, [r4, #16]
 8008878:	1a98      	subs	r0, r3, r2
 800887a:	6963      	ldr	r3, [r4, #20]
 800887c:	b2f6      	uxtb	r6, r6
 800887e:	4283      	cmp	r3, r0
 8008880:	4637      	mov	r7, r6
 8008882:	dc05      	bgt.n	8008890 <__swbuf_r+0x4e>
 8008884:	4621      	mov	r1, r4
 8008886:	4628      	mov	r0, r5
 8008888:	f001 fee2 	bl	800a650 <_fflush_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	d1ed      	bne.n	800886c <__swbuf_r+0x2a>
 8008890:	68a3      	ldr	r3, [r4, #8]
 8008892:	3b01      	subs	r3, #1
 8008894:	60a3      	str	r3, [r4, #8]
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	6022      	str	r2, [r4, #0]
 800889c:	701e      	strb	r6, [r3, #0]
 800889e:	6962      	ldr	r2, [r4, #20]
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d004      	beq.n	80088b0 <__swbuf_r+0x6e>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	07db      	lsls	r3, r3, #31
 80088aa:	d5e1      	bpl.n	8008870 <__swbuf_r+0x2e>
 80088ac:	2e0a      	cmp	r6, #10
 80088ae:	d1df      	bne.n	8008870 <__swbuf_r+0x2e>
 80088b0:	4621      	mov	r1, r4
 80088b2:	4628      	mov	r0, r5
 80088b4:	f001 fecc 	bl	800a650 <_fflush_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d0d9      	beq.n	8008870 <__swbuf_r+0x2e>
 80088bc:	e7d6      	b.n	800886c <__swbuf_r+0x2a>
	...

080088c0 <__swsetup_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4b29      	ldr	r3, [pc, #164]	@ (8008968 <__swsetup_r+0xa8>)
 80088c4:	4605      	mov	r5, r0
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	460c      	mov	r4, r1
 80088ca:	b118      	cbz	r0, 80088d4 <__swsetup_r+0x14>
 80088cc:	6a03      	ldr	r3, [r0, #32]
 80088ce:	b90b      	cbnz	r3, 80088d4 <__swsetup_r+0x14>
 80088d0:	f7ff fe98 	bl	8008604 <__sinit>
 80088d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d8:	0719      	lsls	r1, r3, #28
 80088da:	d422      	bmi.n	8008922 <__swsetup_r+0x62>
 80088dc:	06da      	lsls	r2, r3, #27
 80088de:	d407      	bmi.n	80088f0 <__swsetup_r+0x30>
 80088e0:	2209      	movs	r2, #9
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295
 80088ee:	e033      	b.n	8008958 <__swsetup_r+0x98>
 80088f0:	0758      	lsls	r0, r3, #29
 80088f2:	d512      	bpl.n	800891a <__swsetup_r+0x5a>
 80088f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088f6:	b141      	cbz	r1, 800890a <__swsetup_r+0x4a>
 80088f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088fc:	4299      	cmp	r1, r3
 80088fe:	d002      	beq.n	8008906 <__swsetup_r+0x46>
 8008900:	4628      	mov	r0, r5
 8008902:	f000 ff0d 	bl	8009720 <_free_r>
 8008906:	2300      	movs	r3, #0
 8008908:	6363      	str	r3, [r4, #52]	@ 0x34
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	2300      	movs	r3, #0
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f043 0308 	orr.w	r3, r3, #8
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	b94b      	cbnz	r3, 800893a <__swsetup_r+0x7a>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800892c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008930:	d003      	beq.n	800893a <__swsetup_r+0x7a>
 8008932:	4621      	mov	r1, r4
 8008934:	4628      	mov	r0, r5
 8008936:	f001 fed9 	bl	800a6ec <__smakebuf_r>
 800893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893e:	f013 0201 	ands.w	r2, r3, #1
 8008942:	d00a      	beq.n	800895a <__swsetup_r+0x9a>
 8008944:	2200      	movs	r2, #0
 8008946:	60a2      	str	r2, [r4, #8]
 8008948:	6962      	ldr	r2, [r4, #20]
 800894a:	4252      	negs	r2, r2
 800894c:	61a2      	str	r2, [r4, #24]
 800894e:	6922      	ldr	r2, [r4, #16]
 8008950:	b942      	cbnz	r2, 8008964 <__swsetup_r+0xa4>
 8008952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008956:	d1c5      	bne.n	80088e4 <__swsetup_r+0x24>
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	0799      	lsls	r1, r3, #30
 800895c:	bf58      	it	pl
 800895e:	6962      	ldrpl	r2, [r4, #20]
 8008960:	60a2      	str	r2, [r4, #8]
 8008962:	e7f4      	b.n	800894e <__swsetup_r+0x8e>
 8008964:	2000      	movs	r0, #0
 8008966:	e7f7      	b.n	8008958 <__swsetup_r+0x98>
 8008968:	2000001c 	.word	0x2000001c

0800896c <memset>:
 800896c:	4402      	add	r2, r0
 800896e:	4603      	mov	r3, r0
 8008970:	4293      	cmp	r3, r2
 8008972:	d100      	bne.n	8008976 <memset+0xa>
 8008974:	4770      	bx	lr
 8008976:	f803 1b01 	strb.w	r1, [r3], #1
 800897a:	e7f9      	b.n	8008970 <memset+0x4>

0800897c <_localeconv_r>:
 800897c:	4800      	ldr	r0, [pc, #0]	@ (8008980 <_localeconv_r+0x4>)
 800897e:	4770      	bx	lr
 8008980:	2000015c 	.word	0x2000015c

08008984 <_close_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_close_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7f9 fa46 	bl	8001e20 <_close>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_close_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_close_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	200004d0 	.word	0x200004d0

080089a4 <_lseek_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	@ (80089c4 <_lseek_r+0x20>)
 80089a8:	4604      	mov	r4, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	602a      	str	r2, [r5, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7f9 fa5b 	bl	8001e6e <_lseek>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_lseek_r+0x1e>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_lseek_r+0x1e>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	200004d0 	.word	0x200004d0

080089c8 <_read_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_read_r+0x20>)
 80089cc:	4604      	mov	r4, r0
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f7f9 f9e9 	bl	8001dae <_read>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_read_r+0x1e>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_read_r+0x1e>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	200004d0 	.word	0x200004d0

080089ec <_write_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	@ (8008a0c <_write_r+0x20>)
 80089f0:	4604      	mov	r4, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	602a      	str	r2, [r5, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f7f9 f9f4 	bl	8001de8 <_write>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_write_r+0x1e>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_write_r+0x1e>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	200004d0 	.word	0x200004d0

08008a10 <__errno>:
 8008a10:	4b01      	ldr	r3, [pc, #4]	@ (8008a18 <__errno+0x8>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	2000001c 	.word	0x2000001c

08008a1c <__libc_init_array>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a54 <__libc_init_array+0x38>)
 8008a20:	4c0d      	ldr	r4, [pc, #52]	@ (8008a58 <__libc_init_array+0x3c>)
 8008a22:	1b64      	subs	r4, r4, r5
 8008a24:	10a4      	asrs	r4, r4, #2
 8008a26:	2600      	movs	r6, #0
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	d109      	bne.n	8008a40 <__libc_init_array+0x24>
 8008a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a5c <__libc_init_array+0x40>)
 8008a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a60 <__libc_init_array+0x44>)
 8008a30:	f001 ffd8 	bl	800a9e4 <_init>
 8008a34:	1b64      	subs	r4, r4, r5
 8008a36:	10a4      	asrs	r4, r4, #2
 8008a38:	2600      	movs	r6, #0
 8008a3a:	42a6      	cmp	r6, r4
 8008a3c:	d105      	bne.n	8008a4a <__libc_init_array+0x2e>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a44:	4798      	blx	r3
 8008a46:	3601      	adds	r6, #1
 8008a48:	e7ee      	b.n	8008a28 <__libc_init_array+0xc>
 8008a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4e:	4798      	blx	r3
 8008a50:	3601      	adds	r6, #1
 8008a52:	e7f2      	b.n	8008a3a <__libc_init_array+0x1e>
 8008a54:	0800aecc 	.word	0x0800aecc
 8008a58:	0800aecc 	.word	0x0800aecc
 8008a5c:	0800aecc 	.word	0x0800aecc
 8008a60:	0800aed0 	.word	0x0800aed0

08008a64 <__retarget_lock_init_recursive>:
 8008a64:	4770      	bx	lr

08008a66 <__retarget_lock_acquire_recursive>:
 8008a66:	4770      	bx	lr

08008a68 <__retarget_lock_release_recursive>:
 8008a68:	4770      	bx	lr

08008a6a <quorem>:
 8008a6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6e:	6903      	ldr	r3, [r0, #16]
 8008a70:	690c      	ldr	r4, [r1, #16]
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	4607      	mov	r7, r0
 8008a76:	db7e      	blt.n	8008b76 <quorem+0x10c>
 8008a78:	3c01      	subs	r4, #1
 8008a7a:	f101 0814 	add.w	r8, r1, #20
 8008a7e:	00a3      	lsls	r3, r4, #2
 8008a80:	f100 0514 	add.w	r5, r0, #20
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a94:	3301      	adds	r3, #1
 8008a96:	429a      	cmp	r2, r3
 8008a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aa0:	d32e      	bcc.n	8008b00 <quorem+0x96>
 8008aa2:	f04f 0a00 	mov.w	sl, #0
 8008aa6:	46c4      	mov	ip, r8
 8008aa8:	46ae      	mov	lr, r5
 8008aaa:	46d3      	mov	fp, sl
 8008aac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ab0:	b298      	uxth	r0, r3
 8008ab2:	fb06 a000 	mla	r0, r6, r0, sl
 8008ab6:	0c02      	lsrs	r2, r0, #16
 8008ab8:	0c1b      	lsrs	r3, r3, #16
 8008aba:	fb06 2303 	mla	r3, r6, r3, r2
 8008abe:	f8de 2000 	ldr.w	r2, [lr]
 8008ac2:	b280      	uxth	r0, r0
 8008ac4:	b292      	uxth	r2, r2
 8008ac6:	1a12      	subs	r2, r2, r0
 8008ac8:	445a      	add	r2, fp
 8008aca:	f8de 0000 	ldr.w	r0, [lr]
 8008ace:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ad8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008adc:	b292      	uxth	r2, r2
 8008ade:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ae2:	45e1      	cmp	r9, ip
 8008ae4:	f84e 2b04 	str.w	r2, [lr], #4
 8008ae8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008aec:	d2de      	bcs.n	8008aac <quorem+0x42>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	58eb      	ldr	r3, [r5, r3]
 8008af2:	b92b      	cbnz	r3, 8008b00 <quorem+0x96>
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	3b04      	subs	r3, #4
 8008af8:	429d      	cmp	r5, r3
 8008afa:	461a      	mov	r2, r3
 8008afc:	d32f      	bcc.n	8008b5e <quorem+0xf4>
 8008afe:	613c      	str	r4, [r7, #16]
 8008b00:	4638      	mov	r0, r7
 8008b02:	f001 f97f 	bl	8009e04 <__mcmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	db25      	blt.n	8008b56 <quorem+0xec>
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b12:	f8d1 c000 	ldr.w	ip, [r1]
 8008b16:	fa1f fe82 	uxth.w	lr, r2
 8008b1a:	fa1f f38c 	uxth.w	r3, ip
 8008b1e:	eba3 030e 	sub.w	r3, r3, lr
 8008b22:	4403      	add	r3, r0
 8008b24:	0c12      	lsrs	r2, r2, #16
 8008b26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b34:	45c1      	cmp	r9, r8
 8008b36:	f841 3b04 	str.w	r3, [r1], #4
 8008b3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b3e:	d2e6      	bcs.n	8008b0e <quorem+0xa4>
 8008b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b48:	b922      	cbnz	r2, 8008b54 <quorem+0xea>
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	429d      	cmp	r5, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	d30b      	bcc.n	8008b6a <quorem+0x100>
 8008b52:	613c      	str	r4, [r7, #16]
 8008b54:	3601      	adds	r6, #1
 8008b56:	4630      	mov	r0, r6
 8008b58:	b003      	add	sp, #12
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	3b04      	subs	r3, #4
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d1cb      	bne.n	8008afe <quorem+0x94>
 8008b66:	3c01      	subs	r4, #1
 8008b68:	e7c6      	b.n	8008af8 <quorem+0x8e>
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	3b04      	subs	r3, #4
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	d1ef      	bne.n	8008b52 <quorem+0xe8>
 8008b72:	3c01      	subs	r4, #1
 8008b74:	e7ea      	b.n	8008b4c <quorem+0xe2>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e7ee      	b.n	8008b58 <quorem+0xee>
 8008b7a:	0000      	movs	r0, r0
 8008b7c:	0000      	movs	r0, r0
	...

08008b80 <_dtoa_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	69c7      	ldr	r7, [r0, #28]
 8008b86:	b097      	sub	sp, #92	@ 0x5c
 8008b88:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b8c:	ec55 4b10 	vmov	r4, r5, d0
 8008b90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008b92:	9107      	str	r1, [sp, #28]
 8008b94:	4681      	mov	r9, r0
 8008b96:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b9a:	b97f      	cbnz	r7, 8008bbc <_dtoa_r+0x3c>
 8008b9c:	2010      	movs	r0, #16
 8008b9e:	f000 fe09 	bl	80097b4 <malloc>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ba8:	b920      	cbnz	r0, 8008bb4 <_dtoa_r+0x34>
 8008baa:	4ba9      	ldr	r3, [pc, #676]	@ (8008e50 <_dtoa_r+0x2d0>)
 8008bac:	21ef      	movs	r1, #239	@ 0xef
 8008bae:	48a9      	ldr	r0, [pc, #676]	@ (8008e54 <_dtoa_r+0x2d4>)
 8008bb0:	f001 fe32 	bl	800a818 <__assert_func>
 8008bb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008bb8:	6007      	str	r7, [r0, #0]
 8008bba:	60c7      	str	r7, [r0, #12]
 8008bbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	b159      	cbz	r1, 8008bdc <_dtoa_r+0x5c>
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	604a      	str	r2, [r1, #4]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4093      	lsls	r3, r2
 8008bcc:	608b      	str	r3, [r1, #8]
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f000 fee6 	bl	80099a0 <_Bfree>
 8008bd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	1e2b      	subs	r3, r5, #0
 8008bde:	bfb9      	ittee	lt
 8008be0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008be4:	9305      	strlt	r3, [sp, #20]
 8008be6:	2300      	movge	r3, #0
 8008be8:	6033      	strge	r3, [r6, #0]
 8008bea:	9f05      	ldr	r7, [sp, #20]
 8008bec:	4b9a      	ldr	r3, [pc, #616]	@ (8008e58 <_dtoa_r+0x2d8>)
 8008bee:	bfbc      	itt	lt
 8008bf0:	2201      	movlt	r2, #1
 8008bf2:	6032      	strlt	r2, [r6, #0]
 8008bf4:	43bb      	bics	r3, r7
 8008bf6:	d112      	bne.n	8008c1e <_dtoa_r+0x9e>
 8008bf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c04:	4323      	orrs	r3, r4
 8008c06:	f000 855a 	beq.w	80096be <_dtoa_r+0xb3e>
 8008c0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008e6c <_dtoa_r+0x2ec>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 855c 	beq.w	80096ce <_dtoa_r+0xb4e>
 8008c16:	f10a 0303 	add.w	r3, sl, #3
 8008c1a:	f000 bd56 	b.w	80096ca <_dtoa_r+0xb4a>
 8008c1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c22:	2200      	movs	r2, #0
 8008c24:	ec51 0b17 	vmov	r0, r1, d7
 8008c28:	2300      	movs	r3, #0
 8008c2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008c2e:	f7f7 ff53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c32:	4680      	mov	r8, r0
 8008c34:	b158      	cbz	r0, 8008c4e <_dtoa_r+0xce>
 8008c36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c38:	2301      	movs	r3, #1
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c3e:	b113      	cbz	r3, 8008c46 <_dtoa_r+0xc6>
 8008c40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c42:	4b86      	ldr	r3, [pc, #536]	@ (8008e5c <_dtoa_r+0x2dc>)
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008e70 <_dtoa_r+0x2f0>
 8008c4a:	f000 bd40 	b.w	80096ce <_dtoa_r+0xb4e>
 8008c4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008c52:	aa14      	add	r2, sp, #80	@ 0x50
 8008c54:	a915      	add	r1, sp, #84	@ 0x54
 8008c56:	4648      	mov	r0, r9
 8008c58:	f001 f984 	bl	8009f64 <__d2b>
 8008c5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c60:	9002      	str	r0, [sp, #8]
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	d078      	beq.n	8008d58 <_dtoa_r+0x1d8>
 8008c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c80:	4619      	mov	r1, r3
 8008c82:	2200      	movs	r2, #0
 8008c84:	4b76      	ldr	r3, [pc, #472]	@ (8008e60 <_dtoa_r+0x2e0>)
 8008c86:	f7f7 fb07 	bl	8000298 <__aeabi_dsub>
 8008c8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008e38 <_dtoa_r+0x2b8>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fcba 	bl	8000608 <__aeabi_dmul>
 8008c94:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e40 <_dtoa_r+0x2c0>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 faff 	bl	800029c <__adddf3>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	f7f7 fc46 	bl	8000534 <__aeabi_i2d>
 8008ca8:	a367      	add	r3, pc, #412	@ (adr r3, 8008e48 <_dtoa_r+0x2c8>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fcab 	bl	8000608 <__aeabi_dmul>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 faef 	bl	800029c <__adddf3>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	f7f7 ff51 	bl	8000b68 <__aeabi_d2iz>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	4607      	mov	r7, r0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 ff0c 	bl	8000aec <__aeabi_dcmplt>
 8008cd4:	b140      	cbz	r0, 8008ce8 <_dtoa_r+0x168>
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7f7 fc2c 	bl	8000534 <__aeabi_i2d>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	462b      	mov	r3, r5
 8008ce0:	f7f7 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ce4:	b900      	cbnz	r0, 8008ce8 <_dtoa_r+0x168>
 8008ce6:	3f01      	subs	r7, #1
 8008ce8:	2f16      	cmp	r7, #22
 8008cea:	d852      	bhi.n	8008d92 <_dtoa_r+0x212>
 8008cec:	4b5d      	ldr	r3, [pc, #372]	@ (8008e64 <_dtoa_r+0x2e4>)
 8008cee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cfa:	f7f7 fef7 	bl	8000aec <__aeabi_dcmplt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d049      	beq.n	8008d96 <_dtoa_r+0x216>
 8008d02:	3f01      	subs	r7, #1
 8008d04:	2300      	movs	r3, #0
 8008d06:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d0a:	1b9b      	subs	r3, r3, r6
 8008d0c:	1e5a      	subs	r2, r3, #1
 8008d0e:	bf45      	ittet	mi
 8008d10:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d14:	9300      	strmi	r3, [sp, #0]
 8008d16:	2300      	movpl	r3, #0
 8008d18:	2300      	movmi	r3, #0
 8008d1a:	9206      	str	r2, [sp, #24]
 8008d1c:	bf54      	ite	pl
 8008d1e:	9300      	strpl	r3, [sp, #0]
 8008d20:	9306      	strmi	r3, [sp, #24]
 8008d22:	2f00      	cmp	r7, #0
 8008d24:	db39      	blt.n	8008d9a <_dtoa_r+0x21a>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	970d      	str	r7, [sp, #52]	@ 0x34
 8008d2a:	443b      	add	r3, r7
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	9b07      	ldr	r3, [sp, #28]
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d863      	bhi.n	8008e00 <_dtoa_r+0x280>
 8008d38:	2b05      	cmp	r3, #5
 8008d3a:	bfc4      	itt	gt
 8008d3c:	3b04      	subgt	r3, #4
 8008d3e:	9307      	strgt	r3, [sp, #28]
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	f1a3 0302 	sub.w	r3, r3, #2
 8008d46:	bfcc      	ite	gt
 8008d48:	2400      	movgt	r4, #0
 8008d4a:	2401      	movle	r4, #1
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d863      	bhi.n	8008e18 <_dtoa_r+0x298>
 8008d50:	e8df f003 	tbb	[pc, r3]
 8008d54:	2b375452 	.word	0x2b375452
 8008d58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008d5c:	441e      	add	r6, r3
 8008d5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	bfc1      	itttt	gt
 8008d66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d6a:	409f      	lslgt	r7, r3
 8008d6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d70:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d74:	bfd6      	itet	le
 8008d76:	f1c3 0320 	rsble	r3, r3, #32
 8008d7a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d7e:	fa04 f003 	lslle.w	r0, r4, r3
 8008d82:	f7f7 fbc7 	bl	8000514 <__aeabi_ui2d>
 8008d86:	2201      	movs	r2, #1
 8008d88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d8c:	3e01      	subs	r6, #1
 8008d8e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d90:	e776      	b.n	8008c80 <_dtoa_r+0x100>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e7b7      	b.n	8008d06 <_dtoa_r+0x186>
 8008d96:	9010      	str	r0, [sp, #64]	@ 0x40
 8008d98:	e7b6      	b.n	8008d08 <_dtoa_r+0x188>
 8008d9a:	9b00      	ldr	r3, [sp, #0]
 8008d9c:	1bdb      	subs	r3, r3, r7
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	427b      	negs	r3, r7
 8008da2:	9308      	str	r3, [sp, #32]
 8008da4:	2300      	movs	r3, #0
 8008da6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008da8:	e7c3      	b.n	8008d32 <_dtoa_r+0x1b2>
 8008daa:	2301      	movs	r3, #1
 8008dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008db0:	eb07 0b03 	add.w	fp, r7, r3
 8008db4:	f10b 0301 	add.w	r3, fp, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	bfb8      	it	lt
 8008dbe:	2301      	movlt	r3, #1
 8008dc0:	e006      	b.n	8008dd0 <_dtoa_r+0x250>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd28      	ble.n	8008e1e <_dtoa_r+0x29e>
 8008dcc:	469b      	mov	fp, r3
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	f102 0514 	add.w	r5, r2, #20
 8008ddc:	429d      	cmp	r5, r3
 8008dde:	d926      	bls.n	8008e2e <_dtoa_r+0x2ae>
 8008de0:	6041      	str	r1, [r0, #4]
 8008de2:	4648      	mov	r0, r9
 8008de4:	f000 fd9c 	bl	8009920 <_Balloc>
 8008de8:	4682      	mov	sl, r0
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d142      	bne.n	8008e74 <_dtoa_r+0x2f4>
 8008dee:	4b1e      	ldr	r3, [pc, #120]	@ (8008e68 <_dtoa_r+0x2e8>)
 8008df0:	4602      	mov	r2, r0
 8008df2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008df6:	e6da      	b.n	8008bae <_dtoa_r+0x2e>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e7e3      	b.n	8008dc4 <_dtoa_r+0x244>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e7d5      	b.n	8008dac <_dtoa_r+0x22c>
 8008e00:	2401      	movs	r4, #1
 8008e02:	2300      	movs	r3, #0
 8008e04:	9307      	str	r3, [sp, #28]
 8008e06:	9409      	str	r4, [sp, #36]	@ 0x24
 8008e08:	f04f 3bff 	mov.w	fp, #4294967295
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e12:	2312      	movs	r3, #18
 8008e14:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e16:	e7db      	b.n	8008dd0 <_dtoa_r+0x250>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e1c:	e7f4      	b.n	8008e08 <_dtoa_r+0x288>
 8008e1e:	f04f 0b01 	mov.w	fp, #1
 8008e22:	f8cd b00c 	str.w	fp, [sp, #12]
 8008e26:	465b      	mov	r3, fp
 8008e28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008e2c:	e7d0      	b.n	8008dd0 <_dtoa_r+0x250>
 8008e2e:	3101      	adds	r1, #1
 8008e30:	0052      	lsls	r2, r2, #1
 8008e32:	e7d1      	b.n	8008dd8 <_dtoa_r+0x258>
 8008e34:	f3af 8000 	nop.w
 8008e38:	636f4361 	.word	0x636f4361
 8008e3c:	3fd287a7 	.word	0x3fd287a7
 8008e40:	8b60c8b3 	.word	0x8b60c8b3
 8008e44:	3fc68a28 	.word	0x3fc68a28
 8008e48:	509f79fb 	.word	0x509f79fb
 8008e4c:	3fd34413 	.word	0x3fd34413
 8008e50:	0800ab35 	.word	0x0800ab35
 8008e54:	0800ab4c 	.word	0x0800ab4c
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	0800ab05 	.word	0x0800ab05
 8008e60:	3ff80000 	.word	0x3ff80000
 8008e64:	0800acf8 	.word	0x0800acf8
 8008e68:	0800aba4 	.word	0x0800aba4
 8008e6c:	0800ab31 	.word	0x0800ab31
 8008e70:	0800ab04 	.word	0x0800ab04
 8008e74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e78:	6018      	str	r0, [r3, #0]
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	2b0e      	cmp	r3, #14
 8008e7e:	f200 80a1 	bhi.w	8008fc4 <_dtoa_r+0x444>
 8008e82:	2c00      	cmp	r4, #0
 8008e84:	f000 809e 	beq.w	8008fc4 <_dtoa_r+0x444>
 8008e88:	2f00      	cmp	r7, #0
 8008e8a:	dd33      	ble.n	8008ef4 <_dtoa_r+0x374>
 8008e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8009100 <_dtoa_r+0x580>)
 8008e8e:	f007 020f 	and.w	r2, r7, #15
 8008e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e96:	ed93 7b00 	vldr	d7, [r3]
 8008e9a:	05f8      	lsls	r0, r7, #23
 8008e9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ea4:	d516      	bpl.n	8008ed4 <_dtoa_r+0x354>
 8008ea6:	4b97      	ldr	r3, [pc, #604]	@ (8009104 <_dtoa_r+0x584>)
 8008ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eb0:	f7f7 fcd4 	bl	800085c <__aeabi_ddiv>
 8008eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eb8:	f004 040f 	and.w	r4, r4, #15
 8008ebc:	2603      	movs	r6, #3
 8008ebe:	4d91      	ldr	r5, [pc, #580]	@ (8009104 <_dtoa_r+0x584>)
 8008ec0:	b954      	cbnz	r4, 8008ed8 <_dtoa_r+0x358>
 8008ec2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eca:	f7f7 fcc7 	bl	800085c <__aeabi_ddiv>
 8008ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ed2:	e028      	b.n	8008f26 <_dtoa_r+0x3a6>
 8008ed4:	2602      	movs	r6, #2
 8008ed6:	e7f2      	b.n	8008ebe <_dtoa_r+0x33e>
 8008ed8:	07e1      	lsls	r1, r4, #31
 8008eda:	d508      	bpl.n	8008eee <_dtoa_r+0x36e>
 8008edc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008eec:	3601      	adds	r6, #1
 8008eee:	1064      	asrs	r4, r4, #1
 8008ef0:	3508      	adds	r5, #8
 8008ef2:	e7e5      	b.n	8008ec0 <_dtoa_r+0x340>
 8008ef4:	f000 80af 	beq.w	8009056 <_dtoa_r+0x4d6>
 8008ef8:	427c      	negs	r4, r7
 8008efa:	4b81      	ldr	r3, [pc, #516]	@ (8009100 <_dtoa_r+0x580>)
 8008efc:	4d81      	ldr	r5, [pc, #516]	@ (8009104 <_dtoa_r+0x584>)
 8008efe:	f004 020f 	and.w	r2, r4, #15
 8008f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f0e:	f7f7 fb7b 	bl	8000608 <__aeabi_dmul>
 8008f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f16:	1124      	asrs	r4, r4, #4
 8008f18:	2300      	movs	r3, #0
 8008f1a:	2602      	movs	r6, #2
 8008f1c:	2c00      	cmp	r4, #0
 8008f1e:	f040 808f 	bne.w	8009040 <_dtoa_r+0x4c0>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1d3      	bne.n	8008ece <_dtoa_r+0x34e>
 8008f26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8094 	beq.w	800905a <_dtoa_r+0x4da>
 8008f32:	4b75      	ldr	r3, [pc, #468]	@ (8009108 <_dtoa_r+0x588>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f000 808b 	beq.w	800905a <_dtoa_r+0x4da>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 8087 	beq.w	800905a <_dtoa_r+0x4da>
 8008f4c:	f1bb 0f00 	cmp.w	fp, #0
 8008f50:	dd34      	ble.n	8008fbc <_dtoa_r+0x43c>
 8008f52:	4620      	mov	r0, r4
 8008f54:	4b6d      	ldr	r3, [pc, #436]	@ (800910c <_dtoa_r+0x58c>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 fb55 	bl	8000608 <__aeabi_dmul>
 8008f5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f62:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f66:	3601      	adds	r6, #1
 8008f68:	465c      	mov	r4, fp
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7f7 fae2 	bl	8000534 <__aeabi_i2d>
 8008f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f74:	f7f7 fb48 	bl	8000608 <__aeabi_dmul>
 8008f78:	4b65      	ldr	r3, [pc, #404]	@ (8009110 <_dtoa_r+0x590>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f7f7 f98e 	bl	800029c <__adddf3>
 8008f80:	4605      	mov	r5, r0
 8008f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d16a      	bne.n	8009060 <_dtoa_r+0x4e0>
 8008f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f8e:	4b61      	ldr	r3, [pc, #388]	@ (8009114 <_dtoa_r+0x594>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	f7f7 f981 	bl	8000298 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4633      	mov	r3, r6
 8008fa2:	f7f7 fdc1 	bl	8000b28 <__aeabi_dcmpgt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f040 8298 	bne.w	80094dc <_dtoa_r+0x95c>
 8008fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008fb6:	f7f7 fd99 	bl	8000aec <__aeabi_dcmplt>
 8008fba:	bb38      	cbnz	r0, 800900c <_dtoa_r+0x48c>
 8008fbc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008fc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008fc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f2c0 8157 	blt.w	800927a <_dtoa_r+0x6fa>
 8008fcc:	2f0e      	cmp	r7, #14
 8008fce:	f300 8154 	bgt.w	800927a <_dtoa_r+0x6fa>
 8008fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8009100 <_dtoa_r+0x580>)
 8008fd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fd8:	ed93 7b00 	vldr	d7, [r3]
 8008fdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	ed8d 7b00 	vstr	d7, [sp]
 8008fe4:	f280 80e5 	bge.w	80091b2 <_dtoa_r+0x632>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f300 80e1 	bgt.w	80091b2 <_dtoa_r+0x632>
 8008ff0:	d10c      	bne.n	800900c <_dtoa_r+0x48c>
 8008ff2:	4b48      	ldr	r3, [pc, #288]	@ (8009114 <_dtoa_r+0x594>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	ec51 0b17 	vmov	r0, r1, d7
 8008ffa:	f7f7 fb05 	bl	8000608 <__aeabi_dmul>
 8008ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009002:	f7f7 fd87 	bl	8000b14 <__aeabi_dcmpge>
 8009006:	2800      	cmp	r0, #0
 8009008:	f000 8266 	beq.w	80094d8 <_dtoa_r+0x958>
 800900c:	2400      	movs	r4, #0
 800900e:	4625      	mov	r5, r4
 8009010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009012:	4656      	mov	r6, sl
 8009014:	ea6f 0803 	mvn.w	r8, r3
 8009018:	2700      	movs	r7, #0
 800901a:	4621      	mov	r1, r4
 800901c:	4648      	mov	r0, r9
 800901e:	f000 fcbf 	bl	80099a0 <_Bfree>
 8009022:	2d00      	cmp	r5, #0
 8009024:	f000 80bd 	beq.w	80091a2 <_dtoa_r+0x622>
 8009028:	b12f      	cbz	r7, 8009036 <_dtoa_r+0x4b6>
 800902a:	42af      	cmp	r7, r5
 800902c:	d003      	beq.n	8009036 <_dtoa_r+0x4b6>
 800902e:	4639      	mov	r1, r7
 8009030:	4648      	mov	r0, r9
 8009032:	f000 fcb5 	bl	80099a0 <_Bfree>
 8009036:	4629      	mov	r1, r5
 8009038:	4648      	mov	r0, r9
 800903a:	f000 fcb1 	bl	80099a0 <_Bfree>
 800903e:	e0b0      	b.n	80091a2 <_dtoa_r+0x622>
 8009040:	07e2      	lsls	r2, r4, #31
 8009042:	d505      	bpl.n	8009050 <_dtoa_r+0x4d0>
 8009044:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009048:	f7f7 fade 	bl	8000608 <__aeabi_dmul>
 800904c:	3601      	adds	r6, #1
 800904e:	2301      	movs	r3, #1
 8009050:	1064      	asrs	r4, r4, #1
 8009052:	3508      	adds	r5, #8
 8009054:	e762      	b.n	8008f1c <_dtoa_r+0x39c>
 8009056:	2602      	movs	r6, #2
 8009058:	e765      	b.n	8008f26 <_dtoa_r+0x3a6>
 800905a:	9c03      	ldr	r4, [sp, #12]
 800905c:	46b8      	mov	r8, r7
 800905e:	e784      	b.n	8008f6a <_dtoa_r+0x3ea>
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <_dtoa_r+0x580>)
 8009062:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009064:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009068:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800906c:	4454      	add	r4, sl
 800906e:	2900      	cmp	r1, #0
 8009070:	d054      	beq.n	800911c <_dtoa_r+0x59c>
 8009072:	4929      	ldr	r1, [pc, #164]	@ (8009118 <_dtoa_r+0x598>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 fbf1 	bl	800085c <__aeabi_ddiv>
 800907a:	4633      	mov	r3, r6
 800907c:	462a      	mov	r2, r5
 800907e:	f7f7 f90b 	bl	8000298 <__aeabi_dsub>
 8009082:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009086:	4656      	mov	r6, sl
 8009088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800908c:	f7f7 fd6c 	bl	8000b68 <__aeabi_d2iz>
 8009090:	4605      	mov	r5, r0
 8009092:	f7f7 fa4f 	bl	8000534 <__aeabi_i2d>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909e:	f7f7 f8fb 	bl	8000298 <__aeabi_dsub>
 80090a2:	3530      	adds	r5, #48	@ 0x30
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090ac:	f806 5b01 	strb.w	r5, [r6], #1
 80090b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090b4:	f7f7 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d172      	bne.n	80091a2 <_dtoa_r+0x622>
 80090bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c0:	4911      	ldr	r1, [pc, #68]	@ (8009108 <_dtoa_r+0x588>)
 80090c2:	2000      	movs	r0, #0
 80090c4:	f7f7 f8e8 	bl	8000298 <__aeabi_dsub>
 80090c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090cc:	f7f7 fd0e 	bl	8000aec <__aeabi_dcmplt>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f040 80b4 	bne.w	800923e <_dtoa_r+0x6be>
 80090d6:	42a6      	cmp	r6, r4
 80090d8:	f43f af70 	beq.w	8008fbc <_dtoa_r+0x43c>
 80090dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090e0:	4b0a      	ldr	r3, [pc, #40]	@ (800910c <_dtoa_r+0x58c>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	f7f7 fa90 	bl	8000608 <__aeabi_dmul>
 80090e8:	4b08      	ldr	r3, [pc, #32]	@ (800910c <_dtoa_r+0x58c>)
 80090ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090ee:	2200      	movs	r2, #0
 80090f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090fc:	e7c4      	b.n	8009088 <_dtoa_r+0x508>
 80090fe:	bf00      	nop
 8009100:	0800acf8 	.word	0x0800acf8
 8009104:	0800acd0 	.word	0x0800acd0
 8009108:	3ff00000 	.word	0x3ff00000
 800910c:	40240000 	.word	0x40240000
 8009110:	401c0000 	.word	0x401c0000
 8009114:	40140000 	.word	0x40140000
 8009118:	3fe00000 	.word	0x3fe00000
 800911c:	4631      	mov	r1, r6
 800911e:	4628      	mov	r0, r5
 8009120:	f7f7 fa72 	bl	8000608 <__aeabi_dmul>
 8009124:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009128:	9413      	str	r4, [sp, #76]	@ 0x4c
 800912a:	4656      	mov	r6, sl
 800912c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009130:	f7f7 fd1a 	bl	8000b68 <__aeabi_d2iz>
 8009134:	4605      	mov	r5, r0
 8009136:	f7f7 f9fd 	bl	8000534 <__aeabi_i2d>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009142:	f7f7 f8a9 	bl	8000298 <__aeabi_dsub>
 8009146:	3530      	adds	r5, #48	@ 0x30
 8009148:	f806 5b01 	strb.w	r5, [r6], #1
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	42a6      	cmp	r6, r4
 8009152:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	d124      	bne.n	80091a6 <_dtoa_r+0x626>
 800915c:	4baf      	ldr	r3, [pc, #700]	@ (800941c <_dtoa_r+0x89c>)
 800915e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009162:	f7f7 f89b 	bl	800029c <__adddf3>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800916e:	f7f7 fcdb 	bl	8000b28 <__aeabi_dcmpgt>
 8009172:	2800      	cmp	r0, #0
 8009174:	d163      	bne.n	800923e <_dtoa_r+0x6be>
 8009176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800917a:	49a8      	ldr	r1, [pc, #672]	@ (800941c <_dtoa_r+0x89c>)
 800917c:	2000      	movs	r0, #0
 800917e:	f7f7 f88b 	bl	8000298 <__aeabi_dsub>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918a:	f7f7 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f af14 	beq.w	8008fbc <_dtoa_r+0x43c>
 8009194:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009196:	1e73      	subs	r3, r6, #1
 8009198:	9313      	str	r3, [sp, #76]	@ 0x4c
 800919a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800919e:	2b30      	cmp	r3, #48	@ 0x30
 80091a0:	d0f8      	beq.n	8009194 <_dtoa_r+0x614>
 80091a2:	4647      	mov	r7, r8
 80091a4:	e03b      	b.n	800921e <_dtoa_r+0x69e>
 80091a6:	4b9e      	ldr	r3, [pc, #632]	@ (8009420 <_dtoa_r+0x8a0>)
 80091a8:	f7f7 fa2e 	bl	8000608 <__aeabi_dmul>
 80091ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b0:	e7bc      	b.n	800912c <_dtoa_r+0x5ac>
 80091b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80091b6:	4656      	mov	r6, sl
 80091b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 fb4c 	bl	800085c <__aeabi_ddiv>
 80091c4:	f7f7 fcd0 	bl	8000b68 <__aeabi_d2iz>
 80091c8:	4680      	mov	r8, r0
 80091ca:	f7f7 f9b3 	bl	8000534 <__aeabi_i2d>
 80091ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091d2:	f7f7 fa19 	bl	8000608 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80091e2:	f7f7 f859 	bl	8000298 <__aeabi_dsub>
 80091e6:	f806 4b01 	strb.w	r4, [r6], #1
 80091ea:	9d03      	ldr	r5, [sp, #12]
 80091ec:	eba6 040a 	sub.w	r4, r6, sl
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	d133      	bne.n	8009260 <_dtoa_r+0x6e0>
 80091f8:	f7f7 f850 	bl	800029c <__adddf3>
 80091fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	f7f7 fc90 	bl	8000b28 <__aeabi_dcmpgt>
 8009208:	b9c0      	cbnz	r0, 800923c <_dtoa_r+0x6bc>
 800920a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 8009216:	b110      	cbz	r0, 800921e <_dtoa_r+0x69e>
 8009218:	f018 0f01 	tst.w	r8, #1
 800921c:	d10e      	bne.n	800923c <_dtoa_r+0x6bc>
 800921e:	9902      	ldr	r1, [sp, #8]
 8009220:	4648      	mov	r0, r9
 8009222:	f000 fbbd 	bl	80099a0 <_Bfree>
 8009226:	2300      	movs	r3, #0
 8009228:	7033      	strb	r3, [r6, #0]
 800922a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800922c:	3701      	adds	r7, #1
 800922e:	601f      	str	r7, [r3, #0]
 8009230:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 824b 	beq.w	80096ce <_dtoa_r+0xb4e>
 8009238:	601e      	str	r6, [r3, #0]
 800923a:	e248      	b.n	80096ce <_dtoa_r+0xb4e>
 800923c:	46b8      	mov	r8, r7
 800923e:	4633      	mov	r3, r6
 8009240:	461e      	mov	r6, r3
 8009242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009246:	2a39      	cmp	r2, #57	@ 0x39
 8009248:	d106      	bne.n	8009258 <_dtoa_r+0x6d8>
 800924a:	459a      	cmp	sl, r3
 800924c:	d1f8      	bne.n	8009240 <_dtoa_r+0x6c0>
 800924e:	2230      	movs	r2, #48	@ 0x30
 8009250:	f108 0801 	add.w	r8, r8, #1
 8009254:	f88a 2000 	strb.w	r2, [sl]
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	3201      	adds	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e7a0      	b.n	80091a2 <_dtoa_r+0x622>
 8009260:	4b6f      	ldr	r3, [pc, #444]	@ (8009420 <_dtoa_r+0x8a0>)
 8009262:	2200      	movs	r2, #0
 8009264:	f7f7 f9d0 	bl	8000608 <__aeabi_dmul>
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	f7f7 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8009274:	2800      	cmp	r0, #0
 8009276:	d09f      	beq.n	80091b8 <_dtoa_r+0x638>
 8009278:	e7d1      	b.n	800921e <_dtoa_r+0x69e>
 800927a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800927c:	2a00      	cmp	r2, #0
 800927e:	f000 80ea 	beq.w	8009456 <_dtoa_r+0x8d6>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	2a01      	cmp	r2, #1
 8009286:	f300 80cd 	bgt.w	8009424 <_dtoa_r+0x8a4>
 800928a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800928c:	2a00      	cmp	r2, #0
 800928e:	f000 80c1 	beq.w	8009414 <_dtoa_r+0x894>
 8009292:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009296:	9c08      	ldr	r4, [sp, #32]
 8009298:	9e00      	ldr	r6, [sp, #0]
 800929a:	9a00      	ldr	r2, [sp, #0]
 800929c:	441a      	add	r2, r3
 800929e:	9200      	str	r2, [sp, #0]
 80092a0:	9a06      	ldr	r2, [sp, #24]
 80092a2:	2101      	movs	r1, #1
 80092a4:	441a      	add	r2, r3
 80092a6:	4648      	mov	r0, r9
 80092a8:	9206      	str	r2, [sp, #24]
 80092aa:	f000 fc2d 	bl	8009b08 <__i2b>
 80092ae:	4605      	mov	r5, r0
 80092b0:	b166      	cbz	r6, 80092cc <_dtoa_r+0x74c>
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd09      	ble.n	80092cc <_dtoa_r+0x74c>
 80092b8:	42b3      	cmp	r3, r6
 80092ba:	9a00      	ldr	r2, [sp, #0]
 80092bc:	bfa8      	it	ge
 80092be:	4633      	movge	r3, r6
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	9200      	str	r2, [sp, #0]
 80092c4:	9a06      	ldr	r2, [sp, #24]
 80092c6:	1af6      	subs	r6, r6, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	b30b      	cbz	r3, 8009314 <_dtoa_r+0x794>
 80092d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80c6 	beq.w	8009464 <_dtoa_r+0x8e4>
 80092d8:	2c00      	cmp	r4, #0
 80092da:	f000 80c0 	beq.w	800945e <_dtoa_r+0x8de>
 80092de:	4629      	mov	r1, r5
 80092e0:	4622      	mov	r2, r4
 80092e2:	4648      	mov	r0, r9
 80092e4:	f000 fcc8 	bl	8009c78 <__pow5mult>
 80092e8:	9a02      	ldr	r2, [sp, #8]
 80092ea:	4601      	mov	r1, r0
 80092ec:	4605      	mov	r5, r0
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 fc20 	bl	8009b34 <__multiply>
 80092f4:	9902      	ldr	r1, [sp, #8]
 80092f6:	4680      	mov	r8, r0
 80092f8:	4648      	mov	r0, r9
 80092fa:	f000 fb51 	bl	80099a0 <_Bfree>
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	1b1b      	subs	r3, r3, r4
 8009302:	9308      	str	r3, [sp, #32]
 8009304:	f000 80b1 	beq.w	800946a <_dtoa_r+0x8ea>
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	4641      	mov	r1, r8
 800930c:	4648      	mov	r0, r9
 800930e:	f000 fcb3 	bl	8009c78 <__pow5mult>
 8009312:	9002      	str	r0, [sp, #8]
 8009314:	2101      	movs	r1, #1
 8009316:	4648      	mov	r0, r9
 8009318:	f000 fbf6 	bl	8009b08 <__i2b>
 800931c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800931e:	4604      	mov	r4, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 81d8 	beq.w	80096d6 <_dtoa_r+0xb56>
 8009326:	461a      	mov	r2, r3
 8009328:	4601      	mov	r1, r0
 800932a:	4648      	mov	r0, r9
 800932c:	f000 fca4 	bl	8009c78 <__pow5mult>
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	2b01      	cmp	r3, #1
 8009334:	4604      	mov	r4, r0
 8009336:	f300 809f 	bgt.w	8009478 <_dtoa_r+0x8f8>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8097 	bne.w	8009470 <_dtoa_r+0x8f0>
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 8093 	bne.w	8009474 <_dtoa_r+0x8f4>
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009354:	0d1b      	lsrs	r3, r3, #20
 8009356:	051b      	lsls	r3, r3, #20
 8009358:	b133      	cbz	r3, 8009368 <_dtoa_r+0x7e8>
 800935a:	9b00      	ldr	r3, [sp, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	3301      	adds	r3, #1
 8009364:	9306      	str	r3, [sp, #24]
 8009366:	2301      	movs	r3, #1
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 81b8 	beq.w	80096e2 <_dtoa_r+0xb62>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009378:	6918      	ldr	r0, [r3, #16]
 800937a:	f000 fb79 	bl	8009a70 <__hi0bits>
 800937e:	f1c0 0020 	rsb	r0, r0, #32
 8009382:	9b06      	ldr	r3, [sp, #24]
 8009384:	4418      	add	r0, r3
 8009386:	f010 001f 	ands.w	r0, r0, #31
 800938a:	f000 8082 	beq.w	8009492 <_dtoa_r+0x912>
 800938e:	f1c0 0320 	rsb	r3, r0, #32
 8009392:	2b04      	cmp	r3, #4
 8009394:	dd73      	ble.n	800947e <_dtoa_r+0x8fe>
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	f1c0 001c 	rsb	r0, r0, #28
 800939c:	4403      	add	r3, r0
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	4403      	add	r3, r0
 80093a4:	4406      	add	r6, r0
 80093a6:	9306      	str	r3, [sp, #24]
 80093a8:	9b00      	ldr	r3, [sp, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dd05      	ble.n	80093ba <_dtoa_r+0x83a>
 80093ae:	9902      	ldr	r1, [sp, #8]
 80093b0:	461a      	mov	r2, r3
 80093b2:	4648      	mov	r0, r9
 80093b4:	f000 fcba 	bl	8009d2c <__lshift>
 80093b8:	9002      	str	r0, [sp, #8]
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd05      	ble.n	80093cc <_dtoa_r+0x84c>
 80093c0:	4621      	mov	r1, r4
 80093c2:	461a      	mov	r2, r3
 80093c4:	4648      	mov	r0, r9
 80093c6:	f000 fcb1 	bl	8009d2c <__lshift>
 80093ca:	4604      	mov	r4, r0
 80093cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d061      	beq.n	8009496 <_dtoa_r+0x916>
 80093d2:	9802      	ldr	r0, [sp, #8]
 80093d4:	4621      	mov	r1, r4
 80093d6:	f000 fd15 	bl	8009e04 <__mcmp>
 80093da:	2800      	cmp	r0, #0
 80093dc:	da5b      	bge.n	8009496 <_dtoa_r+0x916>
 80093de:	2300      	movs	r3, #0
 80093e0:	9902      	ldr	r1, [sp, #8]
 80093e2:	220a      	movs	r2, #10
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 fafd 	bl	80099e4 <__multadd>
 80093ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ec:	9002      	str	r0, [sp, #8]
 80093ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8177 	beq.w	80096e6 <_dtoa_r+0xb66>
 80093f8:	4629      	mov	r1, r5
 80093fa:	2300      	movs	r3, #0
 80093fc:	220a      	movs	r2, #10
 80093fe:	4648      	mov	r0, r9
 8009400:	f000 faf0 	bl	80099e4 <__multadd>
 8009404:	f1bb 0f00 	cmp.w	fp, #0
 8009408:	4605      	mov	r5, r0
 800940a:	dc6f      	bgt.n	80094ec <_dtoa_r+0x96c>
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	2b02      	cmp	r3, #2
 8009410:	dc49      	bgt.n	80094a6 <_dtoa_r+0x926>
 8009412:	e06b      	b.n	80094ec <_dtoa_r+0x96c>
 8009414:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800941a:	e73c      	b.n	8009296 <_dtoa_r+0x716>
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	40240000 	.word	0x40240000
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	1e5c      	subs	r4, r3, #1
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	42a3      	cmp	r3, r4
 800942c:	db09      	blt.n	8009442 <_dtoa_r+0x8c2>
 800942e:	1b1c      	subs	r4, r3, r4
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f6bf af30 	bge.w	8009298 <_dtoa_r+0x718>
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	9a03      	ldr	r2, [sp, #12]
 800943c:	1a9e      	subs	r6, r3, r2
 800943e:	2300      	movs	r3, #0
 8009440:	e72b      	b.n	800929a <_dtoa_r+0x71a>
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009446:	9408      	str	r4, [sp, #32]
 8009448:	1ae3      	subs	r3, r4, r3
 800944a:	441a      	add	r2, r3
 800944c:	9e00      	ldr	r6, [sp, #0]
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	920d      	str	r2, [sp, #52]	@ 0x34
 8009452:	2400      	movs	r4, #0
 8009454:	e721      	b.n	800929a <_dtoa_r+0x71a>
 8009456:	9c08      	ldr	r4, [sp, #32]
 8009458:	9e00      	ldr	r6, [sp, #0]
 800945a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800945c:	e728      	b.n	80092b0 <_dtoa_r+0x730>
 800945e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009462:	e751      	b.n	8009308 <_dtoa_r+0x788>
 8009464:	9a08      	ldr	r2, [sp, #32]
 8009466:	9902      	ldr	r1, [sp, #8]
 8009468:	e750      	b.n	800930c <_dtoa_r+0x78c>
 800946a:	f8cd 8008 	str.w	r8, [sp, #8]
 800946e:	e751      	b.n	8009314 <_dtoa_r+0x794>
 8009470:	2300      	movs	r3, #0
 8009472:	e779      	b.n	8009368 <_dtoa_r+0x7e8>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	e777      	b.n	8009368 <_dtoa_r+0x7e8>
 8009478:	2300      	movs	r3, #0
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	e779      	b.n	8009372 <_dtoa_r+0x7f2>
 800947e:	d093      	beq.n	80093a8 <_dtoa_r+0x828>
 8009480:	9a00      	ldr	r2, [sp, #0]
 8009482:	331c      	adds	r3, #28
 8009484:	441a      	add	r2, r3
 8009486:	9200      	str	r2, [sp, #0]
 8009488:	9a06      	ldr	r2, [sp, #24]
 800948a:	441a      	add	r2, r3
 800948c:	441e      	add	r6, r3
 800948e:	9206      	str	r2, [sp, #24]
 8009490:	e78a      	b.n	80093a8 <_dtoa_r+0x828>
 8009492:	4603      	mov	r3, r0
 8009494:	e7f4      	b.n	8009480 <_dtoa_r+0x900>
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	46b8      	mov	r8, r7
 800949c:	dc20      	bgt.n	80094e0 <_dtoa_r+0x960>
 800949e:	469b      	mov	fp, r3
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	dd1e      	ble.n	80094e4 <_dtoa_r+0x964>
 80094a6:	f1bb 0f00 	cmp.w	fp, #0
 80094aa:	f47f adb1 	bne.w	8009010 <_dtoa_r+0x490>
 80094ae:	4621      	mov	r1, r4
 80094b0:	465b      	mov	r3, fp
 80094b2:	2205      	movs	r2, #5
 80094b4:	4648      	mov	r0, r9
 80094b6:	f000 fa95 	bl	80099e4 <__multadd>
 80094ba:	4601      	mov	r1, r0
 80094bc:	4604      	mov	r4, r0
 80094be:	9802      	ldr	r0, [sp, #8]
 80094c0:	f000 fca0 	bl	8009e04 <__mcmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f77f ada3 	ble.w	8009010 <_dtoa_r+0x490>
 80094ca:	4656      	mov	r6, sl
 80094cc:	2331      	movs	r3, #49	@ 0x31
 80094ce:	f806 3b01 	strb.w	r3, [r6], #1
 80094d2:	f108 0801 	add.w	r8, r8, #1
 80094d6:	e59f      	b.n	8009018 <_dtoa_r+0x498>
 80094d8:	9c03      	ldr	r4, [sp, #12]
 80094da:	46b8      	mov	r8, r7
 80094dc:	4625      	mov	r5, r4
 80094de:	e7f4      	b.n	80094ca <_dtoa_r+0x94a>
 80094e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80094e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 8101 	beq.w	80096ee <_dtoa_r+0xb6e>
 80094ec:	2e00      	cmp	r6, #0
 80094ee:	dd05      	ble.n	80094fc <_dtoa_r+0x97c>
 80094f0:	4629      	mov	r1, r5
 80094f2:	4632      	mov	r2, r6
 80094f4:	4648      	mov	r0, r9
 80094f6:	f000 fc19 	bl	8009d2c <__lshift>
 80094fa:	4605      	mov	r5, r0
 80094fc:	9b08      	ldr	r3, [sp, #32]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d05c      	beq.n	80095bc <_dtoa_r+0xa3c>
 8009502:	6869      	ldr	r1, [r5, #4]
 8009504:	4648      	mov	r0, r9
 8009506:	f000 fa0b 	bl	8009920 <_Balloc>
 800950a:	4606      	mov	r6, r0
 800950c:	b928      	cbnz	r0, 800951a <_dtoa_r+0x99a>
 800950e:	4b82      	ldr	r3, [pc, #520]	@ (8009718 <_dtoa_r+0xb98>)
 8009510:	4602      	mov	r2, r0
 8009512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009516:	f7ff bb4a 	b.w	8008bae <_dtoa_r+0x2e>
 800951a:	692a      	ldr	r2, [r5, #16]
 800951c:	3202      	adds	r2, #2
 800951e:	0092      	lsls	r2, r2, #2
 8009520:	f105 010c 	add.w	r1, r5, #12
 8009524:	300c      	adds	r0, #12
 8009526:	f001 f969 	bl	800a7fc <memcpy>
 800952a:	2201      	movs	r2, #1
 800952c:	4631      	mov	r1, r6
 800952e:	4648      	mov	r0, r9
 8009530:	f000 fbfc 	bl	8009d2c <__lshift>
 8009534:	f10a 0301 	add.w	r3, sl, #1
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	eb0a 030b 	add.w	r3, sl, fp
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	462f      	mov	r7, r5
 8009548:	9306      	str	r3, [sp, #24]
 800954a:	4605      	mov	r5, r0
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	9802      	ldr	r0, [sp, #8]
 8009550:	4621      	mov	r1, r4
 8009552:	f103 3bff 	add.w	fp, r3, #4294967295
 8009556:	f7ff fa88 	bl	8008a6a <quorem>
 800955a:	4603      	mov	r3, r0
 800955c:	3330      	adds	r3, #48	@ 0x30
 800955e:	9003      	str	r0, [sp, #12]
 8009560:	4639      	mov	r1, r7
 8009562:	9802      	ldr	r0, [sp, #8]
 8009564:	9309      	str	r3, [sp, #36]	@ 0x24
 8009566:	f000 fc4d 	bl	8009e04 <__mcmp>
 800956a:	462a      	mov	r2, r5
 800956c:	9004      	str	r0, [sp, #16]
 800956e:	4621      	mov	r1, r4
 8009570:	4648      	mov	r0, r9
 8009572:	f000 fc63 	bl	8009e3c <__mdiff>
 8009576:	68c2      	ldr	r2, [r0, #12]
 8009578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957a:	4606      	mov	r6, r0
 800957c:	bb02      	cbnz	r2, 80095c0 <_dtoa_r+0xa40>
 800957e:	4601      	mov	r1, r0
 8009580:	9802      	ldr	r0, [sp, #8]
 8009582:	f000 fc3f 	bl	8009e04 <__mcmp>
 8009586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009588:	4602      	mov	r2, r0
 800958a:	4631      	mov	r1, r6
 800958c:	4648      	mov	r0, r9
 800958e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009590:	9309      	str	r3, [sp, #36]	@ 0x24
 8009592:	f000 fa05 	bl	80099a0 <_Bfree>
 8009596:	9b07      	ldr	r3, [sp, #28]
 8009598:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800959a:	9e00      	ldr	r6, [sp, #0]
 800959c:	ea42 0103 	orr.w	r1, r2, r3
 80095a0:	9b06      	ldr	r3, [sp, #24]
 80095a2:	4319      	orrs	r1, r3
 80095a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a6:	d10d      	bne.n	80095c4 <_dtoa_r+0xa44>
 80095a8:	2b39      	cmp	r3, #57	@ 0x39
 80095aa:	d027      	beq.n	80095fc <_dtoa_r+0xa7c>
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	dd01      	ble.n	80095b6 <_dtoa_r+0xa36>
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	3331      	adds	r3, #49	@ 0x31
 80095b6:	f88b 3000 	strb.w	r3, [fp]
 80095ba:	e52e      	b.n	800901a <_dtoa_r+0x49a>
 80095bc:	4628      	mov	r0, r5
 80095be:	e7b9      	b.n	8009534 <_dtoa_r+0x9b4>
 80095c0:	2201      	movs	r2, #1
 80095c2:	e7e2      	b.n	800958a <_dtoa_r+0xa0a>
 80095c4:	9904      	ldr	r1, [sp, #16]
 80095c6:	2900      	cmp	r1, #0
 80095c8:	db04      	blt.n	80095d4 <_dtoa_r+0xa54>
 80095ca:	9807      	ldr	r0, [sp, #28]
 80095cc:	4301      	orrs	r1, r0
 80095ce:	9806      	ldr	r0, [sp, #24]
 80095d0:	4301      	orrs	r1, r0
 80095d2:	d120      	bne.n	8009616 <_dtoa_r+0xa96>
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	ddee      	ble.n	80095b6 <_dtoa_r+0xa36>
 80095d8:	9902      	ldr	r1, [sp, #8]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2201      	movs	r2, #1
 80095de:	4648      	mov	r0, r9
 80095e0:	f000 fba4 	bl	8009d2c <__lshift>
 80095e4:	4621      	mov	r1, r4
 80095e6:	9002      	str	r0, [sp, #8]
 80095e8:	f000 fc0c 	bl	8009e04 <__mcmp>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	dc02      	bgt.n	80095f8 <_dtoa_r+0xa78>
 80095f2:	d1e0      	bne.n	80095b6 <_dtoa_r+0xa36>
 80095f4:	07da      	lsls	r2, r3, #31
 80095f6:	d5de      	bpl.n	80095b6 <_dtoa_r+0xa36>
 80095f8:	2b39      	cmp	r3, #57	@ 0x39
 80095fa:	d1da      	bne.n	80095b2 <_dtoa_r+0xa32>
 80095fc:	2339      	movs	r3, #57	@ 0x39
 80095fe:	f88b 3000 	strb.w	r3, [fp]
 8009602:	4633      	mov	r3, r6
 8009604:	461e      	mov	r6, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800960c:	2a39      	cmp	r2, #57	@ 0x39
 800960e:	d04e      	beq.n	80096ae <_dtoa_r+0xb2e>
 8009610:	3201      	adds	r2, #1
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e501      	b.n	800901a <_dtoa_r+0x49a>
 8009616:	2a00      	cmp	r2, #0
 8009618:	dd03      	ble.n	8009622 <_dtoa_r+0xaa2>
 800961a:	2b39      	cmp	r3, #57	@ 0x39
 800961c:	d0ee      	beq.n	80095fc <_dtoa_r+0xa7c>
 800961e:	3301      	adds	r3, #1
 8009620:	e7c9      	b.n	80095b6 <_dtoa_r+0xa36>
 8009622:	9a00      	ldr	r2, [sp, #0]
 8009624:	9908      	ldr	r1, [sp, #32]
 8009626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800962a:	428a      	cmp	r2, r1
 800962c:	d028      	beq.n	8009680 <_dtoa_r+0xb00>
 800962e:	9902      	ldr	r1, [sp, #8]
 8009630:	2300      	movs	r3, #0
 8009632:	220a      	movs	r2, #10
 8009634:	4648      	mov	r0, r9
 8009636:	f000 f9d5 	bl	80099e4 <__multadd>
 800963a:	42af      	cmp	r7, r5
 800963c:	9002      	str	r0, [sp, #8]
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	f04f 020a 	mov.w	r2, #10
 8009646:	4639      	mov	r1, r7
 8009648:	4648      	mov	r0, r9
 800964a:	d107      	bne.n	800965c <_dtoa_r+0xadc>
 800964c:	f000 f9ca 	bl	80099e4 <__multadd>
 8009650:	4607      	mov	r7, r0
 8009652:	4605      	mov	r5, r0
 8009654:	9b00      	ldr	r3, [sp, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	e777      	b.n	800954c <_dtoa_r+0x9cc>
 800965c:	f000 f9c2 	bl	80099e4 <__multadd>
 8009660:	4629      	mov	r1, r5
 8009662:	4607      	mov	r7, r0
 8009664:	2300      	movs	r3, #0
 8009666:	220a      	movs	r2, #10
 8009668:	4648      	mov	r0, r9
 800966a:	f000 f9bb 	bl	80099e4 <__multadd>
 800966e:	4605      	mov	r5, r0
 8009670:	e7f0      	b.n	8009654 <_dtoa_r+0xad4>
 8009672:	f1bb 0f00 	cmp.w	fp, #0
 8009676:	bfcc      	ite	gt
 8009678:	465e      	movgt	r6, fp
 800967a:	2601      	movle	r6, #1
 800967c:	4456      	add	r6, sl
 800967e:	2700      	movs	r7, #0
 8009680:	9902      	ldr	r1, [sp, #8]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2201      	movs	r2, #1
 8009686:	4648      	mov	r0, r9
 8009688:	f000 fb50 	bl	8009d2c <__lshift>
 800968c:	4621      	mov	r1, r4
 800968e:	9002      	str	r0, [sp, #8]
 8009690:	f000 fbb8 	bl	8009e04 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	dcb4      	bgt.n	8009602 <_dtoa_r+0xa82>
 8009698:	d102      	bne.n	80096a0 <_dtoa_r+0xb20>
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	07db      	lsls	r3, r3, #31
 800969e:	d4b0      	bmi.n	8009602 <_dtoa_r+0xa82>
 80096a0:	4633      	mov	r3, r6
 80096a2:	461e      	mov	r6, r3
 80096a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096a8:	2a30      	cmp	r2, #48	@ 0x30
 80096aa:	d0fa      	beq.n	80096a2 <_dtoa_r+0xb22>
 80096ac:	e4b5      	b.n	800901a <_dtoa_r+0x49a>
 80096ae:	459a      	cmp	sl, r3
 80096b0:	d1a8      	bne.n	8009604 <_dtoa_r+0xa84>
 80096b2:	2331      	movs	r3, #49	@ 0x31
 80096b4:	f108 0801 	add.w	r8, r8, #1
 80096b8:	f88a 3000 	strb.w	r3, [sl]
 80096bc:	e4ad      	b.n	800901a <_dtoa_r+0x49a>
 80096be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800971c <_dtoa_r+0xb9c>
 80096c4:	b11b      	cbz	r3, 80096ce <_dtoa_r+0xb4e>
 80096c6:	f10a 0308 	add.w	r3, sl, #8
 80096ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	4650      	mov	r0, sl
 80096d0:	b017      	add	sp, #92	@ 0x5c
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	9b07      	ldr	r3, [sp, #28]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	f77f ae2e 	ble.w	800933a <_dtoa_r+0x7ba>
 80096de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096e0:	9308      	str	r3, [sp, #32]
 80096e2:	2001      	movs	r0, #1
 80096e4:	e64d      	b.n	8009382 <_dtoa_r+0x802>
 80096e6:	f1bb 0f00 	cmp.w	fp, #0
 80096ea:	f77f aed9 	ble.w	80094a0 <_dtoa_r+0x920>
 80096ee:	4656      	mov	r6, sl
 80096f0:	9802      	ldr	r0, [sp, #8]
 80096f2:	4621      	mov	r1, r4
 80096f4:	f7ff f9b9 	bl	8008a6a <quorem>
 80096f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80096fc:	f806 3b01 	strb.w	r3, [r6], #1
 8009700:	eba6 020a 	sub.w	r2, r6, sl
 8009704:	4593      	cmp	fp, r2
 8009706:	ddb4      	ble.n	8009672 <_dtoa_r+0xaf2>
 8009708:	9902      	ldr	r1, [sp, #8]
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	4648      	mov	r0, r9
 8009710:	f000 f968 	bl	80099e4 <__multadd>
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	e7eb      	b.n	80096f0 <_dtoa_r+0xb70>
 8009718:	0800aba4 	.word	0x0800aba4
 800971c:	0800ab28 	.word	0x0800ab28

08009720 <_free_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4605      	mov	r5, r0
 8009724:	2900      	cmp	r1, #0
 8009726:	d041      	beq.n	80097ac <_free_r+0x8c>
 8009728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972c:	1f0c      	subs	r4, r1, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfb8      	it	lt
 8009732:	18e4      	addlt	r4, r4, r3
 8009734:	f000 f8e8 	bl	8009908 <__malloc_lock>
 8009738:	4a1d      	ldr	r2, [pc, #116]	@ (80097b0 <_free_r+0x90>)
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	b933      	cbnz	r3, 800974c <_free_r+0x2c>
 800973e:	6063      	str	r3, [r4, #4]
 8009740:	6014      	str	r4, [r2, #0]
 8009742:	4628      	mov	r0, r5
 8009744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009748:	f000 b8e4 	b.w	8009914 <__malloc_unlock>
 800974c:	42a3      	cmp	r3, r4
 800974e:	d908      	bls.n	8009762 <_free_r+0x42>
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	1821      	adds	r1, r4, r0
 8009754:	428b      	cmp	r3, r1
 8009756:	bf01      	itttt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	1809      	addeq	r1, r1, r0
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	e7ed      	b.n	800973e <_free_r+0x1e>
 8009762:	461a      	mov	r2, r3
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b10b      	cbz	r3, 800976c <_free_r+0x4c>
 8009768:	42a3      	cmp	r3, r4
 800976a:	d9fa      	bls.n	8009762 <_free_r+0x42>
 800976c:	6811      	ldr	r1, [r2, #0]
 800976e:	1850      	adds	r0, r2, r1
 8009770:	42a0      	cmp	r0, r4
 8009772:	d10b      	bne.n	800978c <_free_r+0x6c>
 8009774:	6820      	ldr	r0, [r4, #0]
 8009776:	4401      	add	r1, r0
 8009778:	1850      	adds	r0, r2, r1
 800977a:	4283      	cmp	r3, r0
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	d1e0      	bne.n	8009742 <_free_r+0x22>
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	6053      	str	r3, [r2, #4]
 8009786:	4408      	add	r0, r1
 8009788:	6010      	str	r0, [r2, #0]
 800978a:	e7da      	b.n	8009742 <_free_r+0x22>
 800978c:	d902      	bls.n	8009794 <_free_r+0x74>
 800978e:	230c      	movs	r3, #12
 8009790:	602b      	str	r3, [r5, #0]
 8009792:	e7d6      	b.n	8009742 <_free_r+0x22>
 8009794:	6820      	ldr	r0, [r4, #0]
 8009796:	1821      	adds	r1, r4, r0
 8009798:	428b      	cmp	r3, r1
 800979a:	bf04      	itt	eq
 800979c:	6819      	ldreq	r1, [r3, #0]
 800979e:	685b      	ldreq	r3, [r3, #4]
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	bf04      	itt	eq
 80097a4:	1809      	addeq	r1, r1, r0
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	6054      	str	r4, [r2, #4]
 80097aa:	e7ca      	b.n	8009742 <_free_r+0x22>
 80097ac:	bd38      	pop	{r3, r4, r5, pc}
 80097ae:	bf00      	nop
 80097b0:	200004dc 	.word	0x200004dc

080097b4 <malloc>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	@ (80097c0 <malloc+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f000 b825 	b.w	8009808 <_malloc_r>
 80097be:	bf00      	nop
 80097c0:	2000001c 	.word	0x2000001c

080097c4 <sbrk_aligned>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009804 <sbrk_aligned+0x40>)
 80097c8:	460c      	mov	r4, r1
 80097ca:	6831      	ldr	r1, [r6, #0]
 80097cc:	4605      	mov	r5, r0
 80097ce:	b911      	cbnz	r1, 80097d6 <sbrk_aligned+0x12>
 80097d0:	f001 f804 	bl	800a7dc <_sbrk_r>
 80097d4:	6030      	str	r0, [r6, #0]
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 ffff 	bl	800a7dc <_sbrk_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d103      	bne.n	80097ea <sbrk_aligned+0x26>
 80097e2:	f04f 34ff 	mov.w	r4, #4294967295
 80097e6:	4620      	mov	r0, r4
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
 80097ea:	1cc4      	adds	r4, r0, #3
 80097ec:	f024 0403 	bic.w	r4, r4, #3
 80097f0:	42a0      	cmp	r0, r4
 80097f2:	d0f8      	beq.n	80097e6 <sbrk_aligned+0x22>
 80097f4:	1a21      	subs	r1, r4, r0
 80097f6:	4628      	mov	r0, r5
 80097f8:	f000 fff0 	bl	800a7dc <_sbrk_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	d1f2      	bne.n	80097e6 <sbrk_aligned+0x22>
 8009800:	e7ef      	b.n	80097e2 <sbrk_aligned+0x1e>
 8009802:	bf00      	nop
 8009804:	200004d8 	.word	0x200004d8

08009808 <_malloc_r>:
 8009808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	1ccd      	adds	r5, r1, #3
 800980e:	f025 0503 	bic.w	r5, r5, #3
 8009812:	3508      	adds	r5, #8
 8009814:	2d0c      	cmp	r5, #12
 8009816:	bf38      	it	cc
 8009818:	250c      	movcc	r5, #12
 800981a:	2d00      	cmp	r5, #0
 800981c:	4606      	mov	r6, r0
 800981e:	db01      	blt.n	8009824 <_malloc_r+0x1c>
 8009820:	42a9      	cmp	r1, r5
 8009822:	d904      	bls.n	800982e <_malloc_r+0x26>
 8009824:	230c      	movs	r3, #12
 8009826:	6033      	str	r3, [r6, #0]
 8009828:	2000      	movs	r0, #0
 800982a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009904 <_malloc_r+0xfc>
 8009832:	f000 f869 	bl	8009908 <__malloc_lock>
 8009836:	f8d8 3000 	ldr.w	r3, [r8]
 800983a:	461c      	mov	r4, r3
 800983c:	bb44      	cbnz	r4, 8009890 <_malloc_r+0x88>
 800983e:	4629      	mov	r1, r5
 8009840:	4630      	mov	r0, r6
 8009842:	f7ff ffbf 	bl	80097c4 <sbrk_aligned>
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	4604      	mov	r4, r0
 800984a:	d158      	bne.n	80098fe <_malloc_r+0xf6>
 800984c:	f8d8 4000 	ldr.w	r4, [r8]
 8009850:	4627      	mov	r7, r4
 8009852:	2f00      	cmp	r7, #0
 8009854:	d143      	bne.n	80098de <_malloc_r+0xd6>
 8009856:	2c00      	cmp	r4, #0
 8009858:	d04b      	beq.n	80098f2 <_malloc_r+0xea>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	4639      	mov	r1, r7
 800985e:	4630      	mov	r0, r6
 8009860:	eb04 0903 	add.w	r9, r4, r3
 8009864:	f000 ffba 	bl	800a7dc <_sbrk_r>
 8009868:	4581      	cmp	r9, r0
 800986a:	d142      	bne.n	80098f2 <_malloc_r+0xea>
 800986c:	6821      	ldr	r1, [r4, #0]
 800986e:	1a6d      	subs	r5, r5, r1
 8009870:	4629      	mov	r1, r5
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ffa6 	bl	80097c4 <sbrk_aligned>
 8009878:	3001      	adds	r0, #1
 800987a:	d03a      	beq.n	80098f2 <_malloc_r+0xea>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	442b      	add	r3, r5
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	f8d8 3000 	ldr.w	r3, [r8]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	bb62      	cbnz	r2, 80098e4 <_malloc_r+0xdc>
 800988a:	f8c8 7000 	str.w	r7, [r8]
 800988e:	e00f      	b.n	80098b0 <_malloc_r+0xa8>
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	1b52      	subs	r2, r2, r5
 8009894:	d420      	bmi.n	80098d8 <_malloc_r+0xd0>
 8009896:	2a0b      	cmp	r2, #11
 8009898:	d917      	bls.n	80098ca <_malloc_r+0xc2>
 800989a:	1961      	adds	r1, r4, r5
 800989c:	42a3      	cmp	r3, r4
 800989e:	6025      	str	r5, [r4, #0]
 80098a0:	bf18      	it	ne
 80098a2:	6059      	strne	r1, [r3, #4]
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	bf08      	it	eq
 80098a8:	f8c8 1000 	streq.w	r1, [r8]
 80098ac:	5162      	str	r2, [r4, r5]
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 f82f 	bl	8009914 <__malloc_unlock>
 80098b6:	f104 000b 	add.w	r0, r4, #11
 80098ba:	1d23      	adds	r3, r4, #4
 80098bc:	f020 0007 	bic.w	r0, r0, #7
 80098c0:	1ac2      	subs	r2, r0, r3
 80098c2:	bf1c      	itt	ne
 80098c4:	1a1b      	subne	r3, r3, r0
 80098c6:	50a3      	strne	r3, [r4, r2]
 80098c8:	e7af      	b.n	800982a <_malloc_r+0x22>
 80098ca:	6862      	ldr	r2, [r4, #4]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	bf0c      	ite	eq
 80098d0:	f8c8 2000 	streq.w	r2, [r8]
 80098d4:	605a      	strne	r2, [r3, #4]
 80098d6:	e7eb      	b.n	80098b0 <_malloc_r+0xa8>
 80098d8:	4623      	mov	r3, r4
 80098da:	6864      	ldr	r4, [r4, #4]
 80098dc:	e7ae      	b.n	800983c <_malloc_r+0x34>
 80098de:	463c      	mov	r4, r7
 80098e0:	687f      	ldr	r7, [r7, #4]
 80098e2:	e7b6      	b.n	8009852 <_malloc_r+0x4a>
 80098e4:	461a      	mov	r2, r3
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	d1fb      	bne.n	80098e4 <_malloc_r+0xdc>
 80098ec:	2300      	movs	r3, #0
 80098ee:	6053      	str	r3, [r2, #4]
 80098f0:	e7de      	b.n	80098b0 <_malloc_r+0xa8>
 80098f2:	230c      	movs	r3, #12
 80098f4:	6033      	str	r3, [r6, #0]
 80098f6:	4630      	mov	r0, r6
 80098f8:	f000 f80c 	bl	8009914 <__malloc_unlock>
 80098fc:	e794      	b.n	8009828 <_malloc_r+0x20>
 80098fe:	6005      	str	r5, [r0, #0]
 8009900:	e7d6      	b.n	80098b0 <_malloc_r+0xa8>
 8009902:	bf00      	nop
 8009904:	200004dc 	.word	0x200004dc

08009908 <__malloc_lock>:
 8009908:	4801      	ldr	r0, [pc, #4]	@ (8009910 <__malloc_lock+0x8>)
 800990a:	f7ff b8ac 	b.w	8008a66 <__retarget_lock_acquire_recursive>
 800990e:	bf00      	nop
 8009910:	200004d4 	.word	0x200004d4

08009914 <__malloc_unlock>:
 8009914:	4801      	ldr	r0, [pc, #4]	@ (800991c <__malloc_unlock+0x8>)
 8009916:	f7ff b8a7 	b.w	8008a68 <__retarget_lock_release_recursive>
 800991a:	bf00      	nop
 800991c:	200004d4 	.word	0x200004d4

08009920 <_Balloc>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	69c6      	ldr	r6, [r0, #28]
 8009924:	4604      	mov	r4, r0
 8009926:	460d      	mov	r5, r1
 8009928:	b976      	cbnz	r6, 8009948 <_Balloc+0x28>
 800992a:	2010      	movs	r0, #16
 800992c:	f7ff ff42 	bl	80097b4 <malloc>
 8009930:	4602      	mov	r2, r0
 8009932:	61e0      	str	r0, [r4, #28]
 8009934:	b920      	cbnz	r0, 8009940 <_Balloc+0x20>
 8009936:	4b18      	ldr	r3, [pc, #96]	@ (8009998 <_Balloc+0x78>)
 8009938:	4818      	ldr	r0, [pc, #96]	@ (800999c <_Balloc+0x7c>)
 800993a:	216b      	movs	r1, #107	@ 0x6b
 800993c:	f000 ff6c 	bl	800a818 <__assert_func>
 8009940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009944:	6006      	str	r6, [r0, #0]
 8009946:	60c6      	str	r6, [r0, #12]
 8009948:	69e6      	ldr	r6, [r4, #28]
 800994a:	68f3      	ldr	r3, [r6, #12]
 800994c:	b183      	cbz	r3, 8009970 <_Balloc+0x50>
 800994e:	69e3      	ldr	r3, [r4, #28]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009956:	b9b8      	cbnz	r0, 8009988 <_Balloc+0x68>
 8009958:	2101      	movs	r1, #1
 800995a:	fa01 f605 	lsl.w	r6, r1, r5
 800995e:	1d72      	adds	r2, r6, #5
 8009960:	0092      	lsls	r2, r2, #2
 8009962:	4620      	mov	r0, r4
 8009964:	f000 ff76 	bl	800a854 <_calloc_r>
 8009968:	b160      	cbz	r0, 8009984 <_Balloc+0x64>
 800996a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800996e:	e00e      	b.n	800998e <_Balloc+0x6e>
 8009970:	2221      	movs	r2, #33	@ 0x21
 8009972:	2104      	movs	r1, #4
 8009974:	4620      	mov	r0, r4
 8009976:	f000 ff6d 	bl	800a854 <_calloc_r>
 800997a:	69e3      	ldr	r3, [r4, #28]
 800997c:	60f0      	str	r0, [r6, #12]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e4      	bne.n	800994e <_Balloc+0x2e>
 8009984:	2000      	movs	r0, #0
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	6802      	ldr	r2, [r0, #0]
 800998a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800998e:	2300      	movs	r3, #0
 8009990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009994:	e7f7      	b.n	8009986 <_Balloc+0x66>
 8009996:	bf00      	nop
 8009998:	0800ab35 	.word	0x0800ab35
 800999c:	0800abb5 	.word	0x0800abb5

080099a0 <_Bfree>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	69c6      	ldr	r6, [r0, #28]
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b976      	cbnz	r6, 80099c8 <_Bfree+0x28>
 80099aa:	2010      	movs	r0, #16
 80099ac:	f7ff ff02 	bl	80097b4 <malloc>
 80099b0:	4602      	mov	r2, r0
 80099b2:	61e8      	str	r0, [r5, #28]
 80099b4:	b920      	cbnz	r0, 80099c0 <_Bfree+0x20>
 80099b6:	4b09      	ldr	r3, [pc, #36]	@ (80099dc <_Bfree+0x3c>)
 80099b8:	4809      	ldr	r0, [pc, #36]	@ (80099e0 <_Bfree+0x40>)
 80099ba:	218f      	movs	r1, #143	@ 0x8f
 80099bc:	f000 ff2c 	bl	800a818 <__assert_func>
 80099c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c4:	6006      	str	r6, [r0, #0]
 80099c6:	60c6      	str	r6, [r0, #12]
 80099c8:	b13c      	cbz	r4, 80099da <_Bfree+0x3a>
 80099ca:	69eb      	ldr	r3, [r5, #28]
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d4:	6021      	str	r1, [r4, #0]
 80099d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	0800ab35 	.word	0x0800ab35
 80099e0:	0800abb5 	.word	0x0800abb5

080099e4 <__multadd>:
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	690d      	ldr	r5, [r1, #16]
 80099ea:	4607      	mov	r7, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	461e      	mov	r6, r3
 80099f0:	f101 0c14 	add.w	ip, r1, #20
 80099f4:	2000      	movs	r0, #0
 80099f6:	f8dc 3000 	ldr.w	r3, [ip]
 80099fa:	b299      	uxth	r1, r3
 80099fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009a00:	0c1e      	lsrs	r6, r3, #16
 8009a02:	0c0b      	lsrs	r3, r1, #16
 8009a04:	fb02 3306 	mla	r3, r2, r6, r3
 8009a08:	b289      	uxth	r1, r1
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a10:	4285      	cmp	r5, r0
 8009a12:	f84c 1b04 	str.w	r1, [ip], #4
 8009a16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a1a:	dcec      	bgt.n	80099f6 <__multadd+0x12>
 8009a1c:	b30e      	cbz	r6, 8009a62 <__multadd+0x7e>
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dc19      	bgt.n	8009a58 <__multadd+0x74>
 8009a24:	6861      	ldr	r1, [r4, #4]
 8009a26:	4638      	mov	r0, r7
 8009a28:	3101      	adds	r1, #1
 8009a2a:	f7ff ff79 	bl	8009920 <_Balloc>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <__multadd+0x5a>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <__multadd+0x84>)
 8009a36:	480d      	ldr	r0, [pc, #52]	@ (8009a6c <__multadd+0x88>)
 8009a38:	21ba      	movs	r1, #186	@ 0xba
 8009a3a:	f000 feed 	bl	800a818 <__assert_func>
 8009a3e:	6922      	ldr	r2, [r4, #16]
 8009a40:	3202      	adds	r2, #2
 8009a42:	f104 010c 	add.w	r1, r4, #12
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	300c      	adds	r0, #12
 8009a4a:	f000 fed7 	bl	800a7fc <memcpy>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ffa5 	bl	80099a0 <_Bfree>
 8009a56:	4644      	mov	r4, r8
 8009a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	615e      	str	r6, [r3, #20]
 8009a60:	6125      	str	r5, [r4, #16]
 8009a62:	4620      	mov	r0, r4
 8009a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a68:	0800aba4 	.word	0x0800aba4
 8009a6c:	0800abb5 	.word	0x0800abb5

08009a70 <__hi0bits>:
 8009a70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a74:	4603      	mov	r3, r0
 8009a76:	bf36      	itet	cc
 8009a78:	0403      	lslcc	r3, r0, #16
 8009a7a:	2000      	movcs	r0, #0
 8009a7c:	2010      	movcc	r0, #16
 8009a7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a82:	bf3c      	itt	cc
 8009a84:	021b      	lslcc	r3, r3, #8
 8009a86:	3008      	addcc	r0, #8
 8009a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a8c:	bf3c      	itt	cc
 8009a8e:	011b      	lslcc	r3, r3, #4
 8009a90:	3004      	addcc	r0, #4
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a96:	bf3c      	itt	cc
 8009a98:	009b      	lslcc	r3, r3, #2
 8009a9a:	3002      	addcc	r0, #2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	db05      	blt.n	8009aac <__hi0bits+0x3c>
 8009aa0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009aa4:	f100 0001 	add.w	r0, r0, #1
 8009aa8:	bf08      	it	eq
 8009aaa:	2020      	moveq	r0, #32
 8009aac:	4770      	bx	lr

08009aae <__lo0bits>:
 8009aae:	6803      	ldr	r3, [r0, #0]
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	f013 0007 	ands.w	r0, r3, #7
 8009ab6:	d00b      	beq.n	8009ad0 <__lo0bits+0x22>
 8009ab8:	07d9      	lsls	r1, r3, #31
 8009aba:	d421      	bmi.n	8009b00 <__lo0bits+0x52>
 8009abc:	0798      	lsls	r0, r3, #30
 8009abe:	bf49      	itett	mi
 8009ac0:	085b      	lsrmi	r3, r3, #1
 8009ac2:	089b      	lsrpl	r3, r3, #2
 8009ac4:	2001      	movmi	r0, #1
 8009ac6:	6013      	strmi	r3, [r2, #0]
 8009ac8:	bf5c      	itt	pl
 8009aca:	6013      	strpl	r3, [r2, #0]
 8009acc:	2002      	movpl	r0, #2
 8009ace:	4770      	bx	lr
 8009ad0:	b299      	uxth	r1, r3
 8009ad2:	b909      	cbnz	r1, 8009ad8 <__lo0bits+0x2a>
 8009ad4:	0c1b      	lsrs	r3, r3, #16
 8009ad6:	2010      	movs	r0, #16
 8009ad8:	b2d9      	uxtb	r1, r3
 8009ada:	b909      	cbnz	r1, 8009ae0 <__lo0bits+0x32>
 8009adc:	3008      	adds	r0, #8
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	0719      	lsls	r1, r3, #28
 8009ae2:	bf04      	itt	eq
 8009ae4:	091b      	lsreq	r3, r3, #4
 8009ae6:	3004      	addeq	r0, #4
 8009ae8:	0799      	lsls	r1, r3, #30
 8009aea:	bf04      	itt	eq
 8009aec:	089b      	lsreq	r3, r3, #2
 8009aee:	3002      	addeq	r0, #2
 8009af0:	07d9      	lsls	r1, r3, #31
 8009af2:	d403      	bmi.n	8009afc <__lo0bits+0x4e>
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	f100 0001 	add.w	r0, r0, #1
 8009afa:	d003      	beq.n	8009b04 <__lo0bits+0x56>
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	4770      	bx	lr
 8009b00:	2000      	movs	r0, #0
 8009b02:	4770      	bx	lr
 8009b04:	2020      	movs	r0, #32
 8009b06:	4770      	bx	lr

08009b08 <__i2b>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	f7ff ff07 	bl	8009920 <_Balloc>
 8009b12:	4602      	mov	r2, r0
 8009b14:	b928      	cbnz	r0, 8009b22 <__i2b+0x1a>
 8009b16:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <__i2b+0x24>)
 8009b18:	4805      	ldr	r0, [pc, #20]	@ (8009b30 <__i2b+0x28>)
 8009b1a:	f240 1145 	movw	r1, #325	@ 0x145
 8009b1e:	f000 fe7b 	bl	800a818 <__assert_func>
 8009b22:	2301      	movs	r3, #1
 8009b24:	6144      	str	r4, [r0, #20]
 8009b26:	6103      	str	r3, [r0, #16]
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	0800aba4 	.word	0x0800aba4
 8009b30:	0800abb5 	.word	0x0800abb5

08009b34 <__multiply>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4617      	mov	r7, r2
 8009b3a:	690a      	ldr	r2, [r1, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	bfa8      	it	ge
 8009b42:	463b      	movge	r3, r7
 8009b44:	4689      	mov	r9, r1
 8009b46:	bfa4      	itt	ge
 8009b48:	460f      	movge	r7, r1
 8009b4a:	4699      	movge	r9, r3
 8009b4c:	693d      	ldr	r5, [r7, #16]
 8009b4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	eb05 060a 	add.w	r6, r5, sl
 8009b5a:	42b3      	cmp	r3, r6
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	bfb8      	it	lt
 8009b60:	3101      	addlt	r1, #1
 8009b62:	f7ff fedd 	bl	8009920 <_Balloc>
 8009b66:	b930      	cbnz	r0, 8009b76 <__multiply+0x42>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	4b41      	ldr	r3, [pc, #260]	@ (8009c70 <__multiply+0x13c>)
 8009b6c:	4841      	ldr	r0, [pc, #260]	@ (8009c74 <__multiply+0x140>)
 8009b6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b72:	f000 fe51 	bl	800a818 <__assert_func>
 8009b76:	f100 0414 	add.w	r4, r0, #20
 8009b7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b7e:	4623      	mov	r3, r4
 8009b80:	2200      	movs	r2, #0
 8009b82:	4573      	cmp	r3, lr
 8009b84:	d320      	bcc.n	8009bc8 <__multiply+0x94>
 8009b86:	f107 0814 	add.w	r8, r7, #20
 8009b8a:	f109 0114 	add.w	r1, r9, #20
 8009b8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b96:	9302      	str	r3, [sp, #8]
 8009b98:	1beb      	subs	r3, r5, r7
 8009b9a:	3b15      	subs	r3, #21
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	3715      	adds	r7, #21
 8009ba4:	42bd      	cmp	r5, r7
 8009ba6:	bf38      	it	cc
 8009ba8:	2304      	movcc	r3, #4
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	9103      	str	r1, [sp, #12]
 8009bb0:	428b      	cmp	r3, r1
 8009bb2:	d80c      	bhi.n	8009bce <__multiply+0x9a>
 8009bb4:	2e00      	cmp	r6, #0
 8009bb6:	dd03      	ble.n	8009bc0 <__multiply+0x8c>
 8009bb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d055      	beq.n	8009c6c <__multiply+0x138>
 8009bc0:	6106      	str	r6, [r0, #16]
 8009bc2:	b005      	add	sp, #20
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	f843 2b04 	str.w	r2, [r3], #4
 8009bcc:	e7d9      	b.n	8009b82 <__multiply+0x4e>
 8009bce:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bd2:	f1ba 0f00 	cmp.w	sl, #0
 8009bd6:	d01f      	beq.n	8009c18 <__multiply+0xe4>
 8009bd8:	46c4      	mov	ip, r8
 8009bda:	46a1      	mov	r9, r4
 8009bdc:	2700      	movs	r7, #0
 8009bde:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009be2:	f8d9 3000 	ldr.w	r3, [r9]
 8009be6:	fa1f fb82 	uxth.w	fp, r2
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bf0:	443b      	add	r3, r7
 8009bf2:	f8d9 7000 	ldr.w	r7, [r9]
 8009bf6:	0c12      	lsrs	r2, r2, #16
 8009bf8:	0c3f      	lsrs	r7, r7, #16
 8009bfa:	fb0a 7202 	mla	r2, sl, r2, r7
 8009bfe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c08:	4565      	cmp	r5, ip
 8009c0a:	f849 3b04 	str.w	r3, [r9], #4
 8009c0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009c12:	d8e4      	bhi.n	8009bde <__multiply+0xaa>
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	50e7      	str	r7, [r4, r3]
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c1e:	3104      	adds	r1, #4
 8009c20:	f1b9 0f00 	cmp.w	r9, #0
 8009c24:	d020      	beq.n	8009c68 <__multiply+0x134>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	4647      	mov	r7, r8
 8009c2a:	46a4      	mov	ip, r4
 8009c2c:	f04f 0a00 	mov.w	sl, #0
 8009c30:	f8b7 b000 	ldrh.w	fp, [r7]
 8009c34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009c38:	fb09 220b 	mla	r2, r9, fp, r2
 8009c3c:	4452      	add	r2, sl
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c44:	f84c 3b04 	str.w	r3, [ip], #4
 8009c48:	f857 3b04 	ldr.w	r3, [r7], #4
 8009c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c50:	f8bc 3000 	ldrh.w	r3, [ip]
 8009c54:	fb09 330a 	mla	r3, r9, sl, r3
 8009c58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009c5c:	42bd      	cmp	r5, r7
 8009c5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c62:	d8e5      	bhi.n	8009c30 <__multiply+0xfc>
 8009c64:	9a01      	ldr	r2, [sp, #4]
 8009c66:	50a3      	str	r3, [r4, r2]
 8009c68:	3404      	adds	r4, #4
 8009c6a:	e79f      	b.n	8009bac <__multiply+0x78>
 8009c6c:	3e01      	subs	r6, #1
 8009c6e:	e7a1      	b.n	8009bb4 <__multiply+0x80>
 8009c70:	0800aba4 	.word	0x0800aba4
 8009c74:	0800abb5 	.word	0x0800abb5

08009c78 <__pow5mult>:
 8009c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	4615      	mov	r5, r2
 8009c7e:	f012 0203 	ands.w	r2, r2, #3
 8009c82:	4607      	mov	r7, r0
 8009c84:	460e      	mov	r6, r1
 8009c86:	d007      	beq.n	8009c98 <__pow5mult+0x20>
 8009c88:	4c25      	ldr	r4, [pc, #148]	@ (8009d20 <__pow5mult+0xa8>)
 8009c8a:	3a01      	subs	r2, #1
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c92:	f7ff fea7 	bl	80099e4 <__multadd>
 8009c96:	4606      	mov	r6, r0
 8009c98:	10ad      	asrs	r5, r5, #2
 8009c9a:	d03d      	beq.n	8009d18 <__pow5mult+0xa0>
 8009c9c:	69fc      	ldr	r4, [r7, #28]
 8009c9e:	b97c      	cbnz	r4, 8009cc0 <__pow5mult+0x48>
 8009ca0:	2010      	movs	r0, #16
 8009ca2:	f7ff fd87 	bl	80097b4 <malloc>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	61f8      	str	r0, [r7, #28]
 8009caa:	b928      	cbnz	r0, 8009cb8 <__pow5mult+0x40>
 8009cac:	4b1d      	ldr	r3, [pc, #116]	@ (8009d24 <__pow5mult+0xac>)
 8009cae:	481e      	ldr	r0, [pc, #120]	@ (8009d28 <__pow5mult+0xb0>)
 8009cb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cb4:	f000 fdb0 	bl	800a818 <__assert_func>
 8009cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cbc:	6004      	str	r4, [r0, #0]
 8009cbe:	60c4      	str	r4, [r0, #12]
 8009cc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cc8:	b94c      	cbnz	r4, 8009cde <__pow5mult+0x66>
 8009cca:	f240 2171 	movw	r1, #625	@ 0x271
 8009cce:	4638      	mov	r0, r7
 8009cd0:	f7ff ff1a 	bl	8009b08 <__i2b>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cda:	4604      	mov	r4, r0
 8009cdc:	6003      	str	r3, [r0, #0]
 8009cde:	f04f 0900 	mov.w	r9, #0
 8009ce2:	07eb      	lsls	r3, r5, #31
 8009ce4:	d50a      	bpl.n	8009cfc <__pow5mult+0x84>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4638      	mov	r0, r7
 8009cec:	f7ff ff22 	bl	8009b34 <__multiply>
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	f7ff fe53 	bl	80099a0 <_Bfree>
 8009cfa:	4646      	mov	r6, r8
 8009cfc:	106d      	asrs	r5, r5, #1
 8009cfe:	d00b      	beq.n	8009d18 <__pow5mult+0xa0>
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	b938      	cbnz	r0, 8009d14 <__pow5mult+0x9c>
 8009d04:	4622      	mov	r2, r4
 8009d06:	4621      	mov	r1, r4
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f7ff ff13 	bl	8009b34 <__multiply>
 8009d0e:	6020      	str	r0, [r4, #0]
 8009d10:	f8c0 9000 	str.w	r9, [r0]
 8009d14:	4604      	mov	r4, r0
 8009d16:	e7e4      	b.n	8009ce2 <__pow5mult+0x6a>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1e:	bf00      	nop
 8009d20:	0800acc0 	.word	0x0800acc0
 8009d24:	0800ab35 	.word	0x0800ab35
 8009d28:	0800abb5 	.word	0x0800abb5

08009d2c <__lshift>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	460c      	mov	r4, r1
 8009d32:	6849      	ldr	r1, [r1, #4]
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	4691      	mov	r9, r2
 8009d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d44:	f108 0601 	add.w	r6, r8, #1
 8009d48:	42b3      	cmp	r3, r6
 8009d4a:	db0b      	blt.n	8009d64 <__lshift+0x38>
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f7ff fde7 	bl	8009920 <_Balloc>
 8009d52:	4605      	mov	r5, r0
 8009d54:	b948      	cbnz	r0, 8009d6a <__lshift+0x3e>
 8009d56:	4602      	mov	r2, r0
 8009d58:	4b28      	ldr	r3, [pc, #160]	@ (8009dfc <__lshift+0xd0>)
 8009d5a:	4829      	ldr	r0, [pc, #164]	@ (8009e00 <__lshift+0xd4>)
 8009d5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d60:	f000 fd5a 	bl	800a818 <__assert_func>
 8009d64:	3101      	adds	r1, #1
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	e7ee      	b.n	8009d48 <__lshift+0x1c>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f100 0114 	add.w	r1, r0, #20
 8009d70:	f100 0210 	add.w	r2, r0, #16
 8009d74:	4618      	mov	r0, r3
 8009d76:	4553      	cmp	r3, sl
 8009d78:	db33      	blt.n	8009de2 <__lshift+0xb6>
 8009d7a:	6920      	ldr	r0, [r4, #16]
 8009d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d80:	f104 0314 	add.w	r3, r4, #20
 8009d84:	f019 091f 	ands.w	r9, r9, #31
 8009d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d90:	d02b      	beq.n	8009dea <__lshift+0xbe>
 8009d92:	f1c9 0e20 	rsb	lr, r9, #32
 8009d96:	468a      	mov	sl, r1
 8009d98:	2200      	movs	r2, #0
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8009da0:	4310      	orrs	r0, r2
 8009da2:	f84a 0b04 	str.w	r0, [sl], #4
 8009da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009daa:	459c      	cmp	ip, r3
 8009dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8009db0:	d8f3      	bhi.n	8009d9a <__lshift+0x6e>
 8009db2:	ebac 0304 	sub.w	r3, ip, r4
 8009db6:	3b15      	subs	r3, #21
 8009db8:	f023 0303 	bic.w	r3, r3, #3
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	f104 0015 	add.w	r0, r4, #21
 8009dc2:	4560      	cmp	r0, ip
 8009dc4:	bf88      	it	hi
 8009dc6:	2304      	movhi	r3, #4
 8009dc8:	50ca      	str	r2, [r1, r3]
 8009dca:	b10a      	cbz	r2, 8009dd0 <__lshift+0xa4>
 8009dcc:	f108 0602 	add.w	r6, r8, #2
 8009dd0:	3e01      	subs	r6, #1
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	612e      	str	r6, [r5, #16]
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	f7ff fde2 	bl	80099a0 <_Bfree>
 8009ddc:	4628      	mov	r0, r5
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009de6:	3301      	adds	r3, #1
 8009de8:	e7c5      	b.n	8009d76 <__lshift+0x4a>
 8009dea:	3904      	subs	r1, #4
 8009dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009df4:	459c      	cmp	ip, r3
 8009df6:	d8f9      	bhi.n	8009dec <__lshift+0xc0>
 8009df8:	e7ea      	b.n	8009dd0 <__lshift+0xa4>
 8009dfa:	bf00      	nop
 8009dfc:	0800aba4 	.word	0x0800aba4
 8009e00:	0800abb5 	.word	0x0800abb5

08009e04 <__mcmp>:
 8009e04:	690a      	ldr	r2, [r1, #16]
 8009e06:	4603      	mov	r3, r0
 8009e08:	6900      	ldr	r0, [r0, #16]
 8009e0a:	1a80      	subs	r0, r0, r2
 8009e0c:	b530      	push	{r4, r5, lr}
 8009e0e:	d10e      	bne.n	8009e2e <__mcmp+0x2a>
 8009e10:	3314      	adds	r3, #20
 8009e12:	3114      	adds	r1, #20
 8009e14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e24:	4295      	cmp	r5, r2
 8009e26:	d003      	beq.n	8009e30 <__mcmp+0x2c>
 8009e28:	d205      	bcs.n	8009e36 <__mcmp+0x32>
 8009e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2e:	bd30      	pop	{r4, r5, pc}
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d3f3      	bcc.n	8009e1c <__mcmp+0x18>
 8009e34:	e7fb      	b.n	8009e2e <__mcmp+0x2a>
 8009e36:	2001      	movs	r0, #1
 8009e38:	e7f9      	b.n	8009e2e <__mcmp+0x2a>
	...

08009e3c <__mdiff>:
 8009e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	4689      	mov	r9, r1
 8009e42:	4606      	mov	r6, r0
 8009e44:	4611      	mov	r1, r2
 8009e46:	4648      	mov	r0, r9
 8009e48:	4614      	mov	r4, r2
 8009e4a:	f7ff ffdb 	bl	8009e04 <__mcmp>
 8009e4e:	1e05      	subs	r5, r0, #0
 8009e50:	d112      	bne.n	8009e78 <__mdiff+0x3c>
 8009e52:	4629      	mov	r1, r5
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff fd63 	bl	8009920 <_Balloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	b928      	cbnz	r0, 8009e6a <__mdiff+0x2e>
 8009e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8009f5c <__mdiff+0x120>)
 8009e60:	f240 2137 	movw	r1, #567	@ 0x237
 8009e64:	483e      	ldr	r0, [pc, #248]	@ (8009f60 <__mdiff+0x124>)
 8009e66:	f000 fcd7 	bl	800a818 <__assert_func>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e70:	4610      	mov	r0, r2
 8009e72:	b003      	add	sp, #12
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	bfbc      	itt	lt
 8009e7a:	464b      	movlt	r3, r9
 8009e7c:	46a1      	movlt	r9, r4
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e84:	bfba      	itte	lt
 8009e86:	461c      	movlt	r4, r3
 8009e88:	2501      	movlt	r5, #1
 8009e8a:	2500      	movge	r5, #0
 8009e8c:	f7ff fd48 	bl	8009920 <_Balloc>
 8009e90:	4602      	mov	r2, r0
 8009e92:	b918      	cbnz	r0, 8009e9c <__mdiff+0x60>
 8009e94:	4b31      	ldr	r3, [pc, #196]	@ (8009f5c <__mdiff+0x120>)
 8009e96:	f240 2145 	movw	r1, #581	@ 0x245
 8009e9a:	e7e3      	b.n	8009e64 <__mdiff+0x28>
 8009e9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ea0:	6926      	ldr	r6, [r4, #16]
 8009ea2:	60c5      	str	r5, [r0, #12]
 8009ea4:	f109 0310 	add.w	r3, r9, #16
 8009ea8:	f109 0514 	add.w	r5, r9, #20
 8009eac:	f104 0e14 	add.w	lr, r4, #20
 8009eb0:	f100 0b14 	add.w	fp, r0, #20
 8009eb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009eb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	46d9      	mov	r9, fp
 8009ec0:	f04f 0c00 	mov.w	ip, #0
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009eca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	fa1f f38a 	uxth.w	r3, sl
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	b283      	uxth	r3, r0
 8009ed8:	1acb      	subs	r3, r1, r3
 8009eda:	0c00      	lsrs	r0, r0, #16
 8009edc:	4463      	add	r3, ip
 8009ede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009eec:	4576      	cmp	r6, lr
 8009eee:	f849 3b04 	str.w	r3, [r9], #4
 8009ef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ef6:	d8e5      	bhi.n	8009ec4 <__mdiff+0x88>
 8009ef8:	1b33      	subs	r3, r6, r4
 8009efa:	3b15      	subs	r3, #21
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	3415      	adds	r4, #21
 8009f02:	3304      	adds	r3, #4
 8009f04:	42a6      	cmp	r6, r4
 8009f06:	bf38      	it	cc
 8009f08:	2304      	movcc	r3, #4
 8009f0a:	441d      	add	r5, r3
 8009f0c:	445b      	add	r3, fp
 8009f0e:	461e      	mov	r6, r3
 8009f10:	462c      	mov	r4, r5
 8009f12:	4544      	cmp	r4, r8
 8009f14:	d30e      	bcc.n	8009f34 <__mdiff+0xf8>
 8009f16:	f108 0103 	add.w	r1, r8, #3
 8009f1a:	1b49      	subs	r1, r1, r5
 8009f1c:	f021 0103 	bic.w	r1, r1, #3
 8009f20:	3d03      	subs	r5, #3
 8009f22:	45a8      	cmp	r8, r5
 8009f24:	bf38      	it	cc
 8009f26:	2100      	movcc	r1, #0
 8009f28:	440b      	add	r3, r1
 8009f2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f2e:	b191      	cbz	r1, 8009f56 <__mdiff+0x11a>
 8009f30:	6117      	str	r7, [r2, #16]
 8009f32:	e79d      	b.n	8009e70 <__mdiff+0x34>
 8009f34:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f38:	46e6      	mov	lr, ip
 8009f3a:	0c08      	lsrs	r0, r1, #16
 8009f3c:	fa1c fc81 	uxtah	ip, ip, r1
 8009f40:	4471      	add	r1, lr
 8009f42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f46:	b289      	uxth	r1, r1
 8009f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f4c:	f846 1b04 	str.w	r1, [r6], #4
 8009f50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f54:	e7dd      	b.n	8009f12 <__mdiff+0xd6>
 8009f56:	3f01      	subs	r7, #1
 8009f58:	e7e7      	b.n	8009f2a <__mdiff+0xee>
 8009f5a:	bf00      	nop
 8009f5c:	0800aba4 	.word	0x0800aba4
 8009f60:	0800abb5 	.word	0x0800abb5

08009f64 <__d2b>:
 8009f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	460f      	mov	r7, r1
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	ec59 8b10 	vmov	r8, r9, d0
 8009f70:	4616      	mov	r6, r2
 8009f72:	f7ff fcd5 	bl	8009920 <_Balloc>
 8009f76:	4604      	mov	r4, r0
 8009f78:	b930      	cbnz	r0, 8009f88 <__d2b+0x24>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	4b23      	ldr	r3, [pc, #140]	@ (800a00c <__d2b+0xa8>)
 8009f7e:	4824      	ldr	r0, [pc, #144]	@ (800a010 <__d2b+0xac>)
 8009f80:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f84:	f000 fc48 	bl	800a818 <__assert_func>
 8009f88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f90:	b10d      	cbz	r5, 8009f96 <__d2b+0x32>
 8009f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	f1b8 0300 	subs.w	r3, r8, #0
 8009f9c:	d023      	beq.n	8009fe6 <__d2b+0x82>
 8009f9e:	4668      	mov	r0, sp
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	f7ff fd84 	bl	8009aae <__lo0bits>
 8009fa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009faa:	b1d0      	cbz	r0, 8009fe2 <__d2b+0x7e>
 8009fac:	f1c0 0320 	rsb	r3, r0, #32
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	430b      	orrs	r3, r1
 8009fb6:	40c2      	lsrs	r2, r0
 8009fb8:	6163      	str	r3, [r4, #20]
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	61a3      	str	r3, [r4, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2201      	moveq	r2, #1
 8009fc6:	2202      	movne	r2, #2
 8009fc8:	6122      	str	r2, [r4, #16]
 8009fca:	b1a5      	cbz	r5, 8009ff6 <__d2b+0x92>
 8009fcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fd0:	4405      	add	r5, r0
 8009fd2:	603d      	str	r5, [r7, #0]
 8009fd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fd8:	6030      	str	r0, [r6, #0]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	b003      	add	sp, #12
 8009fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fe2:	6161      	str	r1, [r4, #20]
 8009fe4:	e7ea      	b.n	8009fbc <__d2b+0x58>
 8009fe6:	a801      	add	r0, sp, #4
 8009fe8:	f7ff fd61 	bl	8009aae <__lo0bits>
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	3020      	adds	r0, #32
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	e7e8      	b.n	8009fc8 <__d2b+0x64>
 8009ff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ffa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ffe:	6038      	str	r0, [r7, #0]
 800a000:	6918      	ldr	r0, [r3, #16]
 800a002:	f7ff fd35 	bl	8009a70 <__hi0bits>
 800a006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a00a:	e7e5      	b.n	8009fd8 <__d2b+0x74>
 800a00c:	0800aba4 	.word	0x0800aba4
 800a010:	0800abb5 	.word	0x0800abb5

0800a014 <__ssputs_r>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	688e      	ldr	r6, [r1, #8]
 800a01a:	461f      	mov	r7, r3
 800a01c:	42be      	cmp	r6, r7
 800a01e:	680b      	ldr	r3, [r1, #0]
 800a020:	4682      	mov	sl, r0
 800a022:	460c      	mov	r4, r1
 800a024:	4690      	mov	r8, r2
 800a026:	d82d      	bhi.n	800a084 <__ssputs_r+0x70>
 800a028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a02c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a030:	d026      	beq.n	800a080 <__ssputs_r+0x6c>
 800a032:	6965      	ldr	r5, [r4, #20]
 800a034:	6909      	ldr	r1, [r1, #16]
 800a036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a03a:	eba3 0901 	sub.w	r9, r3, r1
 800a03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a042:	1c7b      	adds	r3, r7, #1
 800a044:	444b      	add	r3, r9
 800a046:	106d      	asrs	r5, r5, #1
 800a048:	429d      	cmp	r5, r3
 800a04a:	bf38      	it	cc
 800a04c:	461d      	movcc	r5, r3
 800a04e:	0553      	lsls	r3, r2, #21
 800a050:	d527      	bpl.n	800a0a2 <__ssputs_r+0x8e>
 800a052:	4629      	mov	r1, r5
 800a054:	f7ff fbd8 	bl	8009808 <_malloc_r>
 800a058:	4606      	mov	r6, r0
 800a05a:	b360      	cbz	r0, 800a0b6 <__ssputs_r+0xa2>
 800a05c:	6921      	ldr	r1, [r4, #16]
 800a05e:	464a      	mov	r2, r9
 800a060:	f000 fbcc 	bl	800a7fc <memcpy>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	6126      	str	r6, [r4, #16]
 800a072:	6165      	str	r5, [r4, #20]
 800a074:	444e      	add	r6, r9
 800a076:	eba5 0509 	sub.w	r5, r5, r9
 800a07a:	6026      	str	r6, [r4, #0]
 800a07c:	60a5      	str	r5, [r4, #8]
 800a07e:	463e      	mov	r6, r7
 800a080:	42be      	cmp	r6, r7
 800a082:	d900      	bls.n	800a086 <__ssputs_r+0x72>
 800a084:	463e      	mov	r6, r7
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	4632      	mov	r2, r6
 800a08a:	4641      	mov	r1, r8
 800a08c:	f000 fb6a 	bl	800a764 <memmove>
 800a090:	68a3      	ldr	r3, [r4, #8]
 800a092:	1b9b      	subs	r3, r3, r6
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	4433      	add	r3, r6
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	2000      	movs	r0, #0
 800a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	f000 fbfc 	bl	800a8a0 <_realloc_r>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1e0      	bne.n	800a070 <__ssputs_r+0x5c>
 800a0ae:	6921      	ldr	r1, [r4, #16]
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	f7ff fb35 	bl	8009720 <_free_r>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	f8ca 3000 	str.w	r3, [sl]
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c2:	81a3      	strh	r3, [r4, #12]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e7e9      	b.n	800a09e <__ssputs_r+0x8a>
	...

0800a0cc <_svfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4698      	mov	r8, r3
 800a0d2:	898b      	ldrh	r3, [r1, #12]
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	b09d      	sub	sp, #116	@ 0x74
 800a0d8:	4607      	mov	r7, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	d510      	bpl.n	800a102 <_svfiprintf_r+0x36>
 800a0e0:	690b      	ldr	r3, [r1, #16]
 800a0e2:	b973      	cbnz	r3, 800a102 <_svfiprintf_r+0x36>
 800a0e4:	2140      	movs	r1, #64	@ 0x40
 800a0e6:	f7ff fb8f 	bl	8009808 <_malloc_r>
 800a0ea:	6028      	str	r0, [r5, #0]
 800a0ec:	6128      	str	r0, [r5, #16]
 800a0ee:	b930      	cbnz	r0, 800a0fe <_svfiprintf_r+0x32>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	b01d      	add	sp, #116	@ 0x74
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	2340      	movs	r3, #64	@ 0x40
 800a100:	616b      	str	r3, [r5, #20]
 800a102:	2300      	movs	r3, #0
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	2320      	movs	r3, #32
 800a108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a110:	2330      	movs	r3, #48	@ 0x30
 800a112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2b0 <_svfiprintf_r+0x1e4>
 800a116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a11a:	f04f 0901 	mov.w	r9, #1
 800a11e:	4623      	mov	r3, r4
 800a120:	469a      	mov	sl, r3
 800a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a126:	b10a      	cbz	r2, 800a12c <_svfiprintf_r+0x60>
 800a128:	2a25      	cmp	r2, #37	@ 0x25
 800a12a:	d1f9      	bne.n	800a120 <_svfiprintf_r+0x54>
 800a12c:	ebba 0b04 	subs.w	fp, sl, r4
 800a130:	d00b      	beq.n	800a14a <_svfiprintf_r+0x7e>
 800a132:	465b      	mov	r3, fp
 800a134:	4622      	mov	r2, r4
 800a136:	4629      	mov	r1, r5
 800a138:	4638      	mov	r0, r7
 800a13a:	f7ff ff6b 	bl	800a014 <__ssputs_r>
 800a13e:	3001      	adds	r0, #1
 800a140:	f000 80a7 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a146:	445a      	add	r2, fp
 800a148:	9209      	str	r2, [sp, #36]	@ 0x24
 800a14a:	f89a 3000 	ldrb.w	r3, [sl]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 809f 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a154:	2300      	movs	r3, #0
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15e:	f10a 0a01 	add.w	sl, sl, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	9307      	str	r3, [sp, #28]
 800a166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a16a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a16c:	4654      	mov	r4, sl
 800a16e:	2205      	movs	r2, #5
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	484e      	ldr	r0, [pc, #312]	@ (800a2b0 <_svfiprintf_r+0x1e4>)
 800a176:	f7f6 f833 	bl	80001e0 <memchr>
 800a17a:	9a04      	ldr	r2, [sp, #16]
 800a17c:	b9d8      	cbnz	r0, 800a1b6 <_svfiprintf_r+0xea>
 800a17e:	06d0      	lsls	r0, r2, #27
 800a180:	bf44      	itt	mi
 800a182:	2320      	movmi	r3, #32
 800a184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a188:	0711      	lsls	r1, r2, #28
 800a18a:	bf44      	itt	mi
 800a18c:	232b      	movmi	r3, #43	@ 0x2b
 800a18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a192:	f89a 3000 	ldrb.w	r3, [sl]
 800a196:	2b2a      	cmp	r3, #42	@ 0x2a
 800a198:	d015      	beq.n	800a1c6 <_svfiprintf_r+0xfa>
 800a19a:	9a07      	ldr	r2, [sp, #28]
 800a19c:	4654      	mov	r4, sl
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f04f 0c0a 	mov.w	ip, #10
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1aa:	3b30      	subs	r3, #48	@ 0x30
 800a1ac:	2b09      	cmp	r3, #9
 800a1ae:	d94b      	bls.n	800a248 <_svfiprintf_r+0x17c>
 800a1b0:	b1b0      	cbz	r0, 800a1e0 <_svfiprintf_r+0x114>
 800a1b2:	9207      	str	r2, [sp, #28]
 800a1b4:	e014      	b.n	800a1e0 <_svfiprintf_r+0x114>
 800a1b6:	eba0 0308 	sub.w	r3, r0, r8
 800a1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	46a2      	mov	sl, r4
 800a1c4:	e7d2      	b.n	800a16c <_svfiprintf_r+0xa0>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d19      	adds	r1, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9103      	str	r1, [sp, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfbb      	ittet	lt
 800a1d2:	425b      	neglt	r3, r3
 800a1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d8:	9307      	strge	r3, [sp, #28]
 800a1da:	9307      	strlt	r3, [sp, #28]
 800a1dc:	bfb8      	it	lt
 800a1de:	9204      	strlt	r2, [sp, #16]
 800a1e0:	7823      	ldrb	r3, [r4, #0]
 800a1e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e4:	d10a      	bne.n	800a1fc <_svfiprintf_r+0x130>
 800a1e6:	7863      	ldrb	r3, [r4, #1]
 800a1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ea:	d132      	bne.n	800a252 <_svfiprintf_r+0x186>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9203      	str	r2, [sp, #12]
 800a1f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f8:	3402      	adds	r4, #2
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2c0 <_svfiprintf_r+0x1f4>
 800a200:	7821      	ldrb	r1, [r4, #0]
 800a202:	2203      	movs	r2, #3
 800a204:	4650      	mov	r0, sl
 800a206:	f7f5 ffeb 	bl	80001e0 <memchr>
 800a20a:	b138      	cbz	r0, 800a21c <_svfiprintf_r+0x150>
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	eba0 000a 	sub.w	r0, r0, sl
 800a212:	2240      	movs	r2, #64	@ 0x40
 800a214:	4082      	lsls	r2, r0
 800a216:	4313      	orrs	r3, r2
 800a218:	3401      	adds	r4, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	4824      	ldr	r0, [pc, #144]	@ (800a2b4 <_svfiprintf_r+0x1e8>)
 800a222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a226:	2206      	movs	r2, #6
 800a228:	f7f5 ffda 	bl	80001e0 <memchr>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d036      	beq.n	800a29e <_svfiprintf_r+0x1d2>
 800a230:	4b21      	ldr	r3, [pc, #132]	@ (800a2b8 <_svfiprintf_r+0x1ec>)
 800a232:	bb1b      	cbnz	r3, 800a27c <_svfiprintf_r+0x1b0>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	3307      	adds	r3, #7
 800a238:	f023 0307 	bic.w	r3, r3, #7
 800a23c:	3308      	adds	r3, #8
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a242:	4433      	add	r3, r6
 800a244:	9309      	str	r3, [sp, #36]	@ 0x24
 800a246:	e76a      	b.n	800a11e <_svfiprintf_r+0x52>
 800a248:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24c:	460c      	mov	r4, r1
 800a24e:	2001      	movs	r0, #1
 800a250:	e7a8      	b.n	800a1a4 <_svfiprintf_r+0xd8>
 800a252:	2300      	movs	r3, #0
 800a254:	3401      	adds	r4, #1
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	4619      	mov	r1, r3
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	4620      	mov	r0, r4
 800a260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a264:	3a30      	subs	r2, #48	@ 0x30
 800a266:	2a09      	cmp	r2, #9
 800a268:	d903      	bls.n	800a272 <_svfiprintf_r+0x1a6>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c6      	beq.n	800a1fc <_svfiprintf_r+0x130>
 800a26e:	9105      	str	r1, [sp, #20]
 800a270:	e7c4      	b.n	800a1fc <_svfiprintf_r+0x130>
 800a272:	fb0c 2101 	mla	r1, ip, r1, r2
 800a276:	4604      	mov	r4, r0
 800a278:	2301      	movs	r3, #1
 800a27a:	e7f0      	b.n	800a25e <_svfiprintf_r+0x192>
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	462a      	mov	r2, r5
 800a282:	4b0e      	ldr	r3, [pc, #56]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a284:	a904      	add	r1, sp, #16
 800a286:	4638      	mov	r0, r7
 800a288:	f7fd fd7a 	bl	8007d80 <_printf_float>
 800a28c:	1c42      	adds	r2, r0, #1
 800a28e:	4606      	mov	r6, r0
 800a290:	d1d6      	bne.n	800a240 <_svfiprintf_r+0x174>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af2d 	bmi.w	800a0f4 <_svfiprintf_r+0x28>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e72c      	b.n	800a0f8 <_svfiprintf_r+0x2c>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7fe f801 	bl	80082b0 <_printf_i>
 800a2ae:	e7ed      	b.n	800a28c <_svfiprintf_r+0x1c0>
 800a2b0:	0800ac0e 	.word	0x0800ac0e
 800a2b4:	0800ac18 	.word	0x0800ac18
 800a2b8:	08007d81 	.word	0x08007d81
 800a2bc:	0800a015 	.word	0x0800a015
 800a2c0:	0800ac14 	.word	0x0800ac14

0800a2c4 <__sfputc_r>:
 800a2c4:	6893      	ldr	r3, [r2, #8]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	b410      	push	{r4}
 800a2cc:	6093      	str	r3, [r2, #8]
 800a2ce:	da08      	bge.n	800a2e2 <__sfputc_r+0x1e>
 800a2d0:	6994      	ldr	r4, [r2, #24]
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	db01      	blt.n	800a2da <__sfputc_r+0x16>
 800a2d6:	290a      	cmp	r1, #10
 800a2d8:	d103      	bne.n	800a2e2 <__sfputc_r+0x1e>
 800a2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2de:	f7fe bab0 	b.w	8008842 <__swbuf_r>
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	1c58      	adds	r0, r3, #1
 800a2e6:	6010      	str	r0, [r2, #0]
 800a2e8:	7019      	strb	r1, [r3, #0]
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <__sfputs_r>:
 800a2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	18d5      	adds	r5, r2, r3
 800a2fc:	42ac      	cmp	r4, r5
 800a2fe:	d101      	bne.n	800a304 <__sfputs_r+0x12>
 800a300:	2000      	movs	r0, #0
 800a302:	e007      	b.n	800a314 <__sfputs_r+0x22>
 800a304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a308:	463a      	mov	r2, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ffda 	bl	800a2c4 <__sfputc_r>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d1f3      	bne.n	800a2fc <__sfputs_r+0xa>
 800a314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a318 <_vfiprintf_r>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	460d      	mov	r5, r1
 800a31e:	b09d      	sub	sp, #116	@ 0x74
 800a320:	4614      	mov	r4, r2
 800a322:	4698      	mov	r8, r3
 800a324:	4606      	mov	r6, r0
 800a326:	b118      	cbz	r0, 800a330 <_vfiprintf_r+0x18>
 800a328:	6a03      	ldr	r3, [r0, #32]
 800a32a:	b90b      	cbnz	r3, 800a330 <_vfiprintf_r+0x18>
 800a32c:	f7fe f96a 	bl	8008604 <__sinit>
 800a330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a332:	07d9      	lsls	r1, r3, #31
 800a334:	d405      	bmi.n	800a342 <_vfiprintf_r+0x2a>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	059a      	lsls	r2, r3, #22
 800a33a:	d402      	bmi.n	800a342 <_vfiprintf_r+0x2a>
 800a33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a33e:	f7fe fb92 	bl	8008a66 <__retarget_lock_acquire_recursive>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	071b      	lsls	r3, r3, #28
 800a346:	d501      	bpl.n	800a34c <_vfiprintf_r+0x34>
 800a348:	692b      	ldr	r3, [r5, #16]
 800a34a:	b99b      	cbnz	r3, 800a374 <_vfiprintf_r+0x5c>
 800a34c:	4629      	mov	r1, r5
 800a34e:	4630      	mov	r0, r6
 800a350:	f7fe fab6 	bl	80088c0 <__swsetup_r>
 800a354:	b170      	cbz	r0, 800a374 <_vfiprintf_r+0x5c>
 800a356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a358:	07dc      	lsls	r4, r3, #31
 800a35a:	d504      	bpl.n	800a366 <_vfiprintf_r+0x4e>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b01d      	add	sp, #116	@ 0x74
 800a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	0598      	lsls	r0, r3, #22
 800a36a:	d4f7      	bmi.n	800a35c <_vfiprintf_r+0x44>
 800a36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36e:	f7fe fb7b 	bl	8008a68 <__retarget_lock_release_recursive>
 800a372:	e7f3      	b.n	800a35c <_vfiprintf_r+0x44>
 800a374:	2300      	movs	r3, #0
 800a376:	9309      	str	r3, [sp, #36]	@ 0x24
 800a378:	2320      	movs	r3, #32
 800a37a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a37e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a382:	2330      	movs	r3, #48	@ 0x30
 800a384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a534 <_vfiprintf_r+0x21c>
 800a388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a38c:	f04f 0901 	mov.w	r9, #1
 800a390:	4623      	mov	r3, r4
 800a392:	469a      	mov	sl, r3
 800a394:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a398:	b10a      	cbz	r2, 800a39e <_vfiprintf_r+0x86>
 800a39a:	2a25      	cmp	r2, #37	@ 0x25
 800a39c:	d1f9      	bne.n	800a392 <_vfiprintf_r+0x7a>
 800a39e:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a2:	d00b      	beq.n	800a3bc <_vfiprintf_r+0xa4>
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7ff ffa1 	bl	800a2f2 <__sfputs_r>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f000 80a7 	beq.w	800a504 <_vfiprintf_r+0x1ec>
 800a3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3b8:	445a      	add	r2, fp
 800a3ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 809f 	beq.w	800a504 <_vfiprintf_r+0x1ec>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d0:	f10a 0a01 	add.w	sl, sl, #1
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	9307      	str	r3, [sp, #28]
 800a3d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3de:	4654      	mov	r4, sl
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	4853      	ldr	r0, [pc, #332]	@ (800a534 <_vfiprintf_r+0x21c>)
 800a3e8:	f7f5 fefa 	bl	80001e0 <memchr>
 800a3ec:	9a04      	ldr	r2, [sp, #16]
 800a3ee:	b9d8      	cbnz	r0, 800a428 <_vfiprintf_r+0x110>
 800a3f0:	06d1      	lsls	r1, r2, #27
 800a3f2:	bf44      	itt	mi
 800a3f4:	2320      	movmi	r3, #32
 800a3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3fa:	0713      	lsls	r3, r2, #28
 800a3fc:	bf44      	itt	mi
 800a3fe:	232b      	movmi	r3, #43	@ 0x2b
 800a400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a404:	f89a 3000 	ldrb.w	r3, [sl]
 800a408:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40a:	d015      	beq.n	800a438 <_vfiprintf_r+0x120>
 800a40c:	9a07      	ldr	r2, [sp, #28]
 800a40e:	4654      	mov	r4, sl
 800a410:	2000      	movs	r0, #0
 800a412:	f04f 0c0a 	mov.w	ip, #10
 800a416:	4621      	mov	r1, r4
 800a418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a41c:	3b30      	subs	r3, #48	@ 0x30
 800a41e:	2b09      	cmp	r3, #9
 800a420:	d94b      	bls.n	800a4ba <_vfiprintf_r+0x1a2>
 800a422:	b1b0      	cbz	r0, 800a452 <_vfiprintf_r+0x13a>
 800a424:	9207      	str	r2, [sp, #28]
 800a426:	e014      	b.n	800a452 <_vfiprintf_r+0x13a>
 800a428:	eba0 0308 	sub.w	r3, r0, r8
 800a42c:	fa09 f303 	lsl.w	r3, r9, r3
 800a430:	4313      	orrs	r3, r2
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	46a2      	mov	sl, r4
 800a436:	e7d2      	b.n	800a3de <_vfiprintf_r+0xc6>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	1d19      	adds	r1, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	9103      	str	r1, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfbb      	ittet	lt
 800a444:	425b      	neglt	r3, r3
 800a446:	f042 0202 	orrlt.w	r2, r2, #2
 800a44a:	9307      	strge	r3, [sp, #28]
 800a44c:	9307      	strlt	r3, [sp, #28]
 800a44e:	bfb8      	it	lt
 800a450:	9204      	strlt	r2, [sp, #16]
 800a452:	7823      	ldrb	r3, [r4, #0]
 800a454:	2b2e      	cmp	r3, #46	@ 0x2e
 800a456:	d10a      	bne.n	800a46e <_vfiprintf_r+0x156>
 800a458:	7863      	ldrb	r3, [r4, #1]
 800a45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a45c:	d132      	bne.n	800a4c4 <_vfiprintf_r+0x1ac>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	1d1a      	adds	r2, r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	9203      	str	r2, [sp, #12]
 800a466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a46a:	3402      	adds	r4, #2
 800a46c:	9305      	str	r3, [sp, #20]
 800a46e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a544 <_vfiprintf_r+0x22c>
 800a472:	7821      	ldrb	r1, [r4, #0]
 800a474:	2203      	movs	r2, #3
 800a476:	4650      	mov	r0, sl
 800a478:	f7f5 feb2 	bl	80001e0 <memchr>
 800a47c:	b138      	cbz	r0, 800a48e <_vfiprintf_r+0x176>
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	eba0 000a 	sub.w	r0, r0, sl
 800a484:	2240      	movs	r2, #64	@ 0x40
 800a486:	4082      	lsls	r2, r0
 800a488:	4313      	orrs	r3, r2
 800a48a:	3401      	adds	r4, #1
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a492:	4829      	ldr	r0, [pc, #164]	@ (800a538 <_vfiprintf_r+0x220>)
 800a494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a498:	2206      	movs	r2, #6
 800a49a:	f7f5 fea1 	bl	80001e0 <memchr>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d03f      	beq.n	800a522 <_vfiprintf_r+0x20a>
 800a4a2:	4b26      	ldr	r3, [pc, #152]	@ (800a53c <_vfiprintf_r+0x224>)
 800a4a4:	bb1b      	cbnz	r3, 800a4ee <_vfiprintf_r+0x1d6>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	3307      	adds	r3, #7
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b4:	443b      	add	r3, r7
 800a4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4b8:	e76a      	b.n	800a390 <_vfiprintf_r+0x78>
 800a4ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4be:	460c      	mov	r4, r1
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	e7a8      	b.n	800a416 <_vfiprintf_r+0xfe>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	3401      	adds	r4, #1
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f04f 0c0a 	mov.w	ip, #10
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d6:	3a30      	subs	r2, #48	@ 0x30
 800a4d8:	2a09      	cmp	r2, #9
 800a4da:	d903      	bls.n	800a4e4 <_vfiprintf_r+0x1cc>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0c6      	beq.n	800a46e <_vfiprintf_r+0x156>
 800a4e0:	9105      	str	r1, [sp, #20]
 800a4e2:	e7c4      	b.n	800a46e <_vfiprintf_r+0x156>
 800a4e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e7f0      	b.n	800a4d0 <_vfiprintf_r+0x1b8>
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	462a      	mov	r2, r5
 800a4f4:	4b12      	ldr	r3, [pc, #72]	@ (800a540 <_vfiprintf_r+0x228>)
 800a4f6:	a904      	add	r1, sp, #16
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7fd fc41 	bl	8007d80 <_printf_float>
 800a4fe:	4607      	mov	r7, r0
 800a500:	1c78      	adds	r0, r7, #1
 800a502:	d1d6      	bne.n	800a4b2 <_vfiprintf_r+0x19a>
 800a504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a506:	07d9      	lsls	r1, r3, #31
 800a508:	d405      	bmi.n	800a516 <_vfiprintf_r+0x1fe>
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	059a      	lsls	r2, r3, #22
 800a50e:	d402      	bmi.n	800a516 <_vfiprintf_r+0x1fe>
 800a510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a512:	f7fe faa9 	bl	8008a68 <__retarget_lock_release_recursive>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	065b      	lsls	r3, r3, #25
 800a51a:	f53f af1f 	bmi.w	800a35c <_vfiprintf_r+0x44>
 800a51e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a520:	e71e      	b.n	800a360 <_vfiprintf_r+0x48>
 800a522:	ab03      	add	r3, sp, #12
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	462a      	mov	r2, r5
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <_vfiprintf_r+0x228>)
 800a52a:	a904      	add	r1, sp, #16
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7fd febf 	bl	80082b0 <_printf_i>
 800a532:	e7e4      	b.n	800a4fe <_vfiprintf_r+0x1e6>
 800a534:	0800ac0e 	.word	0x0800ac0e
 800a538:	0800ac18 	.word	0x0800ac18
 800a53c:	08007d81 	.word	0x08007d81
 800a540:	0800a2f3 	.word	0x0800a2f3
 800a544:	0800ac14 	.word	0x0800ac14

0800a548 <__sflush_r>:
 800a548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	0716      	lsls	r6, r2, #28
 800a552:	4605      	mov	r5, r0
 800a554:	460c      	mov	r4, r1
 800a556:	d454      	bmi.n	800a602 <__sflush_r+0xba>
 800a558:	684b      	ldr	r3, [r1, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dc02      	bgt.n	800a564 <__sflush_r+0x1c>
 800a55e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	dd48      	ble.n	800a5f6 <__sflush_r+0xae>
 800a564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a566:	2e00      	cmp	r6, #0
 800a568:	d045      	beq.n	800a5f6 <__sflush_r+0xae>
 800a56a:	2300      	movs	r3, #0
 800a56c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a570:	682f      	ldr	r7, [r5, #0]
 800a572:	6a21      	ldr	r1, [r4, #32]
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	d030      	beq.n	800a5da <__sflush_r+0x92>
 800a578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	0759      	lsls	r1, r3, #29
 800a57e:	d505      	bpl.n	800a58c <__sflush_r+0x44>
 800a580:	6863      	ldr	r3, [r4, #4]
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a586:	b10b      	cbz	r3, 800a58c <__sflush_r+0x44>
 800a588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	2300      	movs	r3, #0
 800a58e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a590:	6a21      	ldr	r1, [r4, #32]
 800a592:	4628      	mov	r0, r5
 800a594:	47b0      	blx	r6
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	d106      	bne.n	800a5aa <__sflush_r+0x62>
 800a59c:	6829      	ldr	r1, [r5, #0]
 800a59e:	291d      	cmp	r1, #29
 800a5a0:	d82b      	bhi.n	800a5fa <__sflush_r+0xb2>
 800a5a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a64c <__sflush_r+0x104>)
 800a5a4:	40ca      	lsrs	r2, r1
 800a5a6:	07d6      	lsls	r6, r2, #31
 800a5a8:	d527      	bpl.n	800a5fa <__sflush_r+0xb2>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	6062      	str	r2, [r4, #4]
 800a5ae:	04d9      	lsls	r1, r3, #19
 800a5b0:	6922      	ldr	r2, [r4, #16]
 800a5b2:	6022      	str	r2, [r4, #0]
 800a5b4:	d504      	bpl.n	800a5c0 <__sflush_r+0x78>
 800a5b6:	1c42      	adds	r2, r0, #1
 800a5b8:	d101      	bne.n	800a5be <__sflush_r+0x76>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b903      	cbnz	r3, 800a5c0 <__sflush_r+0x78>
 800a5be:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5c2:	602f      	str	r7, [r5, #0]
 800a5c4:	b1b9      	cbz	r1, 800a5f6 <__sflush_r+0xae>
 800a5c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	d002      	beq.n	800a5d4 <__sflush_r+0x8c>
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f7ff f8a6 	bl	8009720 <_free_r>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5d8:	e00d      	b.n	800a5f6 <__sflush_r+0xae>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4628      	mov	r0, r5
 800a5de:	47b0      	blx	r6
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	1c50      	adds	r0, r2, #1
 800a5e4:	d1c9      	bne.n	800a57a <__sflush_r+0x32>
 800a5e6:	682b      	ldr	r3, [r5, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0c6      	beq.n	800a57a <__sflush_r+0x32>
 800a5ec:	2b1d      	cmp	r3, #29
 800a5ee:	d001      	beq.n	800a5f4 <__sflush_r+0xac>
 800a5f0:	2b16      	cmp	r3, #22
 800a5f2:	d11e      	bne.n	800a632 <__sflush_r+0xea>
 800a5f4:	602f      	str	r7, [r5, #0]
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e022      	b.n	800a640 <__sflush_r+0xf8>
 800a5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5fe:	b21b      	sxth	r3, r3
 800a600:	e01b      	b.n	800a63a <__sflush_r+0xf2>
 800a602:	690f      	ldr	r7, [r1, #16]
 800a604:	2f00      	cmp	r7, #0
 800a606:	d0f6      	beq.n	800a5f6 <__sflush_r+0xae>
 800a608:	0793      	lsls	r3, r2, #30
 800a60a:	680e      	ldr	r6, [r1, #0]
 800a60c:	bf08      	it	eq
 800a60e:	694b      	ldreq	r3, [r1, #20]
 800a610:	600f      	str	r7, [r1, #0]
 800a612:	bf18      	it	ne
 800a614:	2300      	movne	r3, #0
 800a616:	eba6 0807 	sub.w	r8, r6, r7
 800a61a:	608b      	str	r3, [r1, #8]
 800a61c:	f1b8 0f00 	cmp.w	r8, #0
 800a620:	dde9      	ble.n	800a5f6 <__sflush_r+0xae>
 800a622:	6a21      	ldr	r1, [r4, #32]
 800a624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a626:	4643      	mov	r3, r8
 800a628:	463a      	mov	r2, r7
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b0      	blx	r6
 800a62e:	2800      	cmp	r0, #0
 800a630:	dc08      	bgt.n	800a644 <__sflush_r+0xfc>
 800a632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63a:	81a3      	strh	r3, [r4, #12]
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a644:	4407      	add	r7, r0
 800a646:	eba8 0800 	sub.w	r8, r8, r0
 800a64a:	e7e7      	b.n	800a61c <__sflush_r+0xd4>
 800a64c:	20400001 	.word	0x20400001

0800a650 <_fflush_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	690b      	ldr	r3, [r1, #16]
 800a654:	4605      	mov	r5, r0
 800a656:	460c      	mov	r4, r1
 800a658:	b913      	cbnz	r3, 800a660 <_fflush_r+0x10>
 800a65a:	2500      	movs	r5, #0
 800a65c:	4628      	mov	r0, r5
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	b118      	cbz	r0, 800a66a <_fflush_r+0x1a>
 800a662:	6a03      	ldr	r3, [r0, #32]
 800a664:	b90b      	cbnz	r3, 800a66a <_fflush_r+0x1a>
 800a666:	f7fd ffcd 	bl	8008604 <__sinit>
 800a66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0f3      	beq.n	800a65a <_fflush_r+0xa>
 800a672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a674:	07d0      	lsls	r0, r2, #31
 800a676:	d404      	bmi.n	800a682 <_fflush_r+0x32>
 800a678:	0599      	lsls	r1, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_fflush_r+0x32>
 800a67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a67e:	f7fe f9f2 	bl	8008a66 <__retarget_lock_acquire_recursive>
 800a682:	4628      	mov	r0, r5
 800a684:	4621      	mov	r1, r4
 800a686:	f7ff ff5f 	bl	800a548 <__sflush_r>
 800a68a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a68c:	07da      	lsls	r2, r3, #31
 800a68e:	4605      	mov	r5, r0
 800a690:	d4e4      	bmi.n	800a65c <_fflush_r+0xc>
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	059b      	lsls	r3, r3, #22
 800a696:	d4e1      	bmi.n	800a65c <_fflush_r+0xc>
 800a698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a69a:	f7fe f9e5 	bl	8008a68 <__retarget_lock_release_recursive>
 800a69e:	e7dd      	b.n	800a65c <_fflush_r+0xc>

0800a6a0 <__swhatbuf_r>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	b096      	sub	sp, #88	@ 0x58
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	461e      	mov	r6, r3
 800a6b0:	da0d      	bge.n	800a6ce <__swhatbuf_r+0x2e>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6b8:	f04f 0100 	mov.w	r1, #0
 800a6bc:	bf14      	ite	ne
 800a6be:	2340      	movne	r3, #64	@ 0x40
 800a6c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	6031      	str	r1, [r6, #0]
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	b016      	add	sp, #88	@ 0x58
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	466a      	mov	r2, sp
 800a6d0:	f000 f862 	bl	800a798 <_fstat_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	dbec      	blt.n	800a6b2 <__swhatbuf_r+0x12>
 800a6d8:	9901      	ldr	r1, [sp, #4]
 800a6da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6e2:	4259      	negs	r1, r3
 800a6e4:	4159      	adcs	r1, r3
 800a6e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ea:	e7eb      	b.n	800a6c4 <__swhatbuf_r+0x24>

0800a6ec <__smakebuf_r>:
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6f0:	079d      	lsls	r5, r3, #30
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	d507      	bpl.n	800a708 <__smakebuf_r+0x1c>
 800a6f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	2301      	movs	r3, #1
 800a702:	6163      	str	r3, [r4, #20]
 800a704:	b003      	add	sp, #12
 800a706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a708:	ab01      	add	r3, sp, #4
 800a70a:	466a      	mov	r2, sp
 800a70c:	f7ff ffc8 	bl	800a6a0 <__swhatbuf_r>
 800a710:	9f00      	ldr	r7, [sp, #0]
 800a712:	4605      	mov	r5, r0
 800a714:	4639      	mov	r1, r7
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff f876 	bl	8009808 <_malloc_r>
 800a71c:	b948      	cbnz	r0, 800a732 <__smakebuf_r+0x46>
 800a71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a722:	059a      	lsls	r2, r3, #22
 800a724:	d4ee      	bmi.n	800a704 <__smakebuf_r+0x18>
 800a726:	f023 0303 	bic.w	r3, r3, #3
 800a72a:	f043 0302 	orr.w	r3, r3, #2
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	e7e2      	b.n	800a6f8 <__smakebuf_r+0xc>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	6020      	str	r0, [r4, #0]
 800a736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a742:	b15b      	cbz	r3, 800a75c <__smakebuf_r+0x70>
 800a744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 f837 	bl	800a7bc <_isatty_r>
 800a74e:	b128      	cbz	r0, 800a75c <__smakebuf_r+0x70>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	431d      	orrs	r5, r3
 800a760:	81a5      	strh	r5, [r4, #12]
 800a762:	e7cf      	b.n	800a704 <__smakebuf_r+0x18>

0800a764 <memmove>:
 800a764:	4288      	cmp	r0, r1
 800a766:	b510      	push	{r4, lr}
 800a768:	eb01 0402 	add.w	r4, r1, r2
 800a76c:	d902      	bls.n	800a774 <memmove+0x10>
 800a76e:	4284      	cmp	r4, r0
 800a770:	4623      	mov	r3, r4
 800a772:	d807      	bhi.n	800a784 <memmove+0x20>
 800a774:	1e43      	subs	r3, r0, #1
 800a776:	42a1      	cmp	r1, r4
 800a778:	d008      	beq.n	800a78c <memmove+0x28>
 800a77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a782:	e7f8      	b.n	800a776 <memmove+0x12>
 800a784:	4402      	add	r2, r0
 800a786:	4601      	mov	r1, r0
 800a788:	428a      	cmp	r2, r1
 800a78a:	d100      	bne.n	800a78e <memmove+0x2a>
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a796:	e7f7      	b.n	800a788 <memmove+0x24>

0800a798 <_fstat_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	@ (800a7b8 <_fstat_r+0x20>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f7f7 fb47 	bl	8001e38 <_fstat>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d102      	bne.n	800a7b4 <_fstat_r+0x1c>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	b103      	cbz	r3, 800a7b4 <_fstat_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd38      	pop	{r3, r4, r5, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200004d0 	.word	0x200004d0

0800a7bc <_isatty_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	@ (800a7d8 <_isatty_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f7 fb46 	bl	8001e58 <_isatty>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_isatty_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_isatty_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	200004d0 	.word	0x200004d0

0800a7dc <_sbrk_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d06      	ldr	r5, [pc, #24]	@ (800a7f8 <_sbrk_r+0x1c>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	f7f7 fb4e 	bl	8001e88 <_sbrk>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_sbrk_r+0x1a>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_sbrk_r+0x1a>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	200004d0 	.word	0x200004d0

0800a7fc <memcpy>:
 800a7fc:	440a      	add	r2, r1
 800a7fe:	4291      	cmp	r1, r2
 800a800:	f100 33ff 	add.w	r3, r0, #4294967295
 800a804:	d100      	bne.n	800a808 <memcpy+0xc>
 800a806:	4770      	bx	lr
 800a808:	b510      	push	{r4, lr}
 800a80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a812:	4291      	cmp	r1, r2
 800a814:	d1f9      	bne.n	800a80a <memcpy+0xe>
 800a816:	bd10      	pop	{r4, pc}

0800a818 <__assert_func>:
 800a818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81a:	4614      	mov	r4, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b09      	ldr	r3, [pc, #36]	@ (800a844 <__assert_func+0x2c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4605      	mov	r5, r0
 800a824:	68d8      	ldr	r0, [r3, #12]
 800a826:	b14c      	cbz	r4, 800a83c <__assert_func+0x24>
 800a828:	4b07      	ldr	r3, [pc, #28]	@ (800a848 <__assert_func+0x30>)
 800a82a:	9100      	str	r1, [sp, #0]
 800a82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a830:	4906      	ldr	r1, [pc, #24]	@ (800a84c <__assert_func+0x34>)
 800a832:	462b      	mov	r3, r5
 800a834:	f000 f870 	bl	800a918 <fiprintf>
 800a838:	f000 f880 	bl	800a93c <abort>
 800a83c:	4b04      	ldr	r3, [pc, #16]	@ (800a850 <__assert_func+0x38>)
 800a83e:	461c      	mov	r4, r3
 800a840:	e7f3      	b.n	800a82a <__assert_func+0x12>
 800a842:	bf00      	nop
 800a844:	2000001c 	.word	0x2000001c
 800a848:	0800ac29 	.word	0x0800ac29
 800a84c:	0800ac36 	.word	0x0800ac36
 800a850:	0800ac64 	.word	0x0800ac64

0800a854 <_calloc_r>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	fba1 5402 	umull	r5, r4, r1, r2
 800a85a:	b934      	cbnz	r4, 800a86a <_calloc_r+0x16>
 800a85c:	4629      	mov	r1, r5
 800a85e:	f7fe ffd3 	bl	8009808 <_malloc_r>
 800a862:	4606      	mov	r6, r0
 800a864:	b928      	cbnz	r0, 800a872 <_calloc_r+0x1e>
 800a866:	4630      	mov	r0, r6
 800a868:	bd70      	pop	{r4, r5, r6, pc}
 800a86a:	220c      	movs	r2, #12
 800a86c:	6002      	str	r2, [r0, #0]
 800a86e:	2600      	movs	r6, #0
 800a870:	e7f9      	b.n	800a866 <_calloc_r+0x12>
 800a872:	462a      	mov	r2, r5
 800a874:	4621      	mov	r1, r4
 800a876:	f7fe f879 	bl	800896c <memset>
 800a87a:	e7f4      	b.n	800a866 <_calloc_r+0x12>

0800a87c <__ascii_mbtowc>:
 800a87c:	b082      	sub	sp, #8
 800a87e:	b901      	cbnz	r1, 800a882 <__ascii_mbtowc+0x6>
 800a880:	a901      	add	r1, sp, #4
 800a882:	b142      	cbz	r2, 800a896 <__ascii_mbtowc+0x1a>
 800a884:	b14b      	cbz	r3, 800a89a <__ascii_mbtowc+0x1e>
 800a886:	7813      	ldrb	r3, [r2, #0]
 800a888:	600b      	str	r3, [r1, #0]
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	1e10      	subs	r0, r2, #0
 800a88e:	bf18      	it	ne
 800a890:	2001      	movne	r0, #1
 800a892:	b002      	add	sp, #8
 800a894:	4770      	bx	lr
 800a896:	4610      	mov	r0, r2
 800a898:	e7fb      	b.n	800a892 <__ascii_mbtowc+0x16>
 800a89a:	f06f 0001 	mvn.w	r0, #1
 800a89e:	e7f8      	b.n	800a892 <__ascii_mbtowc+0x16>

0800a8a0 <_realloc_r>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	4614      	mov	r4, r2
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	b921      	cbnz	r1, 800a8b6 <_realloc_r+0x16>
 800a8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	f7fe bfa9 	b.w	8009808 <_malloc_r>
 800a8b6:	b92a      	cbnz	r2, 800a8c4 <_realloc_r+0x24>
 800a8b8:	f7fe ff32 	bl	8009720 <_free_r>
 800a8bc:	4625      	mov	r5, r4
 800a8be:	4628      	mov	r0, r5
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	f000 f841 	bl	800a94a <_malloc_usable_size_r>
 800a8c8:	4284      	cmp	r4, r0
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	d802      	bhi.n	800a8d4 <_realloc_r+0x34>
 800a8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8d2:	d8f4      	bhi.n	800a8be <_realloc_r+0x1e>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f7fe ff96 	bl	8009808 <_malloc_r>
 800a8dc:	4680      	mov	r8, r0
 800a8de:	b908      	cbnz	r0, 800a8e4 <_realloc_r+0x44>
 800a8e0:	4645      	mov	r5, r8
 800a8e2:	e7ec      	b.n	800a8be <_realloc_r+0x1e>
 800a8e4:	42b4      	cmp	r4, r6
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	bf28      	it	cs
 800a8ec:	4632      	movcs	r2, r6
 800a8ee:	f7ff ff85 	bl	800a7fc <memcpy>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7fe ff13 	bl	8009720 <_free_r>
 800a8fa:	e7f1      	b.n	800a8e0 <_realloc_r+0x40>

0800a8fc <__ascii_wctomb>:
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	4608      	mov	r0, r1
 800a900:	b141      	cbz	r1, 800a914 <__ascii_wctomb+0x18>
 800a902:	2aff      	cmp	r2, #255	@ 0xff
 800a904:	d904      	bls.n	800a910 <__ascii_wctomb+0x14>
 800a906:	228a      	movs	r2, #138	@ 0x8a
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	4770      	bx	lr
 800a910:	700a      	strb	r2, [r1, #0]
 800a912:	2001      	movs	r0, #1
 800a914:	4770      	bx	lr
	...

0800a918 <fiprintf>:
 800a918:	b40e      	push	{r1, r2, r3}
 800a91a:	b503      	push	{r0, r1, lr}
 800a91c:	4601      	mov	r1, r0
 800a91e:	ab03      	add	r3, sp, #12
 800a920:	4805      	ldr	r0, [pc, #20]	@ (800a938 <fiprintf+0x20>)
 800a922:	f853 2b04 	ldr.w	r2, [r3], #4
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	f7ff fcf5 	bl	800a318 <_vfiprintf_r>
 800a92e:	b002      	add	sp, #8
 800a930:	f85d eb04 	ldr.w	lr, [sp], #4
 800a934:	b003      	add	sp, #12
 800a936:	4770      	bx	lr
 800a938:	2000001c 	.word	0x2000001c

0800a93c <abort>:
 800a93c:	b508      	push	{r3, lr}
 800a93e:	2006      	movs	r0, #6
 800a940:	f000 f834 	bl	800a9ac <raise>
 800a944:	2001      	movs	r0, #1
 800a946:	f7f7 fa27 	bl	8001d98 <_exit>

0800a94a <_malloc_usable_size_r>:
 800a94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94e:	1f18      	subs	r0, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	bfbc      	itt	lt
 800a954:	580b      	ldrlt	r3, [r1, r0]
 800a956:	18c0      	addlt	r0, r0, r3
 800a958:	4770      	bx	lr

0800a95a <_raise_r>:
 800a95a:	291f      	cmp	r1, #31
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4605      	mov	r5, r0
 800a960:	460c      	mov	r4, r1
 800a962:	d904      	bls.n	800a96e <_raise_r+0x14>
 800a964:	2316      	movs	r3, #22
 800a966:	6003      	str	r3, [r0, #0]
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	bd38      	pop	{r3, r4, r5, pc}
 800a96e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a970:	b112      	cbz	r2, 800a978 <_raise_r+0x1e>
 800a972:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a976:	b94b      	cbnz	r3, 800a98c <_raise_r+0x32>
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 f831 	bl	800a9e0 <_getpid_r>
 800a97e:	4622      	mov	r2, r4
 800a980:	4601      	mov	r1, r0
 800a982:	4628      	mov	r0, r5
 800a984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a988:	f000 b818 	b.w	800a9bc <_kill_r>
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d00a      	beq.n	800a9a6 <_raise_r+0x4c>
 800a990:	1c59      	adds	r1, r3, #1
 800a992:	d103      	bne.n	800a99c <_raise_r+0x42>
 800a994:	2316      	movs	r3, #22
 800a996:	6003      	str	r3, [r0, #0]
 800a998:	2001      	movs	r0, #1
 800a99a:	e7e7      	b.n	800a96c <_raise_r+0x12>
 800a99c:	2100      	movs	r1, #0
 800a99e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4798      	blx	r3
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e7e0      	b.n	800a96c <_raise_r+0x12>
	...

0800a9ac <raise>:
 800a9ac:	4b02      	ldr	r3, [pc, #8]	@ (800a9b8 <raise+0xc>)
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	f7ff bfd2 	b.w	800a95a <_raise_r>
 800a9b6:	bf00      	nop
 800a9b8:	2000001c 	.word	0x2000001c

0800a9bc <_kill_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	@ (800a9dc <_kill_r+0x20>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	602b      	str	r3, [r5, #0]
 800a9ca:	f7f7 f9d5 	bl	8001d78 <_kill>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	d102      	bne.n	800a9d8 <_kill_r+0x1c>
 800a9d2:	682b      	ldr	r3, [r5, #0]
 800a9d4:	b103      	cbz	r3, 800a9d8 <_kill_r+0x1c>
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	bd38      	pop	{r3, r4, r5, pc}
 800a9da:	bf00      	nop
 800a9dc:	200004d0 	.word	0x200004d0

0800a9e0 <_getpid_r>:
 800a9e0:	f7f7 b9c2 	b.w	8001d68 <_getpid>

0800a9e4 <_init>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	bf00      	nop
 800a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ea:	bc08      	pop	{r3}
 800a9ec:	469e      	mov	lr, r3
 800a9ee:	4770      	bx	lr

0800a9f0 <_fini>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	bf00      	nop
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr
